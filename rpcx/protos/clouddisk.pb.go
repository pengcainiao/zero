// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: clouddisk.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files   []string     `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *FileDetailRequest) Reset() {
	*x = FileDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetailRequest) ProtoMessage() {}

func (x *FileDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetailRequest.ProtoReflect.Descriptor instead.
func (*FileDetailRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{0}
}

func (x *FileDetailRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileDetailRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type FileDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail []*FileDetail `protobuf:"bytes,1,rep,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *FileDetailResponse) Reset() {
	*x = FileDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetailResponse) ProtoMessage() {}

func (x *FileDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetailResponse.ProtoReflect.Descriptor instead.
func (*FileDetailResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{1}
}

func (x *FileDetailResponse) GetDetail() []*FileDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type FileDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID   string `protobuf:"bytes,1,opt,name=FileID,proto3" json:"FileID,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
}

func (x *FileDetail) Reset() {
	*x = FileDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetail) ProtoMessage() {}

func (x *FileDetail) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetail.ProtoReflect.Descriptor instead.
func (*FileDetail) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{2}
}

func (x *FileDetail) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *FileDetail) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type AssociatedFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"`
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *AssociatedFilesRequest) Reset() {
	*x = AssociatedFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedFilesRequest) ProtoMessage() {}

func (x *AssociatedFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedFilesRequest.ProtoReflect.Descriptor instead.
func (*AssociatedFilesRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{3}
}

func (x *AssociatedFilesRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *AssociatedFilesRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type AssociatedFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *AssociatedFilesResponse) Reset() {
	*x = AssociatedFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedFilesResponse) ProtoMessage() {}

func (x *AssociatedFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedFilesResponse.ProtoReflect.Descriptor instead.
func (*AssociatedFilesResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{4}
}

func (x *AssociatedFilesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath      string       `protobuf:"bytes,1,opt,name=FilePath,proto3" json:"FilePath,omitempty"`           //文件路径
	Content       []byte       `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`             //图片的二进制形式
	OssBucketName string       `protobuf:"bytes,3,opt,name=OssBucketName,proto3" json:"OssBucketName,omitempty"` //bucket名称
	Context       *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{5}
}

func (x *UploadFileRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UploadFileRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UploadFileRequest) GetOssBucketName() string {
	if x != nil {
		return x.OssBucketName
	}
	return ""
}

func (x *UploadFileRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetFilesNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"` //事项ID
	FilesID  []string     `protobuf:"bytes,2,rep,name=FilesID,proto3" json:"FilesID,omitempty"`   //文件ID
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetFilesNameRequest) Reset() {
	*x = GetFilesNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesNameRequest) ProtoMessage() {}

func (x *GetFilesNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesNameRequest.ProtoReflect.Descriptor instead.
func (*GetFilesNameRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{6}
}

func (x *GetFilesNameRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *GetFilesNameRequest) GetFilesID() []string {
	if x != nil {
		return x.FilesID
	}
	return nil
}

func (x *GetFilesNameRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetFilesNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names map[string]string `protobuf:"bytes,1,rep,name=Names,proto3" json:"Names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 文件名
}

func (x *GetFilesNameResponse) Reset() {
	*x = GetFilesNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesNameResponse) ProtoMessage() {}

func (x *GetFilesNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesNameResponse.ProtoReflect.Descriptor instead.
func (*GetFilesNameResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{7}
}

func (x *GetFilesNameResponse) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchUnbindFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID   string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"`     // 飞项id
	FlyeleType string       `protobuf:"bytes,2,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"` // 类型
	CommentID  string       `protobuf:"bytes,3,opt,name=CommentID,proto3" json:"CommentID,omitempty"`   // 评论id
	FilesID    []string     `protobuf:"bytes,4,rep,name=FilesID,proto3" json:"FilesID,omitempty"`       // 文件id
	Context    *UserContext `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchUnbindFileRequest) Reset() {
	*x = BatchUnbindFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUnbindFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUnbindFileRequest) ProtoMessage() {}

func (x *BatchUnbindFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUnbindFileRequest.ProtoReflect.Descriptor instead.
func (*BatchUnbindFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{8}
}

func (x *BatchUnbindFileRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *BatchUnbindFileRequest) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *BatchUnbindFileRequest) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *BatchUnbindFileRequest) GetFilesID() []string {
	if x != nil {
		return x.FilesID
	}
	return nil
}

func (x *BatchUnbindFileRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type FileSensorsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID string `protobuf:"bytes,1,opt,name=FileID,proto3" json:"FileID,omitempty"` //文件ID
	Origin string `protobuf:"bytes,2,opt,name=Origin,proto3" json:"Origin,omitempty"` //文件来源
	Entry  string `protobuf:"bytes,3,opt,name=Entry,proto3" json:"Entry,omitempty"`   //入口
}

func (x *FileSensorsConfig) Reset() {
	*x = FileSensorsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSensorsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSensorsConfig) ProtoMessage() {}

func (x *FileSensorsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSensorsConfig.ProtoReflect.Descriptor instead.
func (*FileSensorsConfig) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{9}
}

func (x *FileSensorsConfig) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *FileSensorsConfig) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *FileSensorsConfig) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

type BatchBindFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleType         string               `protobuf:"bytes,1,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"` //关联业务类型 task record"
	FlyeleID           string               `protobuf:"bytes,2,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"`     //关联业务ID
	CommentID          string               `protobuf:"bytes,3,opt,name=CommentID,proto3" json:"CommentID,omitempty"`   //评论ID，关联评论时任务ID必填
	Catalog            int32                `protobuf:"varint,4,opt,name=Catalog,proto3" json:"Catalog,omitempty"`      //类型 背景信息
	Entry              string               `protobuf:"bytes,5,opt,name=Entry,proto3" json:"Entry,omitempty"`           //神策埋点
	FileUpload         string               `protobuf:"bytes,6,opt,name=FileUpload,proto3" json:"FileUpload,omitempty"` //神策埋点
	FileSensorsConfigs []*FileSensorsConfig `protobuf:"bytes,7,rep,name=FileSensorsConfigs,proto3" json:"FileSensorsConfigs,omitempty"`
	Context            *UserContext         `protobuf:"bytes,8,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchBindFileRequest) Reset() {
	*x = BatchBindFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchBindFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchBindFileRequest) ProtoMessage() {}

func (x *BatchBindFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchBindFileRequest.ProtoReflect.Descriptor instead.
func (*BatchBindFileRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{10}
}

func (x *BatchBindFileRequest) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *BatchBindFileRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *BatchBindFileRequest) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *BatchBindFileRequest) GetCatalog() int32 {
	if x != nil {
		return x.Catalog
	}
	return 0
}

func (x *BatchBindFileRequest) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

func (x *BatchBindFileRequest) GetFileUpload() string {
	if x != nil {
		return x.FileUpload
	}
	return ""
}

func (x *BatchBindFileRequest) GetFileSensorsConfigs() []*FileSensorsConfig {
	if x != nil {
		return x.FileSensorsConfigs
	}
	return nil
}

func (x *BatchBindFileRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type FileSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterUID []string     `protobuf:"bytes,1,rep,name=RequesterUID,proto3" json:"RequesterUID,omitempty"` //需要同步的用户ID列表
	FlyeleID     string       `protobuf:"bytes,2,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"`         //事项ID
	FlyeleType   string       `protobuf:"bytes,3,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"`     //事项类型
	Context      *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *FileSyncRequest) Reset() {
	*x = FileSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSyncRequest) ProtoMessage() {}

func (x *FileSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSyncRequest.ProtoReflect.Descriptor instead.
func (*FileSyncRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{11}
}

func (x *FileSyncRequest) GetRequesterUID() []string {
	if x != nil {
		return x.RequesterUID
	}
	return nil
}

func (x *FileSyncRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *FileSyncRequest) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *FileSyncRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type TaskFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *TaskFilesRequest) Reset() {
	*x = TaskFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilesRequest) ProtoMessage() {}

func (x *TaskFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilesRequest.ProtoReflect.Descriptor instead.
func (*TaskFilesRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{12}
}

func (x *TaskFilesRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskFilesRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type TaskFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskFiles []*TaskFiles `protobuf:"bytes,1,rep,name=TaskFiles,proto3" json:"TaskFiles,omitempty"`
}

func (x *TaskFilesResponse) Reset() {
	*x = TaskFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFilesResponse) ProtoMessage() {}

func (x *TaskFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFilesResponse.ProtoReflect.Descriptor instead.
func (*TaskFilesResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{13}
}

func (x *TaskFilesResponse) GetTaskFiles() []*TaskFiles {
	if x != nil {
		return x.TaskFiles
	}
	return nil
}

type TaskFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID    string `protobuf:"bytes,1,opt,name=FileID,proto3" json:"FileID,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Resources string `protobuf:"bytes,3,opt,name=Resources,proto3" json:"Resources,omitempty"`
	CreatorID string `protobuf:"bytes,4,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CommentID string `protobuf:"bytes,5,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
}

func (x *TaskFiles) Reset() {
	*x = TaskFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskFiles) ProtoMessage() {}

func (x *TaskFiles) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskFiles.ProtoReflect.Descriptor instead.
func (*TaskFiles) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{14}
}

func (x *TaskFiles) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *TaskFiles) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TaskFiles) GetResources() string {
	if x != nil {
		return x.Resources
	}
	return ""
}

func (x *TaskFiles) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TaskFiles) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

type GetBindLogWithAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId     string       `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	FlyeleId   string       `protobuf:"bytes,2,opt,name=FlyeleId,proto3" json:"FlyeleId,omitempty"`
	FlyeleType string       `protobuf:"bytes,3,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"`
	Context    *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetBindLogWithAttachmentRequest) Reset() {
	*x = GetBindLogWithAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBindLogWithAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBindLogWithAttachmentRequest) ProtoMessage() {}

func (x *GetBindLogWithAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBindLogWithAttachmentRequest.ProtoReflect.Descriptor instead.
func (*GetBindLogWithAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{15}
}

func (x *GetBindLogWithAttachmentRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetBindLogWithAttachmentRequest) GetFlyeleId() string {
	if x != nil {
		return x.FlyeleId
	}
	return ""
}

func (x *GetBindLogWithAttachmentRequest) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *GetBindLogWithAttachmentRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetBindLogWithAttachmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId     string `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	FlyeleId   string `protobuf:"bytes,2,opt,name=FlyeleId,proto3" json:"FlyeleId,omitempty"`
	FlyeleType string `protobuf:"bytes,3,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"`
	BoundBy    string `protobuf:"bytes,4,opt,name=BoundBy,proto3" json:"BoundBy,omitempty"`
	CommentId  string `protobuf:"bytes,5,opt,name=CommentId,proto3" json:"CommentId,omitempty"`
	CreatorId  string `protobuf:"bytes,6,opt,name=CreatorId,proto3" json:"CreatorId,omitempty"`
}

func (x *GetBindLogWithAttachmentResponse) Reset() {
	*x = GetBindLogWithAttachmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBindLogWithAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBindLogWithAttachmentResponse) ProtoMessage() {}

func (x *GetBindLogWithAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBindLogWithAttachmentResponse.ProtoReflect.Descriptor instead.
func (*GetBindLogWithAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{16}
}

func (x *GetBindLogWithAttachmentResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetBindLogWithAttachmentResponse) GetFlyeleId() string {
	if x != nil {
		return x.FlyeleId
	}
	return ""
}

func (x *GetBindLogWithAttachmentResponse) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *GetBindLogWithAttachmentResponse) GetBoundBy() string {
	if x != nil {
		return x.BoundBy
	}
	return ""
}

func (x *GetBindLogWithAttachmentResponse) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *GetBindLogWithAttachmentResponse) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type GetFileAddrByFileIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId  string       `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetFileAddrByFileIDRequest) Reset() {
	*x = GetFileAddrByFileIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileAddrByFileIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAddrByFileIDRequest) ProtoMessage() {}

func (x *GetFileAddrByFileIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAddrByFileIDRequest.ProtoReflect.Descriptor instead.
func (*GetFileAddrByFileIDRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{17}
}

func (x *GetFileAddrByFileIDRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileAddrByFileIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetFileAddrByFileIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileAddr string `protobuf:"bytes,1,opt,name=FileAddr,proto3" json:"FileAddr,omitempty"`
}

func (x *GetFileAddrByFileIDResponse) Reset() {
	*x = GetFileAddrByFileIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileAddrByFileIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAddrByFileIDResponse) ProtoMessage() {}

func (x *GetFileAddrByFileIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAddrByFileIDResponse.ProtoReflect.Descriptor instead.
func (*GetFileAddrByFileIDResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{18}
}

func (x *GetFileAddrByFileIDResponse) GetFileAddr() string {
	if x != nil {
		return x.FileAddr
	}
	return ""
}

type GetBindFileSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID   string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"`
	FlyeleType string       `protobuf:"bytes,2,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"`
	Context    *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetBindFileSizeRequest) Reset() {
	*x = GetBindFileSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBindFileSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBindFileSizeRequest) ProtoMessage() {}

func (x *GetBindFileSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBindFileSizeRequest.ProtoReflect.Descriptor instead.
func (*GetBindFileSizeRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{19}
}

func (x *GetBindFileSizeRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *GetBindFileSizeRequest) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *GetBindFileSizeRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetBindFileSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSize int64 `protobuf:"varint,1,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
}

func (x *GetBindFileSizeResponse) Reset() {
	*x = GetBindFileSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBindFileSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBindFileSizeResponse) ProtoMessage() {}

func (x *GetBindFileSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBindFileSizeResponse.ProtoReflect.Descriptor instead.
func (*GetBindFileSizeResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{20}
}

func (x *GetBindFileSizeResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type GetFileByFileIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId  string       `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetFileByFileIDRequest) Reset() {
	*x = GetFileByFileIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileByFileIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileByFileIDRequest) ProtoMessage() {}

func (x *GetFileByFileIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileByFileIDRequest.ProtoReflect.Descriptor instead.
func (*GetFileByFileIDRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{21}
}

func (x *GetFileByFileIDRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileByFileIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectFileTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string       `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetProjectFileTotalRequest) Reset() {
	*x = GetProjectFileTotalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectFileTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectFileTotalRequest) ProtoMessage() {}

func (x *GetProjectFileTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectFileTotalRequest.ProtoReflect.Descriptor instead.
func (*GetProjectFileTotalRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{22}
}

func (x *GetProjectFileTotalRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectFileTotalRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectFileTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int32 `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetProjectFileTotalResponse) Reset() {
	*x = GetProjectFileTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectFileTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectFileTotalResponse) ProtoMessage() {}

func (x *GetProjectFileTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectFileTotalResponse.ProtoReflect.Descriptor instead.
func (*GetProjectFileTotalResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{23}
}

func (x *GetProjectFileTotalResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFilesByFileIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId  []string     `protobuf:"bytes,1,rep,name=FileId,proto3" json:"FileId,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetFilesByFileIDsRequest) Reset() {
	*x = GetFilesByFileIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesByFileIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesByFileIDsRequest) ProtoMessage() {}

func (x *GetFilesByFileIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesByFileIDsRequest.ProtoReflect.Descriptor instead.
func (*GetFilesByFileIDsRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{24}
}

func (x *GetFilesByFileIDsRequest) GetFileId() []string {
	if x != nil {
		return x.FileId
	}
	return nil
}

func (x *GetFilesByFileIDsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetFilesByFileIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*GetFileByFileIDResponse `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
}

func (x *GetFilesByFileIDsResponse) Reset() {
	*x = GetFilesByFileIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesByFileIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesByFileIDsResponse) ProtoMessage() {}

func (x *GetFilesByFileIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesByFileIDsResponse.ProtoReflect.Descriptor instead.
func (*GetFilesByFileIDsResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{25}
}

func (x *GetFilesByFileIDsResponse) GetFiles() []*GetFileByFileIDResponse {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetFileByFileIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FileName   string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Resource   string `protobuf:"bytes,3,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Length     int32  `protobuf:"varint,4,opt,name=Length,proto3" json:"Length,omitempty"`
	Md5        string `protobuf:"bytes,5,opt,name=Md5,proto3" json:"Md5,omitempty"`
	CreatorId  string `protobuf:"bytes,6,opt,name=CreatorId,proto3" json:"CreatorId,omitempty"`
	Extension  string `protobuf:"bytes,7,opt,name=Extension,proto3" json:"Extension,omitempty"`
	FlyeleType string `protobuf:"bytes,8,opt,name=FlyeleType,proto3" json:"FlyeleType,omitempty"`
	FlyeleId   string `protobuf:"bytes,9,opt,name=FlyeleId,proto3" json:"FlyeleId,omitempty"`
}

func (x *GetFileByFileIDResponse) Reset() {
	*x = GetFileByFileIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileByFileIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileByFileIDResponse) ProtoMessage() {}

func (x *GetFileByFileIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileByFileIDResponse.ProtoReflect.Descriptor instead.
func (*GetFileByFileIDResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{26}
}

func (x *GetFileByFileIDResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GetFileByFileIDResponse) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetFlyeleType() string {
	if x != nil {
		return x.FlyeleType
	}
	return ""
}

func (x *GetFileByFileIDResponse) GetFlyeleId() string {
	if x != nil {
		return x.FlyeleId
	}
	return ""
}

type GetUsersFileUsedCapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	WorkspaceID []string     `protobuf:"bytes,2,rep,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	Context     *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUsersFileUsedCapRequest) Reset() {
	*x = GetUsersFileUsedCapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersFileUsedCapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersFileUsedCapRequest) ProtoMessage() {}

func (x *GetUsersFileUsedCapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersFileUsedCapRequest.ProtoReflect.Descriptor instead.
func (*GetUsersFileUsedCapRequest) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{27}
}

func (x *GetUsersFileUsedCapRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *GetUsersFileUsedCapRequest) GetWorkspaceID() []string {
	if x != nil {
		return x.WorkspaceID
	}
	return nil
}

func (x *GetUsersFileUsedCapRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUsersFileUsedCapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllCap int64 `protobuf:"varint,1,opt,name=AllCap,proto3" json:"AllCap,omitempty"`
}

func (x *GetUsersFileUsedCapResponse) Reset() {
	*x = GetUsersFileUsedCapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clouddisk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersFileUsedCapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersFileUsedCapResponse) ProtoMessage() {}

func (x *GetUsersFileUsedCapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clouddisk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersFileUsedCapResponse.ProtoReflect.Descriptor instead.
func (*GetUsersFileUsedCapResponse) Descriptor() ([]byte, []int) {
	return file_clouddisk_proto_rawDescGZIP(), []int{28}
}

func (x *GetUsersFileUsedCapResponse) GetAllCap() int64 {
	if x != nil {
		return x.AllCap
	}
	return 0
}

var File_clouddisk_proto protoreflect.FileDescriptor

var file_clouddisk_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3c, 0x0a, 0x12,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x16,
	0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2f, 0x0a,
	0x17, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x73,
	0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4f, 0x73, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x76, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x62, 0x69, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x65,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c,
	0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x59, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0f,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x55, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x40, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0xa0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c, 0x79,
	0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x39, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7f, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x37,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x5d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x83, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x64, 0x35, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x79,
	0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46,
	0x6c, 0x79, 0x65, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c, 0x79,
	0x65, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c, 0x79,
	0x65, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x35, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x43,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x70,
	0x32, 0x94, 0x07, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x31,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x57, 0x69, 0x74, 0x68, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x42, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x64, 0x43,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clouddisk_proto_rawDescOnce sync.Once
	file_clouddisk_proto_rawDescData = file_clouddisk_proto_rawDesc
)

func file_clouddisk_proto_rawDescGZIP() []byte {
	file_clouddisk_proto_rawDescOnce.Do(func() {
		file_clouddisk_proto_rawDescData = protoimpl.X.CompressGZIP(file_clouddisk_proto_rawDescData)
	})
	return file_clouddisk_proto_rawDescData
}

var file_clouddisk_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_clouddisk_proto_goTypes = []interface{}{
	(*FileDetailRequest)(nil),                // 0: pb.FileDetailRequest
	(*FileDetailResponse)(nil),               // 1: pb.FileDetailResponse
	(*FileDetail)(nil),                       // 2: pb.FileDetail
	(*AssociatedFilesRequest)(nil),           // 3: pb.AssociatedFilesRequest
	(*AssociatedFilesResponse)(nil),          // 4: pb.AssociatedFilesResponse
	(*UploadFileRequest)(nil),                // 5: pb.UploadFileRequest
	(*GetFilesNameRequest)(nil),              // 6: pb.GetFilesNameRequest
	(*GetFilesNameResponse)(nil),             // 7: pb.GetFilesNameResponse
	(*BatchUnbindFileRequest)(nil),           // 8: pb.BatchUnbindFileRequest
	(*FileSensorsConfig)(nil),                // 9: pb.FileSensorsConfig
	(*BatchBindFileRequest)(nil),             // 10: pb.BatchBindFileRequest
	(*FileSyncRequest)(nil),                  // 11: pb.FileSyncRequest
	(*TaskFilesRequest)(nil),                 // 12: pb.TaskFilesRequest
	(*TaskFilesResponse)(nil),                // 13: pb.TaskFilesResponse
	(*TaskFiles)(nil),                        // 14: pb.TaskFiles
	(*GetBindLogWithAttachmentRequest)(nil),  // 15: pb.GetBindLogWithAttachmentRequest
	(*GetBindLogWithAttachmentResponse)(nil), // 16: pb.GetBindLogWithAttachmentResponse
	(*GetFileAddrByFileIDRequest)(nil),       // 17: pb.GetFileAddrByFileIDRequest
	(*GetFileAddrByFileIDResponse)(nil),      // 18: pb.GetFileAddrByFileIDResponse
	(*GetBindFileSizeRequest)(nil),           // 19: pb.GetBindFileSizeRequest
	(*GetBindFileSizeResponse)(nil),          // 20: pb.GetBindFileSizeResponse
	(*GetFileByFileIDRequest)(nil),           // 21: pb.GetFileByFileIDRequest
	(*GetProjectFileTotalRequest)(nil),       // 22: pb.GetProjectFileTotalRequest
	(*GetProjectFileTotalResponse)(nil),      // 23: pb.GetProjectFileTotalResponse
	(*GetFilesByFileIDsRequest)(nil),         // 24: pb.GetFilesByFileIDsRequest
	(*GetFilesByFileIDsResponse)(nil),        // 25: pb.GetFilesByFileIDsResponse
	(*GetFileByFileIDResponse)(nil),          // 26: pb.GetFileByFileIDResponse
	(*GetUsersFileUsedCapRequest)(nil),       // 27: pb.GetUsersFileUsedCapRequest
	(*GetUsersFileUsedCapResponse)(nil),      // 28: pb.GetUsersFileUsedCapResponse
	nil,                                      // 29: pb.GetFilesNameResponse.NamesEntry
	(*UserContext)(nil),                      // 30: pb.UserContext
	(*Response)(nil),                         // 31: pb.Response
}
var file_clouddisk_proto_depIdxs = []int32{
	30, // 0: pb.FileDetailRequest.Context:type_name -> pb.UserContext
	2,  // 1: pb.FileDetailResponse.Detail:type_name -> pb.FileDetail
	30, // 2: pb.AssociatedFilesRequest.Context:type_name -> pb.UserContext
	30, // 3: pb.UploadFileRequest.Context:type_name -> pb.UserContext
	30, // 4: pb.GetFilesNameRequest.Context:type_name -> pb.UserContext
	29, // 5: pb.GetFilesNameResponse.Names:type_name -> pb.GetFilesNameResponse.NamesEntry
	30, // 6: pb.BatchUnbindFileRequest.Context:type_name -> pb.UserContext
	9,  // 7: pb.BatchBindFileRequest.FileSensorsConfigs:type_name -> pb.FileSensorsConfig
	30, // 8: pb.BatchBindFileRequest.Context:type_name -> pb.UserContext
	30, // 9: pb.FileSyncRequest.Context:type_name -> pb.UserContext
	30, // 10: pb.TaskFilesRequest.Context:type_name -> pb.UserContext
	14, // 11: pb.TaskFilesResponse.TaskFiles:type_name -> pb.TaskFiles
	30, // 12: pb.GetBindLogWithAttachmentRequest.Context:type_name -> pb.UserContext
	30, // 13: pb.GetFileAddrByFileIDRequest.Context:type_name -> pb.UserContext
	30, // 14: pb.GetBindFileSizeRequest.Context:type_name -> pb.UserContext
	30, // 15: pb.GetFileByFileIDRequest.Context:type_name -> pb.UserContext
	30, // 16: pb.GetProjectFileTotalRequest.Context:type_name -> pb.UserContext
	30, // 17: pb.GetFilesByFileIDsRequest.Context:type_name -> pb.UserContext
	26, // 18: pb.GetFilesByFileIDsResponse.Files:type_name -> pb.GetFileByFileIDResponse
	30, // 19: pb.GetUsersFileUsedCapRequest.Context:type_name -> pb.UserContext
	0,  // 20: pb.CloudDisk.FileDetail:input_type -> pb.FileDetailRequest
	3,  // 21: pb.CloudDisk.AssociatedFiles:input_type -> pb.AssociatedFilesRequest
	5,  // 22: pb.CloudDisk.UploadFile:input_type -> pb.UploadFileRequest
	6,  // 23: pb.CloudDisk.GetFilesName:input_type -> pb.GetFilesNameRequest
	8,  // 24: pb.CloudDisk.BatchUnbindFile:input_type -> pb.BatchUnbindFileRequest
	10, // 25: pb.CloudDisk.BatchBindFile:input_type -> pb.BatchBindFileRequest
	11, // 26: pb.CloudDisk.FileSync:input_type -> pb.FileSyncRequest
	12, // 27: pb.CloudDisk.TaskFiles:input_type -> pb.TaskFilesRequest
	15, // 28: pb.CloudDisk.GetBindLogWithAttachment:input_type -> pb.GetBindLogWithAttachmentRequest
	17, // 29: pb.CloudDisk.GetFileAddrByFileID:input_type -> pb.GetFileAddrByFileIDRequest
	19, // 30: pb.CloudDisk.GetBindFileSize:input_type -> pb.GetBindFileSizeRequest
	21, // 31: pb.CloudDisk.GetFileByFileID:input_type -> pb.GetFileByFileIDRequest
	22, // 32: pb.CloudDisk.GetProjectFileTotal:input_type -> pb.GetProjectFileTotalRequest
	24, // 33: pb.CloudDisk.GetFilesByFileIDs:input_type -> pb.GetFilesByFileIDsRequest
	27, // 34: pb.CloudDisk.GetUsersFileUsedCap:input_type -> pb.GetUsersFileUsedCapRequest
	31, // 35: pb.CloudDisk.FileDetail:output_type -> pb.Response
	31, // 36: pb.CloudDisk.AssociatedFiles:output_type -> pb.Response
	31, // 37: pb.CloudDisk.UploadFile:output_type -> pb.Response
	31, // 38: pb.CloudDisk.GetFilesName:output_type -> pb.Response
	31, // 39: pb.CloudDisk.BatchUnbindFile:output_type -> pb.Response
	31, // 40: pb.CloudDisk.BatchBindFile:output_type -> pb.Response
	31, // 41: pb.CloudDisk.FileSync:output_type -> pb.Response
	31, // 42: pb.CloudDisk.TaskFiles:output_type -> pb.Response
	31, // 43: pb.CloudDisk.GetBindLogWithAttachment:output_type -> pb.Response
	31, // 44: pb.CloudDisk.GetFileAddrByFileID:output_type -> pb.Response
	31, // 45: pb.CloudDisk.GetBindFileSize:output_type -> pb.Response
	31, // 46: pb.CloudDisk.GetFileByFileID:output_type -> pb.Response
	31, // 47: pb.CloudDisk.GetProjectFileTotal:output_type -> pb.Response
	31, // 48: pb.CloudDisk.GetFilesByFileIDs:output_type -> pb.Response
	31, // 49: pb.CloudDisk.GetUsersFileUsedCap:output_type -> pb.Response
	35, // [35:50] is the sub-list for method output_type
	20, // [20:35] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_clouddisk_proto_init() }
func file_clouddisk_proto_init() {
	if File_clouddisk_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_clouddisk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUnbindFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSensorsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchBindFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBindLogWithAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBindLogWithAttachmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileAddrByFileIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileAddrByFileIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBindFileSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBindFileSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileByFileIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectFileTotalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectFileTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesByFileIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesByFileIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileByFileIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersFileUsedCapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clouddisk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersFileUsedCapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clouddisk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clouddisk_proto_goTypes,
		DependencyIndexes: file_clouddisk_proto_depIdxs,
		MessageInfos:      file_clouddisk_proto_msgTypes,
	}.Build()
	File_clouddisk_proto = out.File
	file_clouddisk_proto_rawDesc = nil
	file_clouddisk_proto_goTypes = nil
	file_clouddisk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CloudDiskClient is the client API for CloudDisk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudDiskClient interface {
	FileDetail(ctx context.Context, in *FileDetailRequest, opts ...grpc.CallOption) (*Response, error)
	AssociatedFiles(ctx context.Context, in *AssociatedFilesRequest, opts ...grpc.CallOption) (*Response, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*Response, error)
	GetFilesName(ctx context.Context, in *GetFilesNameRequest, opts ...grpc.CallOption) (*Response, error)
	BatchUnbindFile(ctx context.Context, in *BatchUnbindFileRequest, opts ...grpc.CallOption) (*Response, error)
	BatchBindFile(ctx context.Context, in *BatchBindFileRequest, opts ...grpc.CallOption) (*Response, error)
	FileSync(ctx context.Context, in *FileSyncRequest, opts ...grpc.CallOption) (*Response, error)
	TaskFiles(ctx context.Context, in *TaskFilesRequest, opts ...grpc.CallOption) (*Response, error)
	GetBindLogWithAttachment(ctx context.Context, in *GetBindLogWithAttachmentRequest, opts ...grpc.CallOption) (*Response, error)
	GetFileAddrByFileID(ctx context.Context, in *GetFileAddrByFileIDRequest, opts ...grpc.CallOption) (*Response, error)
	GetBindFileSize(ctx context.Context, in *GetBindFileSizeRequest, opts ...grpc.CallOption) (*Response, error)
	GetFileByFileID(ctx context.Context, in *GetFileByFileIDRequest, opts ...grpc.CallOption) (*Response, error)
	GetProjectFileTotal(ctx context.Context, in *GetProjectFileTotalRequest, opts ...grpc.CallOption) (*Response, error)
	GetFilesByFileIDs(ctx context.Context, in *GetFilesByFileIDsRequest, opts ...grpc.CallOption) (*Response, error)
	GetUsersFileUsedCap(ctx context.Context, in *GetUsersFileUsedCapRequest, opts ...grpc.CallOption) (*Response, error)
}

type cloudDiskClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudDiskClient(cc grpc.ClientConnInterface) CloudDiskClient {
	return &cloudDiskClient{cc}
}

func (c *cloudDiskClient) FileDetail(ctx context.Context, in *FileDetailRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/FileDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) AssociatedFiles(ctx context.Context, in *AssociatedFilesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/AssociatedFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetFilesName(ctx context.Context, in *GetFilesNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetFilesName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) BatchUnbindFile(ctx context.Context, in *BatchUnbindFileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/BatchUnbindFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) BatchBindFile(ctx context.Context, in *BatchBindFileRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/BatchBindFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) FileSync(ctx context.Context, in *FileSyncRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/FileSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) TaskFiles(ctx context.Context, in *TaskFilesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/TaskFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetBindLogWithAttachment(ctx context.Context, in *GetBindLogWithAttachmentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetBindLogWithAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetFileAddrByFileID(ctx context.Context, in *GetFileAddrByFileIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetFileAddrByFileID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetBindFileSize(ctx context.Context, in *GetBindFileSizeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetBindFileSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetFileByFileID(ctx context.Context, in *GetFileByFileIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetFileByFileID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetProjectFileTotal(ctx context.Context, in *GetProjectFileTotalRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetProjectFileTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetFilesByFileIDs(ctx context.Context, in *GetFilesByFileIDsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetFilesByFileIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudDiskClient) GetUsersFileUsedCap(ctx context.Context, in *GetUsersFileUsedCapRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CloudDisk/GetUsersFileUsedCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudDiskServer is the server API for CloudDisk service.
type CloudDiskServer interface {
	FileDetail(context.Context, *FileDetailRequest) (*Response, error)
	AssociatedFiles(context.Context, *AssociatedFilesRequest) (*Response, error)
	UploadFile(context.Context, *UploadFileRequest) (*Response, error)
	GetFilesName(context.Context, *GetFilesNameRequest) (*Response, error)
	BatchUnbindFile(context.Context, *BatchUnbindFileRequest) (*Response, error)
	BatchBindFile(context.Context, *BatchBindFileRequest) (*Response, error)
	FileSync(context.Context, *FileSyncRequest) (*Response, error)
	TaskFiles(context.Context, *TaskFilesRequest) (*Response, error)
	GetBindLogWithAttachment(context.Context, *GetBindLogWithAttachmentRequest) (*Response, error)
	GetFileAddrByFileID(context.Context, *GetFileAddrByFileIDRequest) (*Response, error)
	GetBindFileSize(context.Context, *GetBindFileSizeRequest) (*Response, error)
	GetFileByFileID(context.Context, *GetFileByFileIDRequest) (*Response, error)
	GetProjectFileTotal(context.Context, *GetProjectFileTotalRequest) (*Response, error)
	GetFilesByFileIDs(context.Context, *GetFilesByFileIDsRequest) (*Response, error)
	GetUsersFileUsedCap(context.Context, *GetUsersFileUsedCapRequest) (*Response, error)
}

// UnimplementedCloudDiskServer can be embedded to have forward compatible implementations.
type UnimplementedCloudDiskServer struct {
}

func (*UnimplementedCloudDiskServer) FileDetail(context.Context, *FileDetailRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDetail not implemented")
}
func (*UnimplementedCloudDiskServer) AssociatedFiles(context.Context, *AssociatedFilesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociatedFiles not implemented")
}
func (*UnimplementedCloudDiskServer) UploadFile(context.Context, *UploadFileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedCloudDiskServer) GetFilesName(context.Context, *GetFilesNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesName not implemented")
}
func (*UnimplementedCloudDiskServer) BatchUnbindFile(context.Context, *BatchUnbindFileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUnbindFile not implemented")
}
func (*UnimplementedCloudDiskServer) BatchBindFile(context.Context, *BatchBindFileRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchBindFile not implemented")
}
func (*UnimplementedCloudDiskServer) FileSync(context.Context, *FileSyncRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileSync not implemented")
}
func (*UnimplementedCloudDiskServer) TaskFiles(context.Context, *TaskFilesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFiles not implemented")
}
func (*UnimplementedCloudDiskServer) GetBindLogWithAttachment(context.Context, *GetBindLogWithAttachmentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindLogWithAttachment not implemented")
}
func (*UnimplementedCloudDiskServer) GetFileAddrByFileID(context.Context, *GetFileAddrByFileIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAddrByFileID not implemented")
}
func (*UnimplementedCloudDiskServer) GetBindFileSize(context.Context, *GetBindFileSizeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindFileSize not implemented")
}
func (*UnimplementedCloudDiskServer) GetFileByFileID(context.Context, *GetFileByFileIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByFileID not implemented")
}
func (*UnimplementedCloudDiskServer) GetProjectFileTotal(context.Context, *GetProjectFileTotalRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectFileTotal not implemented")
}
func (*UnimplementedCloudDiskServer) GetFilesByFileIDs(context.Context, *GetFilesByFileIDsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByFileIDs not implemented")
}
func (*UnimplementedCloudDiskServer) GetUsersFileUsedCap(context.Context, *GetUsersFileUsedCapRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFileUsedCap not implemented")
}

func RegisterCloudDiskServer(s *grpc.Server, srv CloudDiskServer) {
	s.RegisterService(&_CloudDisk_serviceDesc, srv)
}

func _CloudDisk_FileDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).FileDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/FileDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).FileDetail(ctx, req.(*FileDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_AssociatedFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatedFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).AssociatedFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/AssociatedFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).AssociatedFiles(ctx, req.(*AssociatedFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetFilesName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetFilesName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetFilesName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetFilesName(ctx, req.(*GetFilesNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_BatchUnbindFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnbindFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).BatchUnbindFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/BatchUnbindFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).BatchUnbindFile(ctx, req.(*BatchUnbindFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_BatchBindFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchBindFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).BatchBindFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/BatchBindFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).BatchBindFile(ctx, req.(*BatchBindFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_FileSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).FileSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/FileSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).FileSync(ctx, req.(*FileSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_TaskFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).TaskFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/TaskFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).TaskFiles(ctx, req.(*TaskFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetBindLogWithAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindLogWithAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetBindLogWithAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetBindLogWithAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetBindLogWithAttachment(ctx, req.(*GetBindLogWithAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetFileAddrByFileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAddrByFileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetFileAddrByFileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetFileAddrByFileID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetFileAddrByFileID(ctx, req.(*GetFileAddrByFileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetBindFileSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindFileSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetBindFileSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetBindFileSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetBindFileSize(ctx, req.(*GetBindFileSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetFileByFileID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByFileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetFileByFileID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetFileByFileID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetFileByFileID(ctx, req.(*GetFileByFileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetProjectFileTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectFileTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetProjectFileTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetProjectFileTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetProjectFileTotal(ctx, req.(*GetProjectFileTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetFilesByFileIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByFileIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetFilesByFileIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetFilesByFileIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetFilesByFileIDs(ctx, req.(*GetFilesByFileIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudDisk_GetUsersFileUsedCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersFileUsedCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudDiskServer).GetUsersFileUsedCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CloudDisk/GetUsersFileUsedCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudDiskServer).GetUsersFileUsedCap(ctx, req.(*GetUsersFileUsedCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudDisk_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CloudDisk",
	HandlerType: (*CloudDiskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileDetail",
			Handler:    _CloudDisk_FileDetail_Handler,
		},
		{
			MethodName: "AssociatedFiles",
			Handler:    _CloudDisk_AssociatedFiles_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _CloudDisk_UploadFile_Handler,
		},
		{
			MethodName: "GetFilesName",
			Handler:    _CloudDisk_GetFilesName_Handler,
		},
		{
			MethodName: "BatchUnbindFile",
			Handler:    _CloudDisk_BatchUnbindFile_Handler,
		},
		{
			MethodName: "BatchBindFile",
			Handler:    _CloudDisk_BatchBindFile_Handler,
		},
		{
			MethodName: "FileSync",
			Handler:    _CloudDisk_FileSync_Handler,
		},
		{
			MethodName: "TaskFiles",
			Handler:    _CloudDisk_TaskFiles_Handler,
		},
		{
			MethodName: "GetBindLogWithAttachment",
			Handler:    _CloudDisk_GetBindLogWithAttachment_Handler,
		},
		{
			MethodName: "GetFileAddrByFileID",
			Handler:    _CloudDisk_GetFileAddrByFileID_Handler,
		},
		{
			MethodName: "GetBindFileSize",
			Handler:    _CloudDisk_GetBindFileSize_Handler,
		},
		{
			MethodName: "GetFileByFileID",
			Handler:    _CloudDisk_GetFileByFileID_Handler,
		},
		{
			MethodName: "GetProjectFileTotal",
			Handler:    _CloudDisk_GetProjectFileTotal_Handler,
		},
		{
			MethodName: "GetFilesByFileIDs",
			Handler:    _CloudDisk_GetFilesByFileIDs_Handler,
		},
		{
			MethodName: "GetUsersFileUsedCap",
			Handler:    _CloudDisk_GetUsersFileUsedCap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clouddisk.proto",
}
