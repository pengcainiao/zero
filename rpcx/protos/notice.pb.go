// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: notice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendSseMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event   string           `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	Data    *ExchangeMessage `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Context *UserContext     `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *SendSseMessageRequest) Reset() {
	*x = SendSseMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSseMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSseMessageRequest) ProtoMessage() {}

func (x *SendSseMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSseMessageRequest.ProtoReflect.Descriptor instead.
func (*SendSseMessageRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{0}
}

func (x *SendSseMessageRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *SendSseMessageRequest) GetData() *ExchangeMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SendSseMessageRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type ExchangeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`        //消息编码
	NotifyTo []string `protobuf:"bytes,2,rep,name=NotifyTo,proto3" json:"NotifyTo,omitempty"` //消息通知人列表
	Message  string   `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`   //消息
	Title    string   `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`       //标题
	RefID    string   `protobuf:"bytes,5,opt,name=RefID,proto3" json:"RefID,omitempty"`       //内容关联的消息ID
}

func (x *ExchangeMessage) Reset() {
	*x = ExchangeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMessage) ProtoMessage() {}

func (x *ExchangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMessage.ProtoReflect.Descriptor instead.
func (*ExchangeMessage) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ExchangeMessage) GetNotifyTo() []string {
	if x != nil {
		return x.NotifyTo
	}
	return nil
}

func (x *ExchangeMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExchangeMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExchangeMessage) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

type TempRemoveMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"` // 事项id
	UserID   []string     `protobuf:"bytes,2,rep,name=UserID,proto3" json:"UserID,omitempty"`     // 删除消息用户id列表
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *TempRemoveMessageRequest) Reset() {
	*x = TempRemoveMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempRemoveMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempRemoveMessageRequest) ProtoMessage() {}

func (x *TempRemoveMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempRemoveMessageRequest.ProtoReflect.Descriptor instead.
func (*TempRemoveMessageRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{2}
}

func (x *TempRemoveMessageRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *TempRemoveMessageRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *TempRemoveMessageRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type SendSMSMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateCode string            `protobuf:"bytes,1,opt,name=TemplateCode,proto3" json:"TemplateCode,omitempty"`
	PhoneNumber  []string          `protobuf:"bytes,2,rep,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	Parameters   map[string]string `protobuf:"bytes,3,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context      *UserContext      `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *SendSMSMessageRequest) Reset() {
	*x = SendSMSMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSMSMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSMSMessageRequest) ProtoMessage() {}

func (x *SendSMSMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSMSMessageRequest.ProtoReflect.Descriptor instead.
func (*SendSMSMessageRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{3}
}

func (x *SendSMSMessageRequest) GetTemplateCode() string {
	if x != nil {
		return x.TemplateCode
	}
	return ""
}

func (x *SendSMSMessageRequest) GetPhoneNumber() []string {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *SendSMSMessageRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SendSMSMessageRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// RecentlyUpdate
type RecentlyUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	FilterBy    string       `protobuf:"bytes,2,opt,name=FilterBy,proto3" json:"FilterBy,omitempty"`       // 过滤条件
	TaskID      string       `protobuf:"bytes,3,opt,name=TaskID,proto3" json:"TaskID,omitempty"`           // 事项id
	TopParentID string       `protobuf:"bytes,4,opt,name=TopParentID,proto3" json:"TopParentID,omitempty"` // 事项id
	ShowMode    int32        `protobuf:"varint,5,opt,name=ShowMode,proto3" json:"ShowMode,omitempty"`      // 显示模式
	Paging      *Paging      `protobuf:"bytes,6,opt,name=Paging,proto3" json:"Paging,omitempty"`           // 分页数据
}

func (x *RecentlyUpdateRequest) Reset() {
	*x = RecentlyUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyUpdateRequest) ProtoMessage() {}

func (x *RecentlyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyUpdateRequest.ProtoReflect.Descriptor instead.
func (*RecentlyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{4}
}

func (x *RecentlyUpdateRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RecentlyUpdateRequest) GetFilterBy() string {
	if x != nil {
		return x.FilterBy
	}
	return ""
}

func (x *RecentlyUpdateRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *RecentlyUpdateRequest) GetTopParentID() string {
	if x != nil {
		return x.TopParentID
	}
	return ""
}

func (x *RecentlyUpdateRequest) GetShowMode() int32 {
	if x != nil {
		return x.ShowMode
	}
	return 0
}

func (x *RecentlyUpdateRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

type RecentlyUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int32                  `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`         // 角标总数
	HasRedDot bool                   `protobuf:"varint,2,opt,name=HasRedDot,proto3" json:"HasRedDot,omitempty"` // 是否有红点
	Tasks     []*RecentlyUpdateTasks `protobuf:"bytes,3,rep,name=Tasks,proto3" json:"Tasks,omitempty"`          // 列表数据
}

func (x *RecentlyUpdateResponse) Reset() {
	*x = RecentlyUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyUpdateResponse) ProtoMessage() {}

func (x *RecentlyUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyUpdateResponse.ProtoReflect.Descriptor instead.
func (*RecentlyUpdateResponse) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{5}
}

func (x *RecentlyUpdateResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RecentlyUpdateResponse) GetHasRedDot() bool {
	if x != nil {
		return x.HasRedDot
	}
	return false
}

func (x *RecentlyUpdateResponse) GetTasks() []*RecentlyUpdateTasks {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type RecentlyUpdateTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefID         string `protobuf:"bytes,1,opt,name=RefID,proto3" json:"RefID,omitempty"`                   // 事项id
	RefType       string `protobuf:"bytes,2,opt,name=RefType,proto3" json:"RefType,omitempty"`               // 类型
	CommentID     string `protobuf:"bytes,3,opt,name=CommentID,proto3" json:"CommentID,omitempty"`           // 最新评论id
	FnType        int32  `protobuf:"varint,4,opt,name=FnType,proto3" json:"FnType,omitempty"`                // 功能
	Unread        int32  `protobuf:"varint,5,opt,name=Unread,proto3" json:"Unread,omitempty"`                // 角标数
	RemindMe      bool   `protobuf:"varint,6,opt,name=RemindMe,proto3" json:"RemindMe,omitempty"`            // @我
	IsFront       bool   `protobuf:"varint,7,opt,name=IsFront,proto3" json:"IsFront,omitempty"`              // 置顶
	IsRedDot      bool   `protobuf:"varint,8,opt,name=IsRedDot,proto3" json:"IsRedDot,omitempty"`            // 红点
	TopmostAt     int64  `protobuf:"varint,9,opt,name=TopmostAt,proto3" json:"TopmostAt,omitempty"`          // 置顶时间
	IsChild       bool   `protobuf:"varint,10,opt,name=IsChild,proto3" json:"IsChild,omitempty"`             // 是否有子事项
	IsUnreadChild bool   `protobuf:"varint,11,opt,name=IsUnreadChild,proto3" json:"IsUnreadChild,omitempty"` // 是否有未读子事项
	TopParentID   string `protobuf:"bytes,12,opt,name=TopParentID,proto3" json:"TopParentID,omitempty"`      // 顶级事项id
}

func (x *RecentlyUpdateTasks) Reset() {
	*x = RecentlyUpdateTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyUpdateTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyUpdateTasks) ProtoMessage() {}

func (x *RecentlyUpdateTasks) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyUpdateTasks.ProtoReflect.Descriptor instead.
func (*RecentlyUpdateTasks) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{6}
}

func (x *RecentlyUpdateTasks) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *RecentlyUpdateTasks) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *RecentlyUpdateTasks) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *RecentlyUpdateTasks) GetFnType() int32 {
	if x != nil {
		return x.FnType
	}
	return 0
}

func (x *RecentlyUpdateTasks) GetUnread() int32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

func (x *RecentlyUpdateTasks) GetRemindMe() bool {
	if x != nil {
		return x.RemindMe
	}
	return false
}

func (x *RecentlyUpdateTasks) GetIsFront() bool {
	if x != nil {
		return x.IsFront
	}
	return false
}

func (x *RecentlyUpdateTasks) GetIsRedDot() bool {
	if x != nil {
		return x.IsRedDot
	}
	return false
}

func (x *RecentlyUpdateTasks) GetTopmostAt() int64 {
	if x != nil {
		return x.TopmostAt
	}
	return 0
}

func (x *RecentlyUpdateTasks) GetIsChild() bool {
	if x != nil {
		return x.IsChild
	}
	return false
}

func (x *RecentlyUpdateTasks) GetIsUnreadChild() bool {
	if x != nil {
		return x.IsUnreadChild
	}
	return false
}

func (x *RecentlyUpdateTasks) GetTopParentID() string {
	if x != nil {
		return x.TopParentID
	}
	return ""
}

//TimeCollectTransToMeeting
type TimeCollectTransToMeetingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *TimeCollectTransToMeetingRequest) Reset() {
	*x = TimeCollectTransToMeetingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeCollectTransToMeetingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeCollectTransToMeetingRequest) ProtoMessage() {}

func (x *TimeCollectTransToMeetingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeCollectTransToMeetingRequest.ProtoReflect.Descriptor instead.
func (*TimeCollectTransToMeetingRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{7}
}

func (x *TimeCollectTransToMeetingRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TimeCollectTransToMeetingRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryRecordUnreadMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *QueryRecordUnreadMessagesRequest) Reset() {
	*x = QueryRecordUnreadMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordUnreadMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordUnreadMessagesRequest) ProtoMessage() {}

func (x *QueryRecordUnreadMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordUnreadMessagesRequest.ProtoReflect.Descriptor instead.
func (*QueryRecordUnreadMessagesRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{8}
}

func (x *QueryRecordUnreadMessagesRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryRecordUnreadMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentDetails []*CommentDetail `protobuf:"bytes,1,rep,name=CommentDetails,proto3" json:"CommentDetails,omitempty"`
	Total          int32            `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *QueryRecordUnreadMessagesResponse) Reset() {
	*x = QueryRecordUnreadMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecordUnreadMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecordUnreadMessagesResponse) ProtoMessage() {}

func (x *QueryRecordUnreadMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecordUnreadMessagesResponse.ProtoReflect.Descriptor instead.
func (*QueryRecordUnreadMessagesResponse) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRecordUnreadMessagesResponse) GetCommentDetails() []*CommentDetail {
	if x != nil {
		return x.CommentDetails
	}
	return nil
}

func (x *QueryRecordUnreadMessagesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CommentDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string   `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"`
	Comments []string `protobuf:"bytes,2,rep,name=Comments,proto3" json:"Comments,omitempty"`
	Total    int32    `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *CommentDetail) Reset() {
	*x = CommentDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentDetail) ProtoMessage() {}

func (x *CommentDetail) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentDetail.ProtoReflect.Descriptor instead.
func (*CommentDetail) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{10}
}

func (x *CommentDetail) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *CommentDetail) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *CommentDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateUserPrevMessageIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	CommentID string       `protobuf:"bytes,2,opt,name=CommentID,proto3" json:"CommentID,omitempty"`
	Context   *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateUserPrevMessageIDRequest) Reset() {
	*x = UpdateUserPrevMessageIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPrevMessageIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPrevMessageIDRequest) ProtoMessage() {}

func (x *UpdateUserPrevMessageIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPrevMessageIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPrevMessageIDRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserPrevMessageIDRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *UpdateUserPrevMessageIDRequest) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

func (x *UpdateUserPrevMessageIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryUserUnreadMessageSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *QueryUserUnreadMessageSummaryRequest) Reset() {
	*x = QueryUserUnreadMessageSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserUnreadMessageSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserUnreadMessageSummaryRequest) ProtoMessage() {}

func (x *QueryUserUnreadMessageSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserUnreadMessageSummaryRequest.ProtoReflect.Descriptor instead.
func (*QueryUserUnreadMessageSummaryRequest) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{12}
}

func (x *QueryUserUnreadMessageSummaryRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryUserUnreadMessageSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task   *UnreadTaskMessage   `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
	Record *UnreadRecordMessage `protobuf:"bytes,2,opt,name=Record,proto3" json:"Record,omitempty"`
}

func (x *QueryUserUnreadMessageSummaryResponse) Reset() {
	*x = QueryUserUnreadMessageSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserUnreadMessageSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserUnreadMessageSummaryResponse) ProtoMessage() {}

func (x *QueryUserUnreadMessageSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserUnreadMessageSummaryResponse.ProtoReflect.Descriptor instead.
func (*QueryUserUnreadMessageSummaryResponse) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{13}
}

func (x *QueryUserUnreadMessageSummaryResponse) GetTask() *UnreadTaskMessage {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *QueryUserUnreadMessageSummaryResponse) GetRecord() *UnreadRecordMessage {
	if x != nil {
		return x.Record
	}
	return nil
}

type UnreadTaskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadTotal int32 `protobuf:"varint,1,opt,name=UnreadTotal,proto3" json:"UnreadTotal,omitempty"`
	HasRedDot   bool  `protobuf:"varint,2,opt,name=HasRedDot,proto3" json:"HasRedDot,omitempty"`
}

func (x *UnreadTaskMessage) Reset() {
	*x = UnreadTaskMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadTaskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadTaskMessage) ProtoMessage() {}

func (x *UnreadTaskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadTaskMessage.ProtoReflect.Descriptor instead.
func (*UnreadTaskMessage) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{14}
}

func (x *UnreadTaskMessage) GetUnreadTotal() int32 {
	if x != nil {
		return x.UnreadTotal
	}
	return 0
}

func (x *UnreadTaskMessage) GetHasRedDot() bool {
	if x != nil {
		return x.HasRedDot
	}
	return false
}

type UnreadRecordMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnreadTotal    int32  `protobuf:"varint,1,opt,name=UnreadTotal,proto3" json:"UnreadTotal,omitempty"`
	NewShareAvatar string `protobuf:"bytes,2,opt,name=NewShareAvatar,proto3" json:"NewShareAvatar,omitempty"`
}

func (x *UnreadRecordMessage) Reset() {
	*x = UnreadRecordMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notice_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadRecordMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadRecordMessage) ProtoMessage() {}

func (x *UnreadRecordMessage) ProtoReflect() protoreflect.Message {
	mi := &file_notice_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadRecordMessage.ProtoReflect.Descriptor instead.
func (*UnreadRecordMessage) Descriptor() ([]byte, []int) {
	return file_notice_proto_rawDescGZIP(), []int{15}
}

func (x *UnreadRecordMessage) GetUnreadTotal() int32 {
	if x != nil {
		return x.UnreadTotal
	}
	return 0
}

func (x *UnreadRecordMessage) GetNewShareAvatar() string {
	if x != nil {
		return x.NewShareAvatar
	}
	return ""
}

var File_notice_proto protoreflect.FileDescriptor

var file_notice_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x66, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49,
	0x44, 0x22, 0x79, 0x0a, 0x18, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x6c, 0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x92, 0x02, 0x0a,
	0x15, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x4d, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x4d, 0x53, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x22, 0x7b, 0x0a, 0x16,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x48, 0x61, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x48, 0x61, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x13, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x46, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x49, 0x73, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x65, 0x0a, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4d, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x74, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x81, 0x01, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x51, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a, 0x11, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x48, 0x61, 0x73, 0x52, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x22, 0x5f,
	0x0a, 0x13, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x32,
	0xc2, 0x04, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x4d,
	0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x4d, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x19,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x54, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54,
	0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x1d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notice_proto_rawDescOnce sync.Once
	file_notice_proto_rawDescData = file_notice_proto_rawDesc
)

func file_notice_proto_rawDescGZIP() []byte {
	file_notice_proto_rawDescOnce.Do(func() {
		file_notice_proto_rawDescData = protoimpl.X.CompressGZIP(file_notice_proto_rawDescData)
	})
	return file_notice_proto_rawDescData
}

var file_notice_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_notice_proto_goTypes = []interface{}{
	(*SendSseMessageRequest)(nil),                 // 0: pb.SendSseMessageRequest
	(*ExchangeMessage)(nil),                       // 1: pb.ExchangeMessage
	(*TempRemoveMessageRequest)(nil),              // 2: pb.TempRemoveMessageRequest
	(*SendSMSMessageRequest)(nil),                 // 3: pb.SendSMSMessageRequest
	(*RecentlyUpdateRequest)(nil),                 // 4: pb.RecentlyUpdateRequest
	(*RecentlyUpdateResponse)(nil),                // 5: pb.RecentlyUpdateResponse
	(*RecentlyUpdateTasks)(nil),                   // 6: pb.RecentlyUpdateTasks
	(*TimeCollectTransToMeetingRequest)(nil),      // 7: pb.TimeCollectTransToMeetingRequest
	(*QueryRecordUnreadMessagesRequest)(nil),      // 8: pb.QueryRecordUnreadMessagesRequest
	(*QueryRecordUnreadMessagesResponse)(nil),     // 9: pb.QueryRecordUnreadMessagesResponse
	(*CommentDetail)(nil),                         // 10: pb.CommentDetail
	(*UpdateUserPrevMessageIDRequest)(nil),        // 11: pb.UpdateUserPrevMessageIDRequest
	(*QueryUserUnreadMessageSummaryRequest)(nil),  // 12: pb.QueryUserUnreadMessageSummaryRequest
	(*QueryUserUnreadMessageSummaryResponse)(nil), // 13: pb.QueryUserUnreadMessageSummaryResponse
	(*UnreadTaskMessage)(nil),                     // 14: pb.UnreadTaskMessage
	(*UnreadRecordMessage)(nil),                   // 15: pb.UnreadRecordMessage
	nil,                                           // 16: pb.SendSMSMessageRequest.ParametersEntry
	(*UserContext)(nil),                           // 17: pb.UserContext
	(*Paging)(nil),                                // 18: pb.Paging
	(*Response)(nil),                              // 19: pb.Response
}
var file_notice_proto_depIdxs = []int32{
	1,  // 0: pb.SendSseMessageRequest.Data:type_name -> pb.ExchangeMessage
	17, // 1: pb.SendSseMessageRequest.Context:type_name -> pb.UserContext
	17, // 2: pb.TempRemoveMessageRequest.Context:type_name -> pb.UserContext
	16, // 3: pb.SendSMSMessageRequest.Parameters:type_name -> pb.SendSMSMessageRequest.ParametersEntry
	17, // 4: pb.SendSMSMessageRequest.Context:type_name -> pb.UserContext
	17, // 5: pb.RecentlyUpdateRequest.Context:type_name -> pb.UserContext
	18, // 6: pb.RecentlyUpdateRequest.Paging:type_name -> pb.Paging
	6,  // 7: pb.RecentlyUpdateResponse.Tasks:type_name -> pb.RecentlyUpdateTasks
	17, // 8: pb.TimeCollectTransToMeetingRequest.Context:type_name -> pb.UserContext
	17, // 9: pb.QueryRecordUnreadMessagesRequest.Context:type_name -> pb.UserContext
	10, // 10: pb.QueryRecordUnreadMessagesResponse.CommentDetails:type_name -> pb.CommentDetail
	17, // 11: pb.UpdateUserPrevMessageIDRequest.Context:type_name -> pb.UserContext
	17, // 12: pb.QueryUserUnreadMessageSummaryRequest.Context:type_name -> pb.UserContext
	14, // 13: pb.QueryUserUnreadMessageSummaryResponse.Task:type_name -> pb.UnreadTaskMessage
	15, // 14: pb.QueryUserUnreadMessageSummaryResponse.Record:type_name -> pb.UnreadRecordMessage
	0,  // 15: pb.Notice.SendSseMessage:input_type -> pb.SendSseMessageRequest
	2,  // 16: pb.Notice.TempRemoveMessage:input_type -> pb.TempRemoveMessageRequest
	3,  // 17: pb.Notice.SendSMSMessage:input_type -> pb.SendSMSMessageRequest
	4,  // 18: pb.Notice.RecentlyUpdate:input_type -> pb.RecentlyUpdateRequest
	7,  // 19: pb.Notice.TimeCollectTransToMeeting:input_type -> pb.TimeCollectTransToMeetingRequest
	8,  // 20: pb.Notice.QueryRecordUnreadMessages:input_type -> pb.QueryRecordUnreadMessagesRequest
	11, // 21: pb.Notice.UpdateUserPrevMessageID:input_type -> pb.UpdateUserPrevMessageIDRequest
	12, // 22: pb.Notice.QueryUserUnreadMessageSummary:input_type -> pb.QueryUserUnreadMessageSummaryRequest
	19, // 23: pb.Notice.SendSseMessage:output_type -> pb.Response
	19, // 24: pb.Notice.TempRemoveMessage:output_type -> pb.Response
	19, // 25: pb.Notice.SendSMSMessage:output_type -> pb.Response
	19, // 26: pb.Notice.RecentlyUpdate:output_type -> pb.Response
	19, // 27: pb.Notice.TimeCollectTransToMeeting:output_type -> pb.Response
	19, // 28: pb.Notice.QueryRecordUnreadMessages:output_type -> pb.Response
	19, // 29: pb.Notice.UpdateUserPrevMessageID:output_type -> pb.Response
	19, // 30: pb.Notice.QueryUserUnreadMessageSummary:output_type -> pb.Response
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_notice_proto_init() }
func file_notice_proto_init() {
	if File_notice_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_notice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSseMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempRemoveMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSMSMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyUpdateTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeCollectTransToMeetingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordUnreadMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecordUnreadMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPrevMessageIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserUnreadMessageSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserUnreadMessageSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadTaskMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notice_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadRecordMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notice_proto_goTypes,
		DependencyIndexes: file_notice_proto_depIdxs,
		MessageInfos:      file_notice_proto_msgTypes,
	}.Build()
	File_notice_proto = out.File
	file_notice_proto_rawDesc = nil
	file_notice_proto_goTypes = nil
	file_notice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NoticeClient interface {
	//  SendSseMessage 推送SSE消息
	SendSseMessage(ctx context.Context, in *SendSseMessageRequest, opts ...grpc.CallOption) (*Response, error)
	//  TempRemoveMessage 临时删除事项列表消息
	TempRemoveMessage(ctx context.Context, in *TempRemoveMessageRequest, opts ...grpc.CallOption) (*Response, error)
	//  SendSMSMessage 发送短信
	SendSMSMessage(ctx context.Context, in *SendSMSMessageRequest, opts ...grpc.CallOption) (*Response, error)
	// RecentlyUpdate 最近更新列表
	RecentlyUpdate(ctx context.Context, in *RecentlyUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	// TimeCollectTransToMeeting 时间征集转会议
	TimeCollectTransToMeeting(ctx context.Context, in *TimeCollectTransToMeetingRequest, opts ...grpc.CallOption) (*Response, error)
	// QueryRecordUnreadMessages 查询笔记未读消息数
	QueryRecordUnreadMessages(ctx context.Context, in *QueryRecordUnreadMessagesRequest, opts ...grpc.CallOption) (*Response, error)
	// UpdateUserPrevMessageID 更新用户上一条消息id
	UpdateUserPrevMessageID(ctx context.Context, in *UpdateUserPrevMessageIDRequest, opts ...grpc.CallOption) (*Response, error)
	// QueryUserUnreadMessageSummary 查询用户未读消息汇总
	QueryUserUnreadMessageSummary(ctx context.Context, in *QueryUserUnreadMessageSummaryRequest, opts ...grpc.CallOption) (*Response, error)
}

type noticeClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeClient(cc grpc.ClientConnInterface) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) SendSseMessage(ctx context.Context, in *SendSseMessageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/SendSseMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) TempRemoveMessage(ctx context.Context, in *TempRemoveMessageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/TempRemoveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) SendSMSMessage(ctx context.Context, in *SendSMSMessageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/SendSMSMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) RecentlyUpdate(ctx context.Context, in *RecentlyUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/RecentlyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) TimeCollectTransToMeeting(ctx context.Context, in *TimeCollectTransToMeetingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/TimeCollectTransToMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) QueryRecordUnreadMessages(ctx context.Context, in *QueryRecordUnreadMessagesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/QueryRecordUnreadMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) UpdateUserPrevMessageID(ctx context.Context, in *UpdateUserPrevMessageIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/UpdateUserPrevMessageID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) QueryUserUnreadMessageSummary(ctx context.Context, in *QueryUserUnreadMessageSummaryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Notice/QueryUserUnreadMessageSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoticeServer is the server API for Notice service.
type NoticeServer interface {
	//  SendSseMessage 推送SSE消息
	SendSseMessage(context.Context, *SendSseMessageRequest) (*Response, error)
	//  TempRemoveMessage 临时删除事项列表消息
	TempRemoveMessage(context.Context, *TempRemoveMessageRequest) (*Response, error)
	//  SendSMSMessage 发送短信
	SendSMSMessage(context.Context, *SendSMSMessageRequest) (*Response, error)
	// RecentlyUpdate 最近更新列表
	RecentlyUpdate(context.Context, *RecentlyUpdateRequest) (*Response, error)
	// TimeCollectTransToMeeting 时间征集转会议
	TimeCollectTransToMeeting(context.Context, *TimeCollectTransToMeetingRequest) (*Response, error)
	// QueryRecordUnreadMessages 查询笔记未读消息数
	QueryRecordUnreadMessages(context.Context, *QueryRecordUnreadMessagesRequest) (*Response, error)
	// UpdateUserPrevMessageID 更新用户上一条消息id
	UpdateUserPrevMessageID(context.Context, *UpdateUserPrevMessageIDRequest) (*Response, error)
	// QueryUserUnreadMessageSummary 查询用户未读消息汇总
	QueryUserUnreadMessageSummary(context.Context, *QueryUserUnreadMessageSummaryRequest) (*Response, error)
}

// UnimplementedNoticeServer can be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (*UnimplementedNoticeServer) SendSseMessage(context.Context, *SendSseMessageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSseMessage not implemented")
}
func (*UnimplementedNoticeServer) TempRemoveMessage(context.Context, *TempRemoveMessageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TempRemoveMessage not implemented")
}
func (*UnimplementedNoticeServer) SendSMSMessage(context.Context, *SendSMSMessageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMSMessage not implemented")
}
func (*UnimplementedNoticeServer) RecentlyUpdate(context.Context, *RecentlyUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentlyUpdate not implemented")
}
func (*UnimplementedNoticeServer) TimeCollectTransToMeeting(context.Context, *TimeCollectTransToMeetingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeCollectTransToMeeting not implemented")
}
func (*UnimplementedNoticeServer) QueryRecordUnreadMessages(context.Context, *QueryRecordUnreadMessagesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecordUnreadMessages not implemented")
}
func (*UnimplementedNoticeServer) UpdateUserPrevMessageID(context.Context, *UpdateUserPrevMessageIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPrevMessageID not implemented")
}
func (*UnimplementedNoticeServer) QueryUserUnreadMessageSummary(context.Context, *QueryUserUnreadMessageSummaryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserUnreadMessageSummary not implemented")
}

func RegisterNoticeServer(s *grpc.Server, srv NoticeServer) {
	s.RegisterService(&_Notice_serviceDesc, srv)
}

func _Notice_SendSseMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSseMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SendSseMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/SendSseMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SendSseMessage(ctx, req.(*SendSseMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_TempRemoveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempRemoveMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).TempRemoveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/TempRemoveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).TempRemoveMessage(ctx, req.(*TempRemoveMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_SendSMSMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SendSMSMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/SendSMSMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SendSMSMessage(ctx, req.(*SendSMSMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_RecentlyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentlyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).RecentlyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/RecentlyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).RecentlyUpdate(ctx, req.(*RecentlyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_TimeCollectTransToMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeCollectTransToMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).TimeCollectTransToMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/TimeCollectTransToMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).TimeCollectTransToMeeting(ctx, req.(*TimeCollectTransToMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_QueryRecordUnreadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordUnreadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).QueryRecordUnreadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/QueryRecordUnreadMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).QueryRecordUnreadMessages(ctx, req.(*QueryRecordUnreadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_UpdateUserPrevMessageID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPrevMessageIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).UpdateUserPrevMessageID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/UpdateUserPrevMessageID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).UpdateUserPrevMessageID(ctx, req.(*UpdateUserPrevMessageIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_QueryUserUnreadMessageSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserUnreadMessageSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).QueryUserUnreadMessageSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Notice/QueryUserUnreadMessageSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).QueryUserUnreadMessageSummary(ctx, req.(*QueryUserUnreadMessageSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSseMessage",
			Handler:    _Notice_SendSseMessage_Handler,
		},
		{
			MethodName: "TempRemoveMessage",
			Handler:    _Notice_TempRemoveMessage_Handler,
		},
		{
			MethodName: "SendSMSMessage",
			Handler:    _Notice_SendSMSMessage_Handler,
		},
		{
			MethodName: "RecentlyUpdate",
			Handler:    _Notice_RecentlyUpdate_Handler,
		},
		{
			MethodName: "TimeCollectTransToMeeting",
			Handler:    _Notice_TimeCollectTransToMeeting_Handler,
		},
		{
			MethodName: "QueryRecordUnreadMessages",
			Handler:    _Notice_QueryRecordUnreadMessages_Handler,
		},
		{
			MethodName: "UpdateUserPrevMessageID",
			Handler:    _Notice_UpdateUserPrevMessageID_Handler,
		},
		{
			MethodName: "QueryUserUnreadMessageSummary",
			Handler:    _Notice_QueryUserUnreadMessageSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice.proto",
}
