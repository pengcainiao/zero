// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: cronjob.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule        string            `protobuf:"bytes,1,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	Code            int32             `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	RefTaskID       string            `protobuf:"bytes,3,opt,name=RefTaskID,proto3" json:"RefTaskID,omitempty"`
	ExecuteMetadata map[string]string `protobuf:"bytes,4,rep,name=ExecuteMetadata,proto3" json:"ExecuteMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context         *UserContext      `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateCronJobRequest) Reset() {
	*x = CreateCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cronjob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronJobRequest) ProtoMessage() {}

func (x *CreateCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronJobRequest.ProtoReflect.Descriptor instead.
func (*CreateCronJobRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCronJobRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CreateCronJobRequest) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCronJobRequest) GetRefTaskID() string {
	if x != nil {
		return x.RefTaskID
	}
	return ""
}

func (x *CreateCronJobRequest) GetExecuteMetadata() map[string]string {
	if x != nil {
		return x.ExecuteMetadata
	}
	return nil
}

func (x *CreateCronJobRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CreateCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
}

func (x *CreateCronJobResponse) Reset() {
	*x = CreateCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cronjob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronJobResponse) ProtoMessage() {}

func (x *CreateCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronJobResponse.ProtoReflect.Descriptor instead.
func (*CreateCronJobResponse) Descriptor() ([]byte, []int) {
	return file_cronjob_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCronJobResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type DeleteCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"` //事项或记录ID
	Code     int32        `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`        //消息编码
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *DeleteCronJobRequest) Reset() {
	*x = DeleteCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cronjob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronJobRequest) ProtoMessage() {}

func (x *DeleteCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronJobRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteCronJobRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *DeleteCronJobRequest) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCronJobRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlyeleID string       `protobuf:"bytes,1,opt,name=FlyeleID,proto3" json:"FlyeleID,omitempty"` //事项或记录ID
	Code     int32        `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`        //消息编码
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetCronJobRequest) Reset() {
	*x = GetCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cronjob_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronJobRequest) ProtoMessage() {}

func (x *GetCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cronjob_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronJobRequest.ProtoReflect.Descriptor instead.
func (*GetCronJobRequest) Descriptor() ([]byte, []int) {
	return file_cronjob_proto_rawDescGZIP(), []int{3}
}

func (x *GetCronJobRequest) GetFlyeleID() string {
	if x != nil {
		return x.FlyeleID
	}
	return ""
}

func (x *GetCronJobRequest) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCronJobRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

var File_cronjob_proto protoreflect.FileDescriptor

var file_cronjob_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x42, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62,
	0x49, 0x44, 0x22, 0x71, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c,
	0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c,
	0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6c,
	0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6c,
	0x79, 0x65, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x32, 0xae, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cronjob_proto_rawDescOnce sync.Once
	file_cronjob_proto_rawDescData = file_cronjob_proto_rawDesc
)

func file_cronjob_proto_rawDescGZIP() []byte {
	file_cronjob_proto_rawDescOnce.Do(func() {
		file_cronjob_proto_rawDescData = protoimpl.X.CompressGZIP(file_cronjob_proto_rawDescData)
	})
	return file_cronjob_proto_rawDescData
}

var file_cronjob_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cronjob_proto_goTypes = []interface{}{
	(*CreateCronJobRequest)(nil),  // 0: pb.CreateCronJobRequest
	(*CreateCronJobResponse)(nil), // 1: pb.CreateCronJobResponse
	(*DeleteCronJobRequest)(nil),  // 2: pb.DeleteCronJobRequest
	(*GetCronJobRequest)(nil),     // 3: pb.GetCronJobRequest
	nil,                           // 4: pb.CreateCronJobRequest.ExecuteMetadataEntry
	(*UserContext)(nil),           // 5: pb.UserContext
	(*Response)(nil),              // 6: pb.Response
}
var file_cronjob_proto_depIdxs = []int32{
	4, // 0: pb.CreateCronJobRequest.ExecuteMetadata:type_name -> pb.CreateCronJobRequest.ExecuteMetadataEntry
	5, // 1: pb.CreateCronJobRequest.Context:type_name -> pb.UserContext
	5, // 2: pb.DeleteCronJobRequest.Context:type_name -> pb.UserContext
	5, // 3: pb.GetCronJobRequest.Context:type_name -> pb.UserContext
	0, // 4: pb.CronJob.CreateCronJob:input_type -> pb.CreateCronJobRequest
	2, // 5: pb.CronJob.DeleteCronJob:input_type -> pb.DeleteCronJobRequest
	3, // 6: pb.CronJob.GetCronJob:input_type -> pb.GetCronJobRequest
	6, // 7: pb.CronJob.CreateCronJob:output_type -> pb.Response
	6, // 8: pb.CronJob.DeleteCronJob:output_type -> pb.Response
	6, // 9: pb.CronJob.GetCronJob:output_type -> pb.Response
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cronjob_proto_init() }
func file_cronjob_proto_init() {
	if File_cronjob_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cronjob_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cronjob_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cronjob_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cronjob_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cronjob_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cronjob_proto_goTypes,
		DependencyIndexes: file_cronjob_proto_depIdxs,
		MessageInfos:      file_cronjob_proto_msgTypes,
	}.Build()
	File_cronjob_proto = out.File
	file_cronjob_proto_rawDesc = nil
	file_cronjob_proto_goTypes = nil
	file_cronjob_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CronJobClient is the client API for CronJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronJobClient interface {
	CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*Response, error)
	GetCronJob(ctx context.Context, in *GetCronJobRequest, opts ...grpc.CallOption) (*Response, error)
}

type cronJobClient struct {
	cc grpc.ClientConnInterface
}

func NewCronJobClient(cc grpc.ClientConnInterface) CronJobClient {
	return &cronJobClient{cc}
}

func (c *cronJobClient) CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CronJob/CreateCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CronJob/DeleteCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobClient) GetCronJob(ctx context.Context, in *GetCronJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CronJob/GetCronJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronJobServer is the server API for CronJob service.
type CronJobServer interface {
	CreateCronJob(context.Context, *CreateCronJobRequest) (*Response, error)
	DeleteCronJob(context.Context, *DeleteCronJobRequest) (*Response, error)
	GetCronJob(context.Context, *GetCronJobRequest) (*Response, error)
}

// UnimplementedCronJobServer can be embedded to have forward compatible implementations.
type UnimplementedCronJobServer struct {
}

func (*UnimplementedCronJobServer) CreateCronJob(context.Context, *CreateCronJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (*UnimplementedCronJobServer) DeleteCronJob(context.Context, *DeleteCronJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (*UnimplementedCronJobServer) GetCronJob(context.Context, *GetCronJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronJob not implemented")
}

func RegisterCronJobServer(s *grpc.Server, srv CronJobServer) {
	s.RegisterService(&_CronJob_serviceDesc, srv)
}

func _CronJob_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CronJob/CreateCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).CreateCronJob(ctx, req.(*CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CronJob/DeleteCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).DeleteCronJob(ctx, req.(*DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJob_GetCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServer).GetCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CronJob/GetCronJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServer).GetCronJob(ctx, req.(*GetCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronJob_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CronJob",
	HandlerType: (*CronJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronJob",
			Handler:    _CronJob_CreateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _CronJob_DeleteCronJob_Handler,
		},
		{
			MethodName: "GetCronJob",
			Handler:    _CronJob_GetCronJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cronjob.proto",
}
