// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: record.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string       `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"` // 笔记ID
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{0}
}

func (x *GetRecordRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *GetRecordRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID     string   `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"`         // 笔记ID
	RecordType   int32    `protobuf:"varint,2,opt,name=RecordType,proto3" json:"RecordType,omitempty"`    // 事项类型
	Title        string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`               // 笔记标题
	ShareState   int32    `protobuf:"varint,4,opt,name=ShareState,proto3" json:"ShareState,omitempty"`    // 分享状态
	CreatorID    string   `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`       // 创建人
	CreateAt     int64    `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`        // 创建时间
	RefTasks     []string `protobuf:"bytes,7,rep,name=RefTasks,proto3" json:"RefTasks,omitempty"`         // 关联的事项
	RemindUserId []string `protobuf:"bytes,8,rep,name=RemindUserId,proto3" json:"RemindUserId,omitempty"` // 艾特的用户ID
}

func (x *GetRecordResponse) Reset() {
	*x = GetRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordResponse) ProtoMessage() {}

func (x *GetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordResponse.ProtoReflect.Descriptor instead.
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecordResponse) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *GetRecordResponse) GetRecordType() int32 {
	if x != nil {
		return x.RecordType
	}
	return 0
}

func (x *GetRecordResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetRecordResponse) GetShareState() int32 {
	if x != nil {
		return x.ShareState
	}
	return 0
}

func (x *GetRecordResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetRecordResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetRecordResponse) GetRefTasks() []string {
	if x != nil {
		return x.RefTasks
	}
	return nil
}

func (x *GetRecordResponse) GetRemindUserId() []string {
	if x != nil {
		return x.RemindUserId
	}
	return nil
}

type GetRecordDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string       `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"` // 笔记ID，多个用逗号隔开
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetRecordDetailsRequest) Reset() {
	*x = GetRecordDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordDetailsRequest) ProtoMessage() {}

func (x *GetRecordDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetRecordDetailsRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecordDetailsRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *GetRecordDetailsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetRecordDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RecordDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"` // 笔记数据
}

func (x *GetRecordDetailsResponse) Reset() {
	*x = GetRecordDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordDetailsResponse) ProtoMessage() {}

func (x *GetRecordDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetRecordDetailsResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordDetailsResponse) GetData() []*RecordDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID   string `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"`      // 笔记id
	Title      string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`            // 笔记标题
	ShareState int32  `protobuf:"varint,3,opt,name=ShareState,proto3" json:"ShareState,omitempty"` // 分享状态
	CreatorID  string `protobuf:"bytes,4,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`    // 创建人
}

func (x *RecordDetail) Reset() {
	*x = RecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDetail) ProtoMessage() {}

func (x *RecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDetail.ProtoReflect.Descriptor instead.
func (*RecordDetail) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{4}
}

func (x *RecordDetail) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *RecordDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RecordDetail) GetShareState() int32 {
	if x != nil {
		return x.ShareState
	}
	return 0
}

func (x *RecordDetail) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

type GetRelationRecordTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefDispatchsID []string     `protobuf:"bytes,1,rep,name=RefDispatchsID,proto3" json:"RefDispatchsID,omitempty"` // 派发任务id
	Context        *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetRelationRecordTotalRequest) Reset() {
	*x = GetRelationRecordTotalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationRecordTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationRecordTotalRequest) ProtoMessage() {}

func (x *GetRelationRecordTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationRecordTotalRequest.ProtoReflect.Descriptor instead.
func (*GetRelationRecordTotalRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{5}
}

func (x *GetRelationRecordTotalRequest) GetRefDispatchsID() []string {
	if x != nil {
		return x.RefDispatchsID
	}
	return nil
}

func (x *GetRelationRecordTotalRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetRelationRecordTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*RelationDetail `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"` // map[ref_dispatch_id]Detail
}

func (x *GetRelationRecordTotalResponse) Reset() {
	*x = GetRelationRecordTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelationRecordTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelationRecordTotalResponse) ProtoMessage() {}

func (x *GetRelationRecordTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelationRecordTotalResponse.ProtoReflect.Descriptor instead.
func (*GetRelationRecordTotalResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{6}
}

func (x *GetRelationRecordTotalResponse) GetData() []*RelationDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

type RelationDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatchID  string `protobuf:"bytes,1,opt,name=DispatchID,proto3" json:"DispatchID,omitempty"`    // 派发任务id
	UserID      string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`            // 用户id
	Total       int64  `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`             // 关联笔记数量
	NoteTotal   int64  `protobuf:"varint,4,opt,name=NoteTotal,proto3" json:"NoteTotal,omitempty"`     // 其中笔记数量
	RecordTotal int64  `protobuf:"varint,5,opt,name=RecordTotal,proto3" json:"RecordTotal,omitempty"` // 其中记录数量
}

func (x *RelationDetail) Reset() {
	*x = RelationDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationDetail) ProtoMessage() {}

func (x *RelationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationDetail.ProtoReflect.Descriptor instead.
func (*RelationDetail) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{7}
}

func (x *RelationDetail) GetDispatchID() string {
	if x != nil {
		return x.DispatchID
	}
	return ""
}

func (x *RelationDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RelationDetail) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RelationDetail) GetNoteTotal() int64 {
	if x != nil {
		return x.NoteTotal
	}
	return 0
}

func (x *RelationDetail) GetRecordTotal() int64 {
	if x != nil {
		return x.RecordTotal
	}
	return 0
}

type GetRecordTakersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string       `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"` // 笔记id
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetRecordTakersRequest) Reset() {
	*x = GetRecordTakersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordTakersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordTakersRequest) ProtoMessage() {}

func (x *GetRecordTakersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordTakersRequest.ProtoReflect.Descriptor instead.
func (*GetRecordTakersRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{8}
}

func (x *GetRecordTakersRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *GetRecordTakersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetRecordTakersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakersID []string `protobuf:"bytes,1,rep,name=TakersID,proto3" json:"TakersID,omitempty"` // 笔记承接人用户ID列表
}

func (x *GetRecordTakersResponse) Reset() {
	*x = GetRecordTakersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordTakersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordTakersResponse) ProtoMessage() {}

func (x *GetRecordTakersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordTakersResponse.ProtoReflect.Descriptor instead.
func (*GetRecordTakersResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{9}
}

func (x *GetRecordTakersResponse) GetTakersID() []string {
	if x != nil {
		return x.TakersID
	}
	return nil
}

type RecordExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string       `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"` // 笔记id
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *RecordExistsRequest) Reset() {
	*x = RecordExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordExistsRequest) ProtoMessage() {}

func (x *RecordExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordExistsRequest.ProtoReflect.Descriptor instead.
func (*RecordExistsRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{10}
}

func (x *RecordExistsRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *RecordExistsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type RecordExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=Exists,proto3" json:"Exists,omitempty"` // 是否存在
}

func (x *RecordExistsResponse) Reset() {
	*x = RecordExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordExistsResponse) ProtoMessage() {}

func (x *RecordExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordExistsResponse.ProtoReflect.Descriptor instead.
func (*RecordExistsResponse) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{11}
}

func (x *RecordExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type BatchUnBindTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsClearedRecord int32        `protobuf:"varint,1,opt,name=IsClearedRecord,proto3" json:"IsClearedRecord,omitempty"` // 是否清空记录，0->转成笔记，1->清空记录
	RefDispatchID   string       `protobuf:"bytes,2,opt,name=RefDispatchID,proto3" json:"RefDispatchID,omitempty"`      // 派发任务id
	Context         *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchUnBindTaskRequest) Reset() {
	*x = BatchUnBindTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUnBindTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUnBindTaskRequest) ProtoMessage() {}

func (x *BatchUnBindTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUnBindTaskRequest.ProtoReflect.Descriptor instead.
func (*BatchUnBindTaskRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{12}
}

func (x *BatchUnBindTaskRequest) GetIsClearedRecord() int32 {
	if x != nil {
		return x.IsClearedRecord
	}
	return 0
}

func (x *BatchUnBindTaskRequest) GetRefDispatchID() string {
	if x != nil {
		return x.RefDispatchID
	}
	return ""
}

func (x *BatchUnBindTaskRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type IncrRecordCommentNumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordID string       `protobuf:"bytes,1,opt,name=RecordID,proto3" json:"RecordID,omitempty"` // 笔记id
	Num      int32        `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`          // 数量
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *IncrRecordCommentNumRequest) Reset() {
	*x = IncrRecordCommentNumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrRecordCommentNumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrRecordCommentNumRequest) ProtoMessage() {}

func (x *IncrRecordCommentNumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrRecordCommentNumRequest.ProtoReflect.Descriptor instead.
func (*IncrRecordCommentNumRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{13}
}

func (x *IncrRecordCommentNumRequest) GetRecordID() string {
	if x != nil {
		return x.RecordID
	}
	return ""
}

func (x *IncrRecordCommentNumRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *IncrRecordCommentNumRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GenerateRecordForNewUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`             // 用户id
	SenderUserID string       `protobuf:"bytes,2,opt,name=SenderUserID,proto3" json:"SenderUserID,omitempty"` // 发送者用户id (环境区分）
	Context      *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GenerateRecordForNewUsersRequest) Reset() {
	*x = GenerateRecordForNewUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_record_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRecordForNewUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRecordForNewUsersRequest) ProtoMessage() {}

func (x *GenerateRecordForNewUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_record_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRecordForNewUsersRequest.ProtoReflect.Descriptor instead.
func (*GenerateRecordForNewUsersRequest) Descriptor() ([]byte, []int) {
	return file_record_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateRecordForNewUsersRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GenerateRecordForNewUsersRequest) GetSenderUserID() string {
	if x != nil {
		return x.SenderUserID
	}
	return ""
}

func (x *GenerateRecordForNewUsersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

var File_record_proto protoreflect.FileDescriptor

var file_record_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xff,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x40, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x7e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x52,
	0x65, 0x66, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x48, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x35, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x13, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x49,
	0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x66, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x66, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x76, 0x0a, 0x1b, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x32, 0x8c, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x69, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x49, 0x6e,
	0x63, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_record_proto_rawDescOnce sync.Once
	file_record_proto_rawDescData = file_record_proto_rawDesc
)

func file_record_proto_rawDescGZIP() []byte {
	file_record_proto_rawDescOnce.Do(func() {
		file_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_record_proto_rawDescData)
	})
	return file_record_proto_rawDescData
}

var file_record_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_record_proto_goTypes = []interface{}{
	(*GetRecordRequest)(nil),                 // 0: pb.GetRecordRequest
	(*GetRecordResponse)(nil),                // 1: pb.GetRecordResponse
	(*GetRecordDetailsRequest)(nil),          // 2: pb.GetRecordDetailsRequest
	(*GetRecordDetailsResponse)(nil),         // 3: pb.GetRecordDetailsResponse
	(*RecordDetail)(nil),                     // 4: pb.RecordDetail
	(*GetRelationRecordTotalRequest)(nil),    // 5: pb.GetRelationRecordTotalRequest
	(*GetRelationRecordTotalResponse)(nil),   // 6: pb.GetRelationRecordTotalResponse
	(*RelationDetail)(nil),                   // 7: pb.RelationDetail
	(*GetRecordTakersRequest)(nil),           // 8: pb.GetRecordTakersRequest
	(*GetRecordTakersResponse)(nil),          // 9: pb.GetRecordTakersResponse
	(*RecordExistsRequest)(nil),              // 10: pb.RecordExistsRequest
	(*RecordExistsResponse)(nil),             // 11: pb.RecordExistsResponse
	(*BatchUnBindTaskRequest)(nil),           // 12: pb.BatchUnBindTaskRequest
	(*IncrRecordCommentNumRequest)(nil),      // 13: pb.IncrRecordCommentNumRequest
	(*GenerateRecordForNewUsersRequest)(nil), // 14: pb.GenerateRecordForNewUsersRequest
	(*UserContext)(nil),                      // 15: pb.UserContext
	(*Response)(nil),                         // 16: pb.Response
}
var file_record_proto_depIdxs = []int32{
	15, // 0: pb.GetRecordRequest.Context:type_name -> pb.UserContext
	15, // 1: pb.GetRecordDetailsRequest.Context:type_name -> pb.UserContext
	4,  // 2: pb.GetRecordDetailsResponse.Data:type_name -> pb.RecordDetail
	15, // 3: pb.GetRelationRecordTotalRequest.Context:type_name -> pb.UserContext
	7,  // 4: pb.GetRelationRecordTotalResponse.Data:type_name -> pb.RelationDetail
	15, // 5: pb.GetRecordTakersRequest.Context:type_name -> pb.UserContext
	15, // 6: pb.RecordExistsRequest.Context:type_name -> pb.UserContext
	15, // 7: pb.BatchUnBindTaskRequest.Context:type_name -> pb.UserContext
	15, // 8: pb.IncrRecordCommentNumRequest.Context:type_name -> pb.UserContext
	15, // 9: pb.GenerateRecordForNewUsersRequest.Context:type_name -> pb.UserContext
	0,  // 10: pb.Record.GetRecord:input_type -> pb.GetRecordRequest
	2,  // 11: pb.Record.GetRecordDetails:input_type -> pb.GetRecordDetailsRequest
	5,  // 12: pb.Record.GetRelationRecordTotal:input_type -> pb.GetRelationRecordTotalRequest
	8,  // 13: pb.Record.GetRecordTakers:input_type -> pb.GetRecordTakersRequest
	10, // 14: pb.Record.RecordExists:input_type -> pb.RecordExistsRequest
	12, // 15: pb.Record.BatchUnBindTask:input_type -> pb.BatchUnBindTaskRequest
	13, // 16: pb.Record.IncrRecordCommentNum:input_type -> pb.IncrRecordCommentNumRequest
	14, // 17: pb.Record.GenerateRecordForNewUsers:input_type -> pb.GenerateRecordForNewUsersRequest
	16, // 18: pb.Record.GetRecord:output_type -> pb.Response
	16, // 19: pb.Record.GetRecordDetails:output_type -> pb.Response
	16, // 20: pb.Record.GetRelationRecordTotal:output_type -> pb.Response
	16, // 21: pb.Record.GetRecordTakers:output_type -> pb.Response
	16, // 22: pb.Record.RecordExists:output_type -> pb.Response
	16, // 23: pb.Record.BatchUnBindTask:output_type -> pb.Response
	16, // 24: pb.Record.IncrRecordCommentNum:output_type -> pb.Response
	16, // 25: pb.Record.GenerateRecordForNewUsers:output_type -> pb.Response
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_record_proto_init() }
func file_record_proto_init() {
	if File_record_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationRecordTotalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelationRecordTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordTakersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordTakersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUnBindTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrRecordCommentNumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_record_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRecordForNewUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_record_proto_goTypes,
		DependencyIndexes: file_record_proto_depIdxs,
		MessageInfos:      file_record_proto_msgTypes,
	}.Build()
	File_record_proto = out.File
	file_record_proto_rawDesc = nil
	file_record_proto_goTypes = nil
	file_record_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordClient is the client API for Record service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordClient interface {
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Response, error)
	GetRecordDetails(ctx context.Context, in *GetRecordDetailsRequest, opts ...grpc.CallOption) (*Response, error)
	GetRelationRecordTotal(ctx context.Context, in *GetRelationRecordTotalRequest, opts ...grpc.CallOption) (*Response, error)
	GetRecordTakers(ctx context.Context, in *GetRecordTakersRequest, opts ...grpc.CallOption) (*Response, error)
	RecordExists(ctx context.Context, in *RecordExistsRequest, opts ...grpc.CallOption) (*Response, error)
	BatchUnBindTask(ctx context.Context, in *BatchUnBindTaskRequest, opts ...grpc.CallOption) (*Response, error)
	IncrRecordCommentNum(ctx context.Context, in *IncrRecordCommentNumRequest, opts ...grpc.CallOption) (*Response, error)
	GenerateRecordForNewUsers(ctx context.Context, in *GenerateRecordForNewUsersRequest, opts ...grpc.CallOption) (*Response, error)
}

type recordClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordClient(cc grpc.ClientConnInterface) RecordClient {
	return &recordClient{cc}
}

func (c *recordClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecordDetails(ctx context.Context, in *GetRecordDetailsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/GetRecordDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRelationRecordTotal(ctx context.Context, in *GetRelationRecordTotalRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/GetRelationRecordTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecordTakers(ctx context.Context, in *GetRecordTakersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/GetRecordTakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) RecordExists(ctx context.Context, in *RecordExistsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/RecordExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) BatchUnBindTask(ctx context.Context, in *BatchUnBindTaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/BatchUnBindTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) IncrRecordCommentNum(ctx context.Context, in *IncrRecordCommentNumRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/IncrRecordCommentNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GenerateRecordForNewUsers(ctx context.Context, in *GenerateRecordForNewUsersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Record/GenerateRecordForNewUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServer is the server API for Record service.
type RecordServer interface {
	GetRecord(context.Context, *GetRecordRequest) (*Response, error)
	GetRecordDetails(context.Context, *GetRecordDetailsRequest) (*Response, error)
	GetRelationRecordTotal(context.Context, *GetRelationRecordTotalRequest) (*Response, error)
	GetRecordTakers(context.Context, *GetRecordTakersRequest) (*Response, error)
	RecordExists(context.Context, *RecordExistsRequest) (*Response, error)
	BatchUnBindTask(context.Context, *BatchUnBindTaskRequest) (*Response, error)
	IncrRecordCommentNum(context.Context, *IncrRecordCommentNumRequest) (*Response, error)
	GenerateRecordForNewUsers(context.Context, *GenerateRecordForNewUsersRequest) (*Response, error)
}

// UnimplementedRecordServer can be embedded to have forward compatible implementations.
type UnimplementedRecordServer struct {
}

func (*UnimplementedRecordServer) GetRecord(context.Context, *GetRecordRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedRecordServer) GetRecordDetails(context.Context, *GetRecordDetailsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordDetails not implemented")
}
func (*UnimplementedRecordServer) GetRelationRecordTotal(context.Context, *GetRelationRecordTotalRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationRecordTotal not implemented")
}
func (*UnimplementedRecordServer) GetRecordTakers(context.Context, *GetRecordTakersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordTakers not implemented")
}
func (*UnimplementedRecordServer) RecordExists(context.Context, *RecordExistsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordExists not implemented")
}
func (*UnimplementedRecordServer) BatchUnBindTask(context.Context, *BatchUnBindTaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUnBindTask not implemented")
}
func (*UnimplementedRecordServer) IncrRecordCommentNum(context.Context, *IncrRecordCommentNumRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrRecordCommentNum not implemented")
}
func (*UnimplementedRecordServer) GenerateRecordForNewUsers(context.Context, *GenerateRecordForNewUsersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRecordForNewUsers not implemented")
}

func RegisterRecordServer(s *grpc.Server, srv RecordServer) {
	s.RegisterService(&_Record_serviceDesc, srv)
}

func _Record_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecordDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/GetRecordDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordDetails(ctx, req.(*GetRecordDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRelationRecordTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationRecordTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRelationRecordTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/GetRelationRecordTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRelationRecordTotal(ctx, req.(*GetRelationRecordTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecordTakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordTakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordTakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/GetRecordTakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordTakers(ctx, req.(*GetRecordTakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_RecordExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).RecordExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/RecordExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).RecordExists(ctx, req.(*RecordExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_BatchUnBindTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUnBindTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).BatchUnBindTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/BatchUnBindTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).BatchUnBindTask(ctx, req.(*BatchUnBindTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_IncrRecordCommentNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrRecordCommentNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).IncrRecordCommentNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/IncrRecordCommentNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).IncrRecordCommentNum(ctx, req.(*IncrRecordCommentNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GenerateRecordForNewUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRecordForNewUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GenerateRecordForNewUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Record/GenerateRecordForNewUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GenerateRecordForNewUsers(ctx, req.(*GenerateRecordForNewUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Record_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Record",
	HandlerType: (*RecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _Record_GetRecord_Handler,
		},
		{
			MethodName: "GetRecordDetails",
			Handler:    _Record_GetRecordDetails_Handler,
		},
		{
			MethodName: "GetRelationRecordTotal",
			Handler:    _Record_GetRelationRecordTotal_Handler,
		},
		{
			MethodName: "GetRecordTakers",
			Handler:    _Record_GetRecordTakers_Handler,
		},
		{
			MethodName: "RecordExists",
			Handler:    _Record_RecordExists_Handler,
		},
		{
			MethodName: "BatchUnBindTask",
			Handler:    _Record_BatchUnBindTask_Handler,
		},
		{
			MethodName: "IncrRecordCommentNum",
			Handler:    _Record_IncrRecordCommentNum_Handler,
		},
		{
			MethodName: "GenerateRecordForNewUsers",
			Handler:    _Record_GenerateRecordForNewUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
