syntax = "proto3";
package pb ;
option go_package = ".;pb";

import "protos/grpc_base.proto";

message BatchQueryUsersRequest{
  repeated string UserID = 1 ;//要查询的用户ID列表
  string LoginUid = 2;//当前已登录用户ID
  UserContext Context = 3;
}

message BatchQueryUsersResponse{
  repeated SimpleUserInfo Response = 1 ;
}



message SimpleUserInfo{
  string Avatar = 1 ;
  string NickName = 2 ;
  string Sex = 3;
  string UserID = 4 ;
  string OriginalName = 5 ;
  string Pinyin = 6 ;
  string Telephone = 7;
  int64 CreateAt = 8;
  int64 UserType = 10;
  Member Member = 9;
}

message GetUserSettingsRequest{
  string UserID = 1 ;
  UserContext Context = 2;
}

message GetUserSettingsResponse{
  string UserID = 1 ;
  map<string, string> Data = 2 ;
}

message BatchGetUserSettingsRequest{
  repeated string UserID = 1 ;
  UserContext Context = 2;
}

message BatchGetUserSettingsResponse{
  repeated GetUserSettingsResponse Response = 1 ;
}

message TryGrantAccessTokenRequest{
  string UnionID = 1;
  UserContext Context = 2;
}

message TryGrantAccessTokenResponse{
  string UserID = 1;
  string Token = 2 ;
}

message SetUserSettingsRequest{
  string UserID = 1;
  map<string, string> Data = 2;
  //  UserContext Context = 3;
}

message CreateUserByOfficialAccountRequest{
  string NickName = 1;
  string OpenID = 2;
  int32 Sex = 3;
  string City = 4;
  string Province = 5;
  string Avatar = 6;
  string UnionID = 7;
  string SubscribeScene = 8;
  string Wxid = 9;
  string Country = 10;
  string ChannelSource =11;
  UserContext Context = 12;
}

message CreateUserByOfficialAccountResponse{
  string UserID = 1;
}

message UpdateUserRequest{
  string UnionID = 1;
  bool Subscribed = 2;
  string OfficialOpenID = 3;
  string UserID = 4;
  string WXID = 5;
  UserContext Context = 6;
}

message WhoShouldSendScheduleRemindSMSRequest{
  string UserID = 1 ;
  UserContext Context = 2;
}

message WhoShouldSendScheduleRemindSMSResponse{
  bool CanSend = 1 ;
  string PhoneNumber = 2 ;
}

message  GetUserDeviceIDRequest{
  repeated string UserID = 1 ;
  UserContext Context = 2;
}
message GetUserDeviceIDResponse{
  map<string, string> Data = 1 ;
}

message SetUserLoginStateRequest{
  string UserID = 1;
  string DeviceID = 2;  // 设备ID
  string Platform = 3;
  int32 Online = 4; //用户上线下线
  UserContext Context = 5;
}

message RecentlyLoginAppOrDesktopRequest{
  string UserID = 1 ;
  int32 DefineRecently = 2 ;
  map<string, string> Parameters = 3 ;
  UserContext Context = 4;
}

message RecentlyLoginAppOrDesktopResponse{
  string PhoneNumber = 1 ;
  map<string, string> Extra = 2 ;
}

message GetUserPhoneNumberRequest{
  repeated string UsersID = 1 ;
  UserContext Context = 2;
}

message GetUserPhoneNumberResponse{
  repeated SimpleUserInfo Response = 1 ;
}

message GetUserOnlineStateRequest{
  repeated string UsersID = 1 ;
  UserContext Context = 2;
}

message GetUserOnlineStateResponse{
  map<string, string> Data = 1;
}

message UserAccountInfoRequest {
  string UserID = 1 ;
  string Account = 2 ;
  string AccountProvider = 3; // 账号提供者，1: wechat-openid，2: phone
  string OfficialOpenID = 4;
  string UnionID = 5;
  bool GetSubscribed = 6; // 是否查询订阅
  //  UserContext Context = 7;
}

message UserAccountInfoResponse {
  string UserID = 1 ;
  string Account = 2 ;
  string AccountProvider = 3; // 账号提供者，1: wechat-openid，2: phone
  string OfficialOpenID = 4;
  string UnionID = 5;
  int32 Subscribed = 6; // 是否订阅
}

message BatchGetUserAccountRequest {
  repeated UserAccountInfoRequest UserAccountInfoRequests = 1;
  UserContext Context = 2;
}

message BatchGetUserAccountResponse {
  repeated UserAccountInfoResponse UserAccountInfoResponses = 1;
}

message BatchSetUserSettingsRequest{
  repeated SetUserSettingsRequest Settings = 1;
  UserContext Context = 2;
}


message UserInfo{
  string Avatar = 1 ;
  string NickName = 2 ;
  string Sex = 3;
  string UserID = 4 ;
  string Telephone = 5;
  int64 CreateAt = 6;
  int32 VipLevel = 7;
  int32 Status = 8;
  int32 IsPreProd = 9;
  int32 Blacklist = 10;
  int64 Referrer = 11;
  int32 UserType = 12;
  string Pinyin = 13;
  string OriginalName = 14;
}

message GetUserListPageRequest {
  string UserID = 1;
  string NickName = 2 ;
  string Telephone = 3;
  Paging Paging = 4;
  UserContext Context = 5;
}

message GetUserListPageResponse {
  int64 Total = 1;
  repeated UserInfo Users = 2;   // 列表数据
}


message UserOfflineRequest {
  string UserID = 1;
  string Platform = 2 ;
  UserContext Context = 3;
}
message GetUsersOnlineClientRequest{
  repeated string UserID = 1 ;
  UserContext Context = 2;
}

message GetUsersOnlineClientResponse{
  repeated GetUserSettingsResponse Response = 1 ;
}

message GetUsersWechatFilterConditionRequest{
  repeated string UserID = 1 ;
  UserContext Context = 2;
}

message GetUsersWechatFilterConditionResponse{
  map<string, int64> Data = 1 ;
}

message CheckUserOperateAuthRequest{
  map<string, string > Resource = 1;
  int32 OperateType = 2;
  UserContext Context = 3;
}

message CheckUserOperateAuthResponse{
  bool IsAuth = 1;
}

message HelloRpcBalanceRequest{
  UserContext Context = 1;
}

message CreateComboBindRequest {
  string ObjID = 1;
  int32 ObjType = 2;
  int32 ComboType = 3;
  int32 ComboVersion = 4;
  UserContext Context = 5;
}

message CreateComboBindResponse {
  string BindID = 1;
  int32 ComboID = 2;
}

message CheckUserIsMemberRequest {
  string UserID = 1;
  UserContext Context = 2;
}

message CheckUserIsMemberResponse {
  bool IsMember = 1;
}

message GetTaskEquityRequest {
  int64 ComboType = 1;
  int64 ComboVersion = 2;
  UserContext Context = 3;
}

message GetTaskEquityResponse {
  int64 TaskTakersNum = 1;
  int64 ChildTasksNum = 2;
  int64 CustomRemindTime = 3;
}

message GetEquityByMemberRequest {
  string UserID = 1;
  UserContext Context = 2;
}

message GetEquityByMemberResponse {
  int64 SelfProjectNum = 1;
  int64 CustomViewNum = 2;
  bool MonthView = 3;
  bool BatchExport = 4;
  int64 TagTasksNum = 5;
  bool CreateContextDiagram = 6;
}


message GetUserNickNameRequest {
  string UserID = 1;
  UserContext Context = 2;
}


message GetUserNickNameResponse {
  string NickName = 1;
}

message GetCorpUserLoginTokenRequest {
  string Account = 1;
  string CorpID = 2;
  string CorpUserID = 3;
  string NickName = 4;
  string Avatar = 5;
  UserContext Context = 6;
}

message GetCorpUserLoginTokenResponse {
  string Token = 1;
  string UserID = 2;
  string Phone = 3;
  string NickName = 4;
  string Avatar = 5;
  UserInfo Info = 6;
}

message UpdateUserInfoRequest {
  string NickName = 1;
  string Avatar = 2;
  string Telephone = 3;
  int32 Sex = 4;
  int32 Status = 5;
  string UserID = 6;
  bool IsRefreshToken = 7;
  UserContext Context = 8;
}

message UpdateUserInfoResponse {
  int64 Code = 1;
  string Token = 2;
}

message BatchQueryIsOpenRemindRequest {
  repeated string UserIDs = 1;
  UserContext Context = 8;
}

message BatchQueryIsOpenRemindResponse {
  map<string, bool > RemindMap = 1;
}

message BatchQueryUserMemberRequest {
  repeated string UserIDs = 1;
  UserContext Context = 2;
}

message Member {
  string UserID = 1;
  int64 EndTime = 2;
  int32 State = 3;
  int64 NextEndTime = 4;
  string CorpID = 5;
  string CorpName = 6;
  int32 CuStatus = 7;
  int32 IsVisible = 8;
}

message BatchQueryUserMemberResponse {
  map<string, int32> UserState = 1;
  repeated Member Members = 2;
}

message AddMemberByGoodsRequest {
  repeated string UserIDs = 1;
  int32 GoodsID = 2;
  UserContext Context = 3;
  string OrderID = 4;
  string CreatorID =5;
  int32 SendVipType = 6;
  int64 DayNum = 7;
}

message AddMemberByGoodsResponse {
  repeated string FailUserID = 1;
}

message UserInteracts {
  string UserID = 1;
  string Remark = 2;
  string Pinyin = 3;
  string InteractID = 4;
}

message BatchQueryUserInteractionRequest {
  repeated string UserIDs = 1;
  int32 IsInteract = 2;
  UserContext Context = 3;
}

message BatchQueryUserInteractionResponse {
  repeated UserInteracts Interacts = 1;
}

message BatchGetUserSettingByKeyRequest {
  repeated string UserID = 1;
  string SettingKey = 2;
  UserContext Context = 3;
}

message BatchGetUserSettingByKeyResponse {
  map<string , string> Values = 1;
}

message BatchGetUserInfoByTelephoneRequest {
  repeated string Telephone = 1;
  UserContext Context = 2;
}

message BatchGetUserInfoByTelephoneResponse {
  repeated SimpleUserInfo Response = 1 ;
}

message BatchQueryMemberByPlaceOrderRequest {
  repeated string UserID = 1;
  int32 VipType = 2;
  UserContext Context = 3;
}

message BatchQueryMemberByPlaceOrderResponse {
  map<string, int64> MemberEndTime = 1;
}


service UserCenter{
  rpc HelloRpcBalance(HelloRpcBalanceRequest) returns(Response) ;

  rpc BatchGetUserSettings(BatchGetUserSettingsRequest) returns(Response) ;
  //BatchQueryUsers 批量查询用户信息
  rpc BatchQueryUsers(BatchQueryUsersRequest) returns(Response);
  //TryGrantAccessToken 尝试换取用户token
  rpc TryGrantAccessToken(TryGrantAccessTokenRequest) returns(Response) ;
  //GetUserSettings 获取用户设置数据
  rpc GetUserSettings(GetUserSettingsRequest) returns(Response) ;
  //CreateUserByOfficialAccount 通过公众号创建用户
  rpc CreateUserByOfficialAccount(CreateUserByOfficialAccountRequest) returns(Response) ;
  //UpdateUser 更新用户
  rpc UpdateUser(UpdateUserRequest) returns(Response) ;
  //WhoShouldSendScheduleRemindSMS 查询哪些用户应该发送日报提醒短信
  rpc WhoShouldSendScheduleRemindSMS(WhoShouldSendScheduleRemindSMSRequest) returns(Response) ;
  // RecentlyLoginAppOrDesktop 最近是否有登录过APP或PC端
  rpc RecentlyLoginAppOrDesktop(RecentlyLoginAppOrDesktopRequest) returns(Response) ;
  // GetUserDeviceID 获取用户的设备信息
  rpc GetUserDeviceID(GetUserDeviceIDRequest) returns(Response);
  // SetUserLoginState 更新用户登录数据状态
  rpc SetUserLoginState(SetUserLoginStateRequest)  returns(Response);
  //  GetUserPhoneNumber 获取用户的手机号
  rpc GetUserPhoneNumber(GetUserPhoneNumberRequest)returns(Response);
  // GetUserOnlineState 获取用户在线状态
  rpc GetUserOnlineState(GetUserOnlineStateRequest)returns(Response);
  // BatchSetUserSettings 批量设置用户设置项
  rpc BatchSetUserSettings(BatchSetUserSettingsRequest) returns(Response);
  // BatchGetUserAccount 批量获取用户数据
  rpc BatchGetUserAccount(BatchGetUserAccountRequest)returns (Response) ;
  // GetUserListPage 分页查询用户列表
  rpc GetUserListPage(GetUserListPageRequest)returns (Response) ;
  // UserOffline 重置用户状态（清理token）
  rpc UserOffline(UserOfflineRequest)returns (Response) ;
  // GetUsersOnlineClient 获取用户在线客户端信息
  rpc GetUsersOnlineClient(GetUsersOnlineClientRequest)returns (Response) ;
  // UserOffline 获取用户在线客户端信息
  rpc GetUsersWechatFilterCondition(GetUsersWechatFilterConditionRequest)returns (Response) ;

  //SetUserSettings 设置用户设置项
  //  rpc SetUserSettings(SetUserSettingsRequest) returns(Response) ;
  // 检查用户操作权限
  rpc CheckUserOperateAuth(CheckUserOperateAuthRequest) returns (Response);
  // 创建套餐绑定对象
  rpc CreateComboBind(CreateComboBindRequest) returns (Response);
  // 检查用户是否为会员
  rpc CheckUserIsMember(CheckUserIsMemberRequest) returns (Response);
  // 查询事项相关权益
  rpc GetTaskEquity(GetTaskEquityRequest) returns (Response);
  // 查询会员权益
  rpc GetEquityByMember(GetEquityByMemberRequest) returns (Response);
  // 查询会员权益
  rpc GetUserNickName(GetUserNickNameRequest) returns (Response);
  // 获取企微用户登陆token
  rpc GetCorpUserLoginToken(GetCorpUserLoginTokenRequest) returns (Response);
  // 更新用户信息
  rpc UpdateUserInfo(UpdateUserInfoRequest) returns (Response);
  // 批量查询用户是否开启提醒（公众号是否关注，是否绑定小姐姐，是否开启系统提醒）
  rpc BatchQueryIsOpenRemind(BatchQueryIsOpenRemindRequest) returns (Response);
  // 批量查询用户会员
  rpc BatchQueryUserMember(BatchQueryUserMemberRequest) returns (Response);
  // 根据商品开通会员
  rpc AddMemberByGoods(AddMemberByGoodsRequest) returns (Response);
  // 批量查询用户协作人信息
  rpc BatchQueryUserInteraction(BatchQueryUserInteractionRequest) returns (Response);
  // 批量查询用户指定设置项的设置值
  rpc BatchGetUserSettingByKey(BatchGetUserSettingByKeyRequest) returns (Response);
  // 批量查询用户通过用户手机号信息
  rpc BatchGetUserInfoByTelephone(BatchGetUserInfoByTelephoneRequest) returns (Response);
  // 批量查询会员下单前后信息
  rpc BatchQueryMemberByPlaceOrder(BatchQueryMemberByPlaceOrderRequest) returns (Response);
}
