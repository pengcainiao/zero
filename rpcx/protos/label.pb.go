// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: label.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLabelBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectID string       `protobuf:"bytes,1,opt,name=ObjectID,proto3" json:"ObjectID,omitempty"`
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetLabelBindRequest) Reset() {
	*x = GetLabelBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelBindRequest) ProtoMessage() {}

func (x *GetLabelBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelBindRequest.ProtoReflect.Descriptor instead.
func (*GetLabelBindRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{0}
}

func (x *GetLabelBindRequest) GetObjectID() string {
	if x != nil {
		return x.ObjectID
	}
	return ""
}

func (x *GetLabelBindRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type TagBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TagID    string `protobuf:"bytes,2,opt,name=TagID,proto3" json:"TagID,omitempty"`
	UserID   string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ObjectID string `protobuf:"bytes,4,opt,name=ObjectID,proto3" json:"ObjectID,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Color    string `protobuf:"bytes,6,opt,name=Color,proto3" json:"Color,omitempty"`
}

func (x *TagBindResp) Reset() {
	*x = TagBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagBindResp) ProtoMessage() {}

func (x *TagBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagBindResp.ProtoReflect.Descriptor instead.
func (*TagBindResp) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{1}
}

func (x *TagBindResp) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TagBindResp) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *TagBindResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TagBindResp) GetObjectID() string {
	if x != nil {
		return x.ObjectID
	}
	return ""
}

func (x *TagBindResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TagBindResp) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type GetLabelBindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagBinds []*TagBindResp `protobuf:"bytes,1,rep,name=TagBinds,proto3" json:"TagBinds,omitempty"`
}

func (x *GetLabelBindResponse) Reset() {
	*x = GetLabelBindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelBindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelBindResponse) ProtoMessage() {}

func (x *GetLabelBindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelBindResponse.ProtoReflect.Descriptor instead.
func (*GetLabelBindResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{2}
}

func (x *GetLabelBindResponse) GetTagBinds() []*TagBindResp {
	if x != nil {
		return x.TagBinds
	}
	return nil
}

type GetUserBindTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	TagID   string       `protobuf:"bytes,2,opt,name=TagID,proto3" json:"TagID,omitempty"`
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserBindTagRequest) Reset() {
	*x = GetUserBindTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBindTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBindTagRequest) ProtoMessage() {}

func (x *GetUserBindTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBindTagRequest.ProtoReflect.Descriptor instead.
func (*GetUserBindTagRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserBindTagRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserBindTagRequest) GetTagID() string {
	if x != nil {
		return x.TagID
	}
	return ""
}

func (x *GetUserBindTagRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserBindTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagBinds []*TagBindResp `protobuf:"bytes,1,rep,name=TagBinds,proto3" json:"TagBinds,omitempty"`
}

func (x *GetUserBindTagResponse) Reset() {
	*x = GetUserBindTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBindTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBindTagResponse) ProtoMessage() {}

func (x *GetUserBindTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBindTagResponse.ProtoReflect.Descriptor instead.
func (*GetUserBindTagResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserBindTagResponse) GetTagBinds() []*TagBindResp {
	if x != nil {
		return x.TagBinds
	}
	return nil
}

type GetViewBindNumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetViewBindNumRequest) Reset() {
	*x = GetViewBindNumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewBindNumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewBindNumRequest) ProtoMessage() {}

func (x *GetViewBindNumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewBindNumRequest.ProtoReflect.Descriptor instead.
func (*GetViewBindNumRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{5}
}

func (x *GetViewBindNumRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetViewBindNumRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetViewBindNumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (x *GetViewBindNumResponse) Reset() {
	*x = GetViewBindNumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewBindNumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewBindNumResponse) ProtoMessage() {}

func (x *GetViewBindNumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewBindNumResponse.ProtoReflect.Descriptor instead.
func (*GetViewBindNumResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{6}
}

func (x *GetViewBindNumResponse) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GetLabelByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelID string       `protobuf:"bytes,1,opt,name=LabelID,proto3" json:"LabelID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetLabelByIDRequest) Reset() {
	*x = GetLabelByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelByIDRequest) ProtoMessage() {}

func (x *GetLabelByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelByIDRequest.ProtoReflect.Descriptor instead.
func (*GetLabelByIDRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{7}
}

func (x *GetLabelByIDRequest) GetLabelID() string {
	if x != nil {
		return x.LabelID
	}
	return ""
}

func (x *GetLabelByIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetLabelByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	CreatorID string `protobuf:"bytes,3,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	Color     string `protobuf:"bytes,4,opt,name=Color,proto3" json:"Color,omitempty"`
	Type      int32  `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	State     int32  `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`
	CreateAt  int64  `protobuf:"varint,7,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt  int64  `protobuf:"varint,8,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
}

func (x *GetLabelByIDResponse) Reset() {
	*x = GetLabelByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLabelByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLabelByIDResponse) ProtoMessage() {}

func (x *GetLabelByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLabelByIDResponse.ProtoReflect.Descriptor instead.
func (*GetLabelByIDResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{8}
}

func (x *GetLabelByIDResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetLabelByIDResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetLabelByIDResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetLabelByIDResponse) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *GetLabelByIDResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetLabelByIDResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetLabelByIDResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetLabelByIDResponse) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type BatchGetLabelByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelsID []string     `protobuf:"bytes,1,rep,name=LabelsID,proto3" json:"LabelsID,omitempty"`
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetLabelByIDRequest) Reset() {
	*x = BatchGetLabelByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetLabelByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetLabelByIDRequest) ProtoMessage() {}

func (x *BatchGetLabelByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetLabelByIDRequest.ProtoReflect.Descriptor instead.
func (*BatchGetLabelByIDRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{9}
}

func (x *BatchGetLabelByIDRequest) GetLabelsID() []string {
	if x != nil {
		return x.LabelsID
	}
	return nil
}

func (x *BatchGetLabelByIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetLabelByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*GetLabelByIDResponse `protobuf:"bytes,1,rep,name=Labels,proto3" json:"Labels,omitempty"`
}

func (x *BatchGetLabelByIDResponse) Reset() {
	*x = BatchGetLabelByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetLabelByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetLabelByIDResponse) ProtoMessage() {}

func (x *BatchGetLabelByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetLabelByIDResponse.ProtoReflect.Descriptor instead.
func (*BatchGetLabelByIDResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{10}
}

func (x *BatchGetLabelByIDResponse) GetLabels() []*GetLabelByIDResponse {
	if x != nil {
		return x.Labels
	}
	return nil
}

type BatchGetTagBindsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	ObjID   string       `protobuf:"bytes,2,opt,name=ObjID,proto3" json:"ObjID,omitempty"`
}

func (x *BatchGetTagBindsRequest) Reset() {
	*x = BatchGetTagBindsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTagBindsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTagBindsRequest) ProtoMessage() {}

func (x *BatchGetTagBindsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTagBindsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTagBindsRequest) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{11}
}

func (x *BatchGetTagBindsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *BatchGetTagBindsRequest) GetObjID() string {
	if x != nil {
		return x.ObjID
	}
	return ""
}

type BatchGetTagBindsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*TagBindResp `protobuf:"bytes,1,rep,name=Labels,proto3" json:"Labels,omitempty"`
}

func (x *BatchGetTagBindsResponse) Reset() {
	*x = BatchGetTagBindsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_label_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetTagBindsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTagBindsResponse) ProtoMessage() {}

func (x *BatchGetTagBindsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_label_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTagBindsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTagBindsResponse) Descriptor() ([]byte, []int) {
	return file_label_proto_rawDescGZIP(), []int{12}
}

func (x *BatchGetTagBindsResponse) GetLabels() []*TagBindResp {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_label_proto protoreflect.FileDescriptor

var file_label_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08,
	0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x08, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61,
	0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x45, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e,
	0x64, 0x73, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x69, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2a,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4e, 0x75, 0x6d, 0x22, 0x5a, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x61, 0x0a, 0x18, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4d, 0x0a, 0x19,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x17, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0xeb, 0x02, 0x0a,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x12,
	0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67,
	0x42, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_label_proto_rawDescOnce sync.Once
	file_label_proto_rawDescData = file_label_proto_rawDesc
)

func file_label_proto_rawDescGZIP() []byte {
	file_label_proto_rawDescOnce.Do(func() {
		file_label_proto_rawDescData = protoimpl.X.CompressGZIP(file_label_proto_rawDescData)
	})
	return file_label_proto_rawDescData
}

var file_label_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_label_proto_goTypes = []interface{}{
	(*GetLabelBindRequest)(nil),       // 0: pb.GetLabelBindRequest
	(*TagBindResp)(nil),               // 1: pb.TagBindResp
	(*GetLabelBindResponse)(nil),      // 2: pb.GetLabelBindResponse
	(*GetUserBindTagRequest)(nil),     // 3: pb.GetUserBindTagRequest
	(*GetUserBindTagResponse)(nil),    // 4: pb.GetUserBindTagResponse
	(*GetViewBindNumRequest)(nil),     // 5: pb.GetViewBindNumRequest
	(*GetViewBindNumResponse)(nil),    // 6: pb.GetViewBindNumResponse
	(*GetLabelByIDRequest)(nil),       // 7: pb.GetLabelByIDRequest
	(*GetLabelByIDResponse)(nil),      // 8: pb.GetLabelByIDResponse
	(*BatchGetLabelByIDRequest)(nil),  // 9: pb.BatchGetLabelByIDRequest
	(*BatchGetLabelByIDResponse)(nil), // 10: pb.BatchGetLabelByIDResponse
	(*BatchGetTagBindsRequest)(nil),   // 11: pb.BatchGetTagBindsRequest
	(*BatchGetTagBindsResponse)(nil),  // 12: pb.BatchGetTagBindsResponse
	(*UserContext)(nil),               // 13: pb.UserContext
	(*Response)(nil),                  // 14: pb.Response
}
var file_label_proto_depIdxs = []int32{
	13, // 0: pb.GetLabelBindRequest.Context:type_name -> pb.UserContext
	1,  // 1: pb.GetLabelBindResponse.TagBinds:type_name -> pb.TagBindResp
	13, // 2: pb.GetUserBindTagRequest.Context:type_name -> pb.UserContext
	1,  // 3: pb.GetUserBindTagResponse.TagBinds:type_name -> pb.TagBindResp
	13, // 4: pb.GetViewBindNumRequest.Context:type_name -> pb.UserContext
	13, // 5: pb.GetLabelByIDRequest.Context:type_name -> pb.UserContext
	13, // 6: pb.BatchGetLabelByIDRequest.Context:type_name -> pb.UserContext
	8,  // 7: pb.BatchGetLabelByIDResponse.Labels:type_name -> pb.GetLabelByIDResponse
	13, // 8: pb.BatchGetTagBindsRequest.Context:type_name -> pb.UserContext
	1,  // 9: pb.BatchGetTagBindsResponse.Labels:type_name -> pb.TagBindResp
	0,  // 10: pb.Label.GetLabelBind:input_type -> pb.GetLabelBindRequest
	3,  // 11: pb.Label.GetUserBindTag:input_type -> pb.GetUserBindTagRequest
	5,  // 12: pb.Label.GetViewBindNum:input_type -> pb.GetViewBindNumRequest
	7,  // 13: pb.Label.GetLabelByID:input_type -> pb.GetLabelByIDRequest
	9,  // 14: pb.Label.BatchGetLabelByID:input_type -> pb.BatchGetLabelByIDRequest
	11, // 15: pb.Label.BatchGetTagBinds:input_type -> pb.BatchGetTagBindsRequest
	14, // 16: pb.Label.GetLabelBind:output_type -> pb.Response
	14, // 17: pb.Label.GetUserBindTag:output_type -> pb.Response
	14, // 18: pb.Label.GetViewBindNum:output_type -> pb.Response
	14, // 19: pb.Label.GetLabelByID:output_type -> pb.Response
	14, // 20: pb.Label.BatchGetLabelByID:output_type -> pb.Response
	14, // 21: pb.Label.BatchGetTagBinds:output_type -> pb.Response
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_label_proto_init() }
func file_label_proto_init() {
	if File_label_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_label_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelBindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBindTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBindTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewBindNumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewBindNumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLabelByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLabelByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetLabelByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTagBindsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_label_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetTagBindsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_label_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_label_proto_goTypes,
		DependencyIndexes: file_label_proto_depIdxs,
		MessageInfos:      file_label_proto_msgTypes,
	}.Build()
	File_label_proto = out.File
	file_label_proto_rawDesc = nil
	file_label_proto_goTypes = nil
	file_label_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LabelClient is the client API for Label service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabelClient interface {
	// GetLabelBind 根据绑定对象获取标签
	GetLabelBind(ctx context.Context, in *GetLabelBindRequest, opts ...grpc.CallOption) (*Response, error)
	// GetUserBindTag 获取用户绑定指定标签列表
	GetUserBindTag(ctx context.Context, in *GetUserBindTagRequest, opts ...grpc.CallOption) (*Response, error)
	// GetViewBindNum 获取用户自定义视图数
	GetViewBindNum(ctx context.Context, in *GetViewBindNumRequest, opts ...grpc.CallOption) (*Response, error)
	// GetLabelByID 根据ID查标签详情
	GetLabelByID(ctx context.Context, in *GetLabelByIDRequest, opts ...grpc.CallOption) (*Response, error)
	// BatchGetLabelByID 根据ID批量查标签详情
	BatchGetLabelByID(ctx context.Context, in *BatchGetLabelByIDRequest, opts ...grpc.CallOption) (*Response, error)
	// BatchGetTagBinds 批量查询标签绑定列表
	BatchGetTagBinds(ctx context.Context, in *BatchGetTagBindsRequest, opts ...grpc.CallOption) (*Response, error)
}

type labelClient struct {
	cc grpc.ClientConnInterface
}

func NewLabelClient(cc grpc.ClientConnInterface) LabelClient {
	return &labelClient{cc}
}

func (c *labelClient) GetLabelBind(ctx context.Context, in *GetLabelBindRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/GetLabelBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelClient) GetUserBindTag(ctx context.Context, in *GetUserBindTagRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/GetUserBindTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelClient) GetViewBindNum(ctx context.Context, in *GetViewBindNumRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/GetViewBindNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelClient) GetLabelByID(ctx context.Context, in *GetLabelByIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/GetLabelByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelClient) BatchGetLabelByID(ctx context.Context, in *BatchGetLabelByIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/BatchGetLabelByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labelClient) BatchGetTagBinds(ctx context.Context, in *BatchGetTagBindsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Label/BatchGetTagBinds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabelServer is the server API for Label service.
type LabelServer interface {
	// GetLabelBind 根据绑定对象获取标签
	GetLabelBind(context.Context, *GetLabelBindRequest) (*Response, error)
	// GetUserBindTag 获取用户绑定指定标签列表
	GetUserBindTag(context.Context, *GetUserBindTagRequest) (*Response, error)
	// GetViewBindNum 获取用户自定义视图数
	GetViewBindNum(context.Context, *GetViewBindNumRequest) (*Response, error)
	// GetLabelByID 根据ID查标签详情
	GetLabelByID(context.Context, *GetLabelByIDRequest) (*Response, error)
	// BatchGetLabelByID 根据ID批量查标签详情
	BatchGetLabelByID(context.Context, *BatchGetLabelByIDRequest) (*Response, error)
	// BatchGetTagBinds 批量查询标签绑定列表
	BatchGetTagBinds(context.Context, *BatchGetTagBindsRequest) (*Response, error)
}

// UnimplementedLabelServer can be embedded to have forward compatible implementations.
type UnimplementedLabelServer struct {
}

func (*UnimplementedLabelServer) GetLabelBind(context.Context, *GetLabelBindRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelBind not implemented")
}
func (*UnimplementedLabelServer) GetUserBindTag(context.Context, *GetUserBindTagRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBindTag not implemented")
}
func (*UnimplementedLabelServer) GetViewBindNum(context.Context, *GetViewBindNumRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewBindNum not implemented")
}
func (*UnimplementedLabelServer) GetLabelByID(context.Context, *GetLabelByIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelByID not implemented")
}
func (*UnimplementedLabelServer) BatchGetLabelByID(context.Context, *BatchGetLabelByIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetLabelByID not implemented")
}
func (*UnimplementedLabelServer) BatchGetTagBinds(context.Context, *BatchGetTagBindsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetTagBinds not implemented")
}

func RegisterLabelServer(s *grpc.Server, srv LabelServer) {
	s.RegisterService(&_Label_serviceDesc, srv)
}

func _Label_GetLabelBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).GetLabelBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/GetLabelBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).GetLabelBind(ctx, req.(*GetLabelBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Label_GetUserBindTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBindTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).GetUserBindTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/GetUserBindTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).GetUserBindTag(ctx, req.(*GetUserBindTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Label_GetViewBindNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewBindNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).GetViewBindNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/GetViewBindNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).GetViewBindNum(ctx, req.(*GetViewBindNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Label_GetLabelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).GetLabelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/GetLabelByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).GetLabelByID(ctx, req.(*GetLabelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Label_BatchGetLabelByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetLabelByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).BatchGetLabelByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/BatchGetLabelByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).BatchGetLabelByID(ctx, req.(*BatchGetLabelByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Label_BatchGetTagBinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetTagBindsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabelServer).BatchGetTagBinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Label/BatchGetTagBinds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabelServer).BatchGetTagBinds(ctx, req.(*BatchGetTagBindsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Label_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Label",
	HandlerType: (*LabelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLabelBind",
			Handler:    _Label_GetLabelBind_Handler,
		},
		{
			MethodName: "GetUserBindTag",
			Handler:    _Label_GetUserBindTag_Handler,
		},
		{
			MethodName: "GetViewBindNum",
			Handler:    _Label_GetViewBindNum_Handler,
		},
		{
			MethodName: "GetLabelByID",
			Handler:    _Label_GetLabelByID_Handler,
		},
		{
			MethodName: "BatchGetLabelByID",
			Handler:    _Label_BatchGetLabelByID_Handler,
		},
		{
			MethodName: "BatchGetTagBinds",
			Handler:    _Label_BatchGetTagBinds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "label.proto",
}
