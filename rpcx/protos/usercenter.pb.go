// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: usercenter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchQueryUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`     //要查询的用户ID列表
	LoginUid string       `protobuf:"bytes,2,opt,name=LoginUid,proto3" json:"LoginUid,omitempty"` //当前已登录用户ID
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryUsersRequest) Reset() {
	*x = BatchQueryUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUsersRequest) ProtoMessage() {}

func (x *BatchQueryUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUsersRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryUsersRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{0}
}

func (x *BatchQueryUsersRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *BatchQueryUsersRequest) GetLoginUid() string {
	if x != nil {
		return x.LoginUid
	}
	return ""
}

func (x *BatchQueryUsersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*SimpleUserInfo `protobuf:"bytes,1,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BatchQueryUsersResponse) Reset() {
	*x = BatchQueryUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUsersResponse) ProtoMessage() {}

func (x *BatchQueryUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUsersResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryUsersResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{1}
}

func (x *BatchQueryUsersResponse) GetResponse() []*SimpleUserInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type SimpleUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar       string  `protobuf:"bytes,1,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	NickName     string  `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Sex          string  `protobuf:"bytes,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	UserID       string  `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OriginalName string  `protobuf:"bytes,5,opt,name=OriginalName,proto3" json:"OriginalName,omitempty"`
	Pinyin       string  `protobuf:"bytes,6,opt,name=Pinyin,proto3" json:"Pinyin,omitempty"`
	Telephone    string  `protobuf:"bytes,7,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	CreateAt     int64   `protobuf:"varint,8,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UserType     int64   `protobuf:"varint,10,opt,name=UserType,proto3" json:"UserType,omitempty"`
	Member       *Member `protobuf:"bytes,9,opt,name=Member,proto3" json:"Member,omitempty"`
}

func (x *SimpleUserInfo) Reset() {
	*x = SimpleUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUserInfo) ProtoMessage() {}

func (x *SimpleUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUserInfo.ProtoReflect.Descriptor instead.
func (*SimpleUserInfo) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleUserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SimpleUserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SimpleUserInfo) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *SimpleUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SimpleUserInfo) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *SimpleUserInfo) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *SimpleUserInfo) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *SimpleUserInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SimpleUserInfo) GetUserType() int64 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *SimpleUserInfo) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

type GetUserSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserSettingsRequest) Reset() {
	*x = GetUserSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSettingsRequest) ProtoMessage() {}

func (x *GetUserSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetUserSettingsRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserSettingsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserSettingsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string            `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Data   map[string]string `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserSettingsResponse) Reset() {
	*x = GetUserSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSettingsResponse) ProtoMessage() {}

func (x *GetUserSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetUserSettingsResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserSettingsResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserSettingsResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchGetUserSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetUserSettingsRequest) Reset() {
	*x = BatchGetUserSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserSettingsRequest) ProtoMessage() {}

func (x *BatchGetUserSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserSettingsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserSettingsRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGetUserSettingsRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *BatchGetUserSettingsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetUserSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*GetUserSettingsResponse `protobuf:"bytes,1,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BatchGetUserSettingsResponse) Reset() {
	*x = BatchGetUserSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserSettingsResponse) ProtoMessage() {}

func (x *BatchGetUserSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserSettingsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserSettingsResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGetUserSettingsResponse) GetResponse() []*GetUserSettingsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TryGrantAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionID string       `protobuf:"bytes,1,opt,name=UnionID,proto3" json:"UnionID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *TryGrantAccessTokenRequest) Reset() {
	*x = TryGrantAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryGrantAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryGrantAccessTokenRequest) ProtoMessage() {}

func (x *TryGrantAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryGrantAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*TryGrantAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{7}
}

func (x *TryGrantAccessTokenRequest) GetUnionID() string {
	if x != nil {
		return x.UnionID
	}
	return ""
}

func (x *TryGrantAccessTokenRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type TryGrantAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *TryGrantAccessTokenResponse) Reset() {
	*x = TryGrantAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryGrantAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryGrantAccessTokenResponse) ProtoMessage() {}

func (x *TryGrantAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryGrantAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*TryGrantAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{8}
}

func (x *TryGrantAccessTokenResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TryGrantAccessTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type SetUserSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string            `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Data   map[string]string `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //  UserContext Context = 3;
}

func (x *SetUserSettingsRequest) Reset() {
	*x = SetUserSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSettingsRequest) ProtoMessage() {}

func (x *SetUserSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSettingsRequest.ProtoReflect.Descriptor instead.
func (*SetUserSettingsRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{9}
}

func (x *SetUserSettingsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetUserSettingsRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateUserByOfficialAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName       string       `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"`
	OpenID         string       `protobuf:"bytes,2,opt,name=OpenID,proto3" json:"OpenID,omitempty"`
	Sex            int32        `protobuf:"varint,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	City           string       `protobuf:"bytes,4,opt,name=City,proto3" json:"City,omitempty"`
	Province       string       `protobuf:"bytes,5,opt,name=Province,proto3" json:"Province,omitempty"`
	Avatar         string       `protobuf:"bytes,6,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	UnionID        string       `protobuf:"bytes,7,opt,name=UnionID,proto3" json:"UnionID,omitempty"`
	SubscribeScene string       `protobuf:"bytes,8,opt,name=SubscribeScene,proto3" json:"SubscribeScene,omitempty"`
	Wxid           string       `protobuf:"bytes,9,opt,name=Wxid,proto3" json:"Wxid,omitempty"`
	Country        string       `protobuf:"bytes,10,opt,name=Country,proto3" json:"Country,omitempty"`
	ChannelSource  string       `protobuf:"bytes,11,opt,name=ChannelSource,proto3" json:"ChannelSource,omitempty"`
	Context        *UserContext `protobuf:"bytes,12,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateUserByOfficialAccountRequest) Reset() {
	*x = CreateUserByOfficialAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserByOfficialAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserByOfficialAccountRequest) ProtoMessage() {}

func (x *CreateUserByOfficialAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserByOfficialAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateUserByOfficialAccountRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{10}
}

func (x *CreateUserByOfficialAccountRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetOpenID() string {
	if x != nil {
		return x.OpenID
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *CreateUserByOfficialAccountRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetUnionID() string {
	if x != nil {
		return x.UnionID
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetSubscribeScene() string {
	if x != nil {
		return x.SubscribeScene
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetWxid() string {
	if x != nil {
		return x.Wxid
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetChannelSource() string {
	if x != nil {
		return x.ChannelSource
	}
	return ""
}

func (x *CreateUserByOfficialAccountRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CreateUserByOfficialAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CreateUserByOfficialAccountResponse) Reset() {
	*x = CreateUserByOfficialAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserByOfficialAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserByOfficialAccountResponse) ProtoMessage() {}

func (x *CreateUserByOfficialAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserByOfficialAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateUserByOfficialAccountResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{11}
}

func (x *CreateUserByOfficialAccountResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnionID        string       `protobuf:"bytes,1,opt,name=UnionID,proto3" json:"UnionID,omitempty"`
	Subscribed     bool         `protobuf:"varint,2,opt,name=Subscribed,proto3" json:"Subscribed,omitempty"`
	OfficialOpenID string       `protobuf:"bytes,3,opt,name=OfficialOpenID,proto3" json:"OfficialOpenID,omitempty"`
	UserID         string       `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	WXID           string       `protobuf:"bytes,5,opt,name=WXID,proto3" json:"WXID,omitempty"`
	Context        *UserContext `protobuf:"bytes,6,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserRequest) GetUnionID() string {
	if x != nil {
		return x.UnionID
	}
	return ""
}

func (x *UpdateUserRequest) GetSubscribed() bool {
	if x != nil {
		return x.Subscribed
	}
	return false
}

func (x *UpdateUserRequest) GetOfficialOpenID() string {
	if x != nil {
		return x.OfficialOpenID
	}
	return ""
}

func (x *UpdateUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateUserRequest) GetWXID() string {
	if x != nil {
		return x.WXID
	}
	return ""
}

func (x *UpdateUserRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type WhoShouldSendScheduleRemindSMSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *WhoShouldSendScheduleRemindSMSRequest) Reset() {
	*x = WhoShouldSendScheduleRemindSMSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhoShouldSendScheduleRemindSMSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoShouldSendScheduleRemindSMSRequest) ProtoMessage() {}

func (x *WhoShouldSendScheduleRemindSMSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoShouldSendScheduleRemindSMSRequest.ProtoReflect.Descriptor instead.
func (*WhoShouldSendScheduleRemindSMSRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{13}
}

func (x *WhoShouldSendScheduleRemindSMSRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WhoShouldSendScheduleRemindSMSRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type WhoShouldSendScheduleRemindSMSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSend     bool   `protobuf:"varint,1,opt,name=CanSend,proto3" json:"CanSend,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
}

func (x *WhoShouldSendScheduleRemindSMSResponse) Reset() {
	*x = WhoShouldSendScheduleRemindSMSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhoShouldSendScheduleRemindSMSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhoShouldSendScheduleRemindSMSResponse) ProtoMessage() {}

func (x *WhoShouldSendScheduleRemindSMSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhoShouldSendScheduleRemindSMSResponse.ProtoReflect.Descriptor instead.
func (*WhoShouldSendScheduleRemindSMSResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{14}
}

func (x *WhoShouldSendScheduleRemindSMSResponse) GetCanSend() bool {
	if x != nil {
		return x.CanSend
	}
	return false
}

func (x *WhoShouldSendScheduleRemindSMSResponse) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

type GetUserDeviceIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserDeviceIDRequest) Reset() {
	*x = GetUserDeviceIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDeviceIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDeviceIDRequest) ProtoMessage() {}

func (x *GetUserDeviceIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDeviceIDRequest.ProtoReflect.Descriptor instead.
func (*GetUserDeviceIDRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{15}
}

func (x *GetUserDeviceIDRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *GetUserDeviceIDRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserDeviceIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserDeviceIDResponse) Reset() {
	*x = GetUserDeviceIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDeviceIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDeviceIDResponse) ProtoMessage() {}

func (x *GetUserDeviceIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDeviceIDResponse.ProtoReflect.Descriptor instead.
func (*GetUserDeviceIDResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserDeviceIDResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type SetUserLoginStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DeviceID string       `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"` // 设备ID
	Platform string       `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Online   int32        `protobuf:"varint,4,opt,name=Online,proto3" json:"Online,omitempty"` //用户上线下线
	Context  *UserContext `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *SetUserLoginStateRequest) Reset() {
	*x = SetUserLoginStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUserLoginStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserLoginStateRequest) ProtoMessage() {}

func (x *SetUserLoginStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserLoginStateRequest.ProtoReflect.Descriptor instead.
func (*SetUserLoginStateRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{17}
}

func (x *SetUserLoginStateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SetUserLoginStateRequest) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SetUserLoginStateRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SetUserLoginStateRequest) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *SetUserLoginStateRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type RecentlyLoginAppOrDesktopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID         string            `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DefineRecently int32             `protobuf:"varint,2,opt,name=DefineRecently,proto3" json:"DefineRecently,omitempty"`
	Parameters     map[string]string `protobuf:"bytes,3,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context        *UserContext      `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *RecentlyLoginAppOrDesktopRequest) Reset() {
	*x = RecentlyLoginAppOrDesktopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyLoginAppOrDesktopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyLoginAppOrDesktopRequest) ProtoMessage() {}

func (x *RecentlyLoginAppOrDesktopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyLoginAppOrDesktopRequest.ProtoReflect.Descriptor instead.
func (*RecentlyLoginAppOrDesktopRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{18}
}

func (x *RecentlyLoginAppOrDesktopRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RecentlyLoginAppOrDesktopRequest) GetDefineRecently() int32 {
	if x != nil {
		return x.DefineRecently
	}
	return 0
}

func (x *RecentlyLoginAppOrDesktopRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *RecentlyLoginAppOrDesktopRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type RecentlyLoginAppOrDesktopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhoneNumber string            `protobuf:"bytes,1,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`
	Extra       map[string]string `protobuf:"bytes,2,rep,name=Extra,proto3" json:"Extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RecentlyLoginAppOrDesktopResponse) Reset() {
	*x = RecentlyLoginAppOrDesktopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyLoginAppOrDesktopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyLoginAppOrDesktopResponse) ProtoMessage() {}

func (x *RecentlyLoginAppOrDesktopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyLoginAppOrDesktopResponse.ProtoReflect.Descriptor instead.
func (*RecentlyLoginAppOrDesktopResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{19}
}

func (x *RecentlyLoginAppOrDesktopResponse) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *RecentlyLoginAppOrDesktopResponse) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GetUserPhoneNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersID []string     `protobuf:"bytes,1,rep,name=UsersID,proto3" json:"UsersID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserPhoneNumberRequest) Reset() {
	*x = GetUserPhoneNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPhoneNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhoneNumberRequest) ProtoMessage() {}

func (x *GetUserPhoneNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhoneNumberRequest.ProtoReflect.Descriptor instead.
func (*GetUserPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{20}
}

func (x *GetUserPhoneNumberRequest) GetUsersID() []string {
	if x != nil {
		return x.UsersID
	}
	return nil
}

func (x *GetUserPhoneNumberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserPhoneNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*SimpleUserInfo `protobuf:"bytes,1,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GetUserPhoneNumberResponse) Reset() {
	*x = GetUserPhoneNumberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPhoneNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPhoneNumberResponse) ProtoMessage() {}

func (x *GetUserPhoneNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPhoneNumberResponse.ProtoReflect.Descriptor instead.
func (*GetUserPhoneNumberResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{21}
}

func (x *GetUserPhoneNumberResponse) GetResponse() []*SimpleUserInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetUserOnlineStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersID []string     `protobuf:"bytes,1,rep,name=UsersID,proto3" json:"UsersID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserOnlineStateRequest) Reset() {
	*x = GetUserOnlineStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserOnlineStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOnlineStateRequest) ProtoMessage() {}

func (x *GetUserOnlineStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOnlineStateRequest.ProtoReflect.Descriptor instead.
func (*GetUserOnlineStateRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{22}
}

func (x *GetUserOnlineStateRequest) GetUsersID() []string {
	if x != nil {
		return x.UsersID
	}
	return nil
}

func (x *GetUserOnlineStateRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserOnlineStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetUserOnlineStateResponse) Reset() {
	*x = GetUserOnlineStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserOnlineStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOnlineStateResponse) ProtoMessage() {}

func (x *GetUserOnlineStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOnlineStateResponse.ProtoReflect.Descriptor instead.
func (*GetUserOnlineStateResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{23}
}

func (x *GetUserOnlineStateResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Account         string `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	AccountProvider string `protobuf:"bytes,3,opt,name=AccountProvider,proto3" json:"AccountProvider,omitempty"` // 账号提供者，1: wechat-openid，2: phone
	OfficialOpenID  string `protobuf:"bytes,4,opt,name=OfficialOpenID,proto3" json:"OfficialOpenID,omitempty"`
	UnionID         string `protobuf:"bytes,5,opt,name=UnionID,proto3" json:"UnionID,omitempty"`
	GetSubscribed   bool   `protobuf:"varint,6,opt,name=GetSubscribed,proto3" json:"GetSubscribed,omitempty"` // 是否查询订阅
}

func (x *UserAccountInfoRequest) Reset() {
	*x = UserAccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfoRequest) ProtoMessage() {}

func (x *UserAccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfoRequest.ProtoReflect.Descriptor instead.
func (*UserAccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{24}
}

func (x *UserAccountInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserAccountInfoRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAccountInfoRequest) GetAccountProvider() string {
	if x != nil {
		return x.AccountProvider
	}
	return ""
}

func (x *UserAccountInfoRequest) GetOfficialOpenID() string {
	if x != nil {
		return x.OfficialOpenID
	}
	return ""
}

func (x *UserAccountInfoRequest) GetUnionID() string {
	if x != nil {
		return x.UnionID
	}
	return ""
}

func (x *UserAccountInfoRequest) GetGetSubscribed() bool {
	if x != nil {
		return x.GetSubscribed
	}
	return false
}

type UserAccountInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Account         string `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	AccountProvider string `protobuf:"bytes,3,opt,name=AccountProvider,proto3" json:"AccountProvider,omitempty"` // 账号提供者，1: wechat-openid，2: phone
	OfficialOpenID  string `protobuf:"bytes,4,opt,name=OfficialOpenID,proto3" json:"OfficialOpenID,omitempty"`
	UnionID         string `protobuf:"bytes,5,opt,name=UnionID,proto3" json:"UnionID,omitempty"`
	Subscribed      int32  `protobuf:"varint,6,opt,name=Subscribed,proto3" json:"Subscribed,omitempty"` // 是否订阅
}

func (x *UserAccountInfoResponse) Reset() {
	*x = UserAccountInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccountInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountInfoResponse) ProtoMessage() {}

func (x *UserAccountInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountInfoResponse.ProtoReflect.Descriptor instead.
func (*UserAccountInfoResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{25}
}

func (x *UserAccountInfoResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserAccountInfoResponse) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserAccountInfoResponse) GetAccountProvider() string {
	if x != nil {
		return x.AccountProvider
	}
	return ""
}

func (x *UserAccountInfoResponse) GetOfficialOpenID() string {
	if x != nil {
		return x.OfficialOpenID
	}
	return ""
}

func (x *UserAccountInfoResponse) GetUnionID() string {
	if x != nil {
		return x.UnionID
	}
	return ""
}

func (x *UserAccountInfoResponse) GetSubscribed() int32 {
	if x != nil {
		return x.Subscribed
	}
	return 0
}

type BatchGetUserAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountInfoRequests []*UserAccountInfoRequest `protobuf:"bytes,1,rep,name=UserAccountInfoRequests,proto3" json:"UserAccountInfoRequests,omitempty"`
	Context                 *UserContext              `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetUserAccountRequest) Reset() {
	*x = BatchGetUserAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserAccountRequest) ProtoMessage() {}

func (x *BatchGetUserAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserAccountRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserAccountRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{26}
}

func (x *BatchGetUserAccountRequest) GetUserAccountInfoRequests() []*UserAccountInfoRequest {
	if x != nil {
		return x.UserAccountInfoRequests
	}
	return nil
}

func (x *BatchGetUserAccountRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetUserAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountInfoResponses []*UserAccountInfoResponse `protobuf:"bytes,1,rep,name=UserAccountInfoResponses,proto3" json:"UserAccountInfoResponses,omitempty"`
}

func (x *BatchGetUserAccountResponse) Reset() {
	*x = BatchGetUserAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserAccountResponse) ProtoMessage() {}

func (x *BatchGetUserAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserAccountResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserAccountResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{27}
}

func (x *BatchGetUserAccountResponse) GetUserAccountInfoResponses() []*UserAccountInfoResponse {
	if x != nil {
		return x.UserAccountInfoResponses
	}
	return nil
}

type BatchSetUserSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*SetUserSettingsRequest `protobuf:"bytes,1,rep,name=Settings,proto3" json:"Settings,omitempty"`
	Context  *UserContext              `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchSetUserSettingsRequest) Reset() {
	*x = BatchSetUserSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSetUserSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetUserSettingsRequest) ProtoMessage() {}

func (x *BatchSetUserSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetUserSettingsRequest.ProtoReflect.Descriptor instead.
func (*BatchSetUserSettingsRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{28}
}

func (x *BatchSetUserSettingsRequest) GetSettings() []*SetUserSettingsRequest {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *BatchSetUserSettingsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar       string `protobuf:"bytes,1,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	NickName     string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Sex          string `protobuf:"bytes,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	UserID       string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Telephone    string `protobuf:"bytes,5,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	CreateAt     int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	VipLevel     int32  `protobuf:"varint,7,opt,name=VipLevel,proto3" json:"VipLevel,omitempty"`
	Status       int32  `protobuf:"varint,8,opt,name=Status,proto3" json:"Status,omitempty"`
	IsPreProd    int32  `protobuf:"varint,9,opt,name=IsPreProd,proto3" json:"IsPreProd,omitempty"`
	Blacklist    int32  `protobuf:"varint,10,opt,name=Blacklist,proto3" json:"Blacklist,omitempty"`
	Referrer     int64  `protobuf:"varint,11,opt,name=Referrer,proto3" json:"Referrer,omitempty"`
	UserType     int32  `protobuf:"varint,12,opt,name=UserType,proto3" json:"UserType,omitempty"`
	Pinyin       string `protobuf:"bytes,13,opt,name=Pinyin,proto3" json:"Pinyin,omitempty"`
	OriginalName string `protobuf:"bytes,14,opt,name=OriginalName,proto3" json:"OriginalName,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{29}
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserInfo) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *UserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInfo) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *UserInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *UserInfo) GetVipLevel() int32 {
	if x != nil {
		return x.VipLevel
	}
	return 0
}

func (x *UserInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfo) GetIsPreProd() int32 {
	if x != nil {
		return x.IsPreProd
	}
	return 0
}

func (x *UserInfo) GetBlacklist() int32 {
	if x != nil {
		return x.Blacklist
	}
	return 0
}

func (x *UserInfo) GetReferrer() int64 {
	if x != nil {
		return x.Referrer
	}
	return 0
}

func (x *UserInfo) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *UserInfo) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *UserInfo) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

type GetUserListPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	NickName  string       `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Telephone string       `protobuf:"bytes,3,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	Paging    *Paging      `protobuf:"bytes,4,opt,name=Paging,proto3" json:"Paging,omitempty"`
	Context   *UserContext `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserListPageRequest) Reset() {
	*x = GetUserListPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListPageRequest) ProtoMessage() {}

func (x *GetUserListPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListPageRequest.ProtoReflect.Descriptor instead.
func (*GetUserListPageRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{30}
}

func (x *GetUserListPageRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserListPageRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GetUserListPageRequest) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *GetUserListPageRequest) GetPaging() *Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *GetUserListPageRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserListPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64       `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Users []*UserInfo `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"` // 列表数据
}

func (x *GetUserListPageResponse) Reset() {
	*x = GetUserListPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListPageResponse) ProtoMessage() {}

func (x *GetUserListPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListPageResponse.ProtoReflect.Descriptor instead.
func (*GetUserListPageResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{31}
}

func (x *GetUserListPageResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetUserListPageResponse) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserOfflineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Platform string       `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UserOfflineRequest) Reset() {
	*x = UserOfflineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOfflineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOfflineRequest) ProtoMessage() {}

func (x *UserOfflineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOfflineRequest.ProtoReflect.Descriptor instead.
func (*UserOfflineRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{32}
}

func (x *UserOfflineRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserOfflineRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserOfflineRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUsersOnlineClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUsersOnlineClientRequest) Reset() {
	*x = GetUsersOnlineClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersOnlineClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineClientRequest) ProtoMessage() {}

func (x *GetUsersOnlineClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineClientRequest.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineClientRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{33}
}

func (x *GetUsersOnlineClientRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *GetUsersOnlineClientRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUsersOnlineClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*GetUserSettingsResponse `protobuf:"bytes,1,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GetUsersOnlineClientResponse) Reset() {
	*x = GetUsersOnlineClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersOnlineClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersOnlineClientResponse) ProtoMessage() {}

func (x *GetUsersOnlineClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersOnlineClientResponse.ProtoReflect.Descriptor instead.
func (*GetUsersOnlineClientResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{34}
}

func (x *GetUsersOnlineClientResponse) GetResponse() []*GetUserSettingsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetUsersWechatFilterConditionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUsersWechatFilterConditionRequest) Reset() {
	*x = GetUsersWechatFilterConditionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersWechatFilterConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersWechatFilterConditionRequest) ProtoMessage() {}

func (x *GetUsersWechatFilterConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersWechatFilterConditionRequest.ProtoReflect.Descriptor instead.
func (*GetUsersWechatFilterConditionRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{35}
}

func (x *GetUsersWechatFilterConditionRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *GetUsersWechatFilterConditionRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUsersWechatFilterConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]int64 `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetUsersWechatFilterConditionResponse) Reset() {
	*x = GetUsersWechatFilterConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersWechatFilterConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersWechatFilterConditionResponse) ProtoMessage() {}

func (x *GetUsersWechatFilterConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersWechatFilterConditionResponse.ProtoReflect.Descriptor instead.
func (*GetUsersWechatFilterConditionResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{36}
}

func (x *GetUsersWechatFilterConditionResponse) GetData() map[string]int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckUserOperateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource    map[string]string `protobuf:"bytes,1,rep,name=Resource,proto3" json:"Resource,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OperateType int32             `protobuf:"varint,2,opt,name=OperateType,proto3" json:"OperateType,omitempty"`
	Context     *UserContext      `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CheckUserOperateAuthRequest) Reset() {
	*x = CheckUserOperateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserOperateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserOperateAuthRequest) ProtoMessage() {}

func (x *CheckUserOperateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserOperateAuthRequest.ProtoReflect.Descriptor instead.
func (*CheckUserOperateAuthRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{37}
}

func (x *CheckUserOperateAuthRequest) GetResource() map[string]string {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CheckUserOperateAuthRequest) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *CheckUserOperateAuthRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CheckUserOperateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAuth bool `protobuf:"varint,1,opt,name=IsAuth,proto3" json:"IsAuth,omitempty"`
}

func (x *CheckUserOperateAuthResponse) Reset() {
	*x = CheckUserOperateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserOperateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserOperateAuthResponse) ProtoMessage() {}

func (x *CheckUserOperateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserOperateAuthResponse.ProtoReflect.Descriptor instead.
func (*CheckUserOperateAuthResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{38}
}

func (x *CheckUserOperateAuthResponse) GetIsAuth() bool {
	if x != nil {
		return x.IsAuth
	}
	return false
}

type HelloRpcBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *HelloRpcBalanceRequest) Reset() {
	*x = HelloRpcBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRpcBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRpcBalanceRequest) ProtoMessage() {}

func (x *HelloRpcBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRpcBalanceRequest.ProtoReflect.Descriptor instead.
func (*HelloRpcBalanceRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{39}
}

func (x *HelloRpcBalanceRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CreateComboBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjID        string       `protobuf:"bytes,1,opt,name=ObjID,proto3" json:"ObjID,omitempty"`
	ObjType      int32        `protobuf:"varint,2,opt,name=ObjType,proto3" json:"ObjType,omitempty"`
	ComboType    int32        `protobuf:"varint,3,opt,name=ComboType,proto3" json:"ComboType,omitempty"`
	ComboVersion int32        `protobuf:"varint,4,opt,name=ComboVersion,proto3" json:"ComboVersion,omitempty"`
	Context      *UserContext `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateComboBindRequest) Reset() {
	*x = CreateComboBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComboBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComboBindRequest) ProtoMessage() {}

func (x *CreateComboBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComboBindRequest.ProtoReflect.Descriptor instead.
func (*CreateComboBindRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{40}
}

func (x *CreateComboBindRequest) GetObjID() string {
	if x != nil {
		return x.ObjID
	}
	return ""
}

func (x *CreateComboBindRequest) GetObjType() int32 {
	if x != nil {
		return x.ObjType
	}
	return 0
}

func (x *CreateComboBindRequest) GetComboType() int32 {
	if x != nil {
		return x.ComboType
	}
	return 0
}

func (x *CreateComboBindRequest) GetComboVersion() int32 {
	if x != nil {
		return x.ComboVersion
	}
	return 0
}

func (x *CreateComboBindRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CreateComboBindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindID  string `protobuf:"bytes,1,opt,name=BindID,proto3" json:"BindID,omitempty"`
	ComboID int32  `protobuf:"varint,2,opt,name=ComboID,proto3" json:"ComboID,omitempty"`
}

func (x *CreateComboBindResponse) Reset() {
	*x = CreateComboBindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateComboBindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateComboBindResponse) ProtoMessage() {}

func (x *CreateComboBindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateComboBindResponse.ProtoReflect.Descriptor instead.
func (*CreateComboBindResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{41}
}

func (x *CreateComboBindResponse) GetBindID() string {
	if x != nil {
		return x.BindID
	}
	return ""
}

func (x *CreateComboBindResponse) GetComboID() int32 {
	if x != nil {
		return x.ComboID
	}
	return 0
}

type CheckUserIsMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CheckUserIsMemberRequest) Reset() {
	*x = CheckUserIsMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsMemberRequest) ProtoMessage() {}

func (x *CheckUserIsMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsMemberRequest.ProtoReflect.Descriptor instead.
func (*CheckUserIsMemberRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{42}
}

func (x *CheckUserIsMemberRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CheckUserIsMemberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CheckUserIsMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMember bool `protobuf:"varint,1,opt,name=IsMember,proto3" json:"IsMember,omitempty"`
}

func (x *CheckUserIsMemberResponse) Reset() {
	*x = CheckUserIsMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserIsMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserIsMemberResponse) ProtoMessage() {}

func (x *CheckUserIsMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserIsMemberResponse.ProtoReflect.Descriptor instead.
func (*CheckUserIsMemberResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{43}
}

func (x *CheckUserIsMemberResponse) GetIsMember() bool {
	if x != nil {
		return x.IsMember
	}
	return false
}

type GetTaskEquityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboType    int64        `protobuf:"varint,1,opt,name=ComboType,proto3" json:"ComboType,omitempty"`
	ComboVersion int64        `protobuf:"varint,2,opt,name=ComboVersion,proto3" json:"ComboVersion,omitempty"`
	Context      *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskEquityRequest) Reset() {
	*x = GetTaskEquityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskEquityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskEquityRequest) ProtoMessage() {}

func (x *GetTaskEquityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskEquityRequest.ProtoReflect.Descriptor instead.
func (*GetTaskEquityRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{44}
}

func (x *GetTaskEquityRequest) GetComboType() int64 {
	if x != nil {
		return x.ComboType
	}
	return 0
}

func (x *GetTaskEquityRequest) GetComboVersion() int64 {
	if x != nil {
		return x.ComboVersion
	}
	return 0
}

func (x *GetTaskEquityRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskEquityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskTakersNum    int64 `protobuf:"varint,1,opt,name=TaskTakersNum,proto3" json:"TaskTakersNum,omitempty"`
	ChildTasksNum    int64 `protobuf:"varint,2,opt,name=ChildTasksNum,proto3" json:"ChildTasksNum,omitempty"`
	CustomRemindTime int64 `protobuf:"varint,3,opt,name=CustomRemindTime,proto3" json:"CustomRemindTime,omitempty"`
}

func (x *GetTaskEquityResponse) Reset() {
	*x = GetTaskEquityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskEquityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskEquityResponse) ProtoMessage() {}

func (x *GetTaskEquityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskEquityResponse.ProtoReflect.Descriptor instead.
func (*GetTaskEquityResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{45}
}

func (x *GetTaskEquityResponse) GetTaskTakersNum() int64 {
	if x != nil {
		return x.TaskTakersNum
	}
	return 0
}

func (x *GetTaskEquityResponse) GetChildTasksNum() int64 {
	if x != nil {
		return x.ChildTasksNum
	}
	return 0
}

func (x *GetTaskEquityResponse) GetCustomRemindTime() int64 {
	if x != nil {
		return x.CustomRemindTime
	}
	return 0
}

type GetEquityByMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetEquityByMemberRequest) Reset() {
	*x = GetEquityByMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityByMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityByMemberRequest) ProtoMessage() {}

func (x *GetEquityByMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityByMemberRequest.ProtoReflect.Descriptor instead.
func (*GetEquityByMemberRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{46}
}

func (x *GetEquityByMemberRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetEquityByMemberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetEquityByMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfProjectNum       int64 `protobuf:"varint,1,opt,name=SelfProjectNum,proto3" json:"SelfProjectNum,omitempty"`
	CustomViewNum        int64 `protobuf:"varint,2,opt,name=CustomViewNum,proto3" json:"CustomViewNum,omitempty"`
	MonthView            bool  `protobuf:"varint,3,opt,name=MonthView,proto3" json:"MonthView,omitempty"`
	BatchExport          bool  `protobuf:"varint,4,opt,name=BatchExport,proto3" json:"BatchExport,omitempty"`
	TagTasksNum          int64 `protobuf:"varint,5,opt,name=TagTasksNum,proto3" json:"TagTasksNum,omitempty"`
	CreateContextDiagram bool  `protobuf:"varint,6,opt,name=CreateContextDiagram,proto3" json:"CreateContextDiagram,omitempty"`
}

func (x *GetEquityByMemberResponse) Reset() {
	*x = GetEquityByMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEquityByMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEquityByMemberResponse) ProtoMessage() {}

func (x *GetEquityByMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEquityByMemberResponse.ProtoReflect.Descriptor instead.
func (*GetEquityByMemberResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{47}
}

func (x *GetEquityByMemberResponse) GetSelfProjectNum() int64 {
	if x != nil {
		return x.SelfProjectNum
	}
	return 0
}

func (x *GetEquityByMemberResponse) GetCustomViewNum() int64 {
	if x != nil {
		return x.CustomViewNum
	}
	return 0
}

func (x *GetEquityByMemberResponse) GetMonthView() bool {
	if x != nil {
		return x.MonthView
	}
	return false
}

func (x *GetEquityByMemberResponse) GetBatchExport() bool {
	if x != nil {
		return x.BatchExport
	}
	return false
}

func (x *GetEquityByMemberResponse) GetTagTasksNum() int64 {
	if x != nil {
		return x.TagTasksNum
	}
	return 0
}

func (x *GetEquityByMemberResponse) GetCreateContextDiagram() bool {
	if x != nil {
		return x.CreateContextDiagram
	}
	return false
}

type GetUserNickNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserNickNameRequest) Reset() {
	*x = GetUserNickNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserNickNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserNickNameRequest) ProtoMessage() {}

func (x *GetUserNickNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserNickNameRequest.ProtoReflect.Descriptor instead.
func (*GetUserNickNameRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{48}
}

func (x *GetUserNickNameRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetUserNickNameRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserNickNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName string `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"`
}

func (x *GetUserNickNameResponse) Reset() {
	*x = GetUserNickNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserNickNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserNickNameResponse) ProtoMessage() {}

func (x *GetUserNickNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserNickNameResponse.ProtoReflect.Descriptor instead.
func (*GetUserNickNameResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserNickNameResponse) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

type GetCorpUserLoginTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string       `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	CorpID     string       `protobuf:"bytes,2,opt,name=CorpID,proto3" json:"CorpID,omitempty"`
	CorpUserID string       `protobuf:"bytes,3,opt,name=CorpUserID,proto3" json:"CorpUserID,omitempty"`
	NickName   string       `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Avatar     string       `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Context    *UserContext `protobuf:"bytes,6,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetCorpUserLoginTokenRequest) Reset() {
	*x = GetCorpUserLoginTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorpUserLoginTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorpUserLoginTokenRequest) ProtoMessage() {}

func (x *GetCorpUserLoginTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorpUserLoginTokenRequest.ProtoReflect.Descriptor instead.
func (*GetCorpUserLoginTokenRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{50}
}

func (x *GetCorpUserLoginTokenRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GetCorpUserLoginTokenRequest) GetCorpID() string {
	if x != nil {
		return x.CorpID
	}
	return ""
}

func (x *GetCorpUserLoginTokenRequest) GetCorpUserID() string {
	if x != nil {
		return x.CorpUserID
	}
	return ""
}

func (x *GetCorpUserLoginTokenRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GetCorpUserLoginTokenRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GetCorpUserLoginTokenRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetCorpUserLoginTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string    `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	UserID   string    `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Phone    string    `protobuf:"bytes,3,opt,name=Phone,proto3" json:"Phone,omitempty"`
	NickName string    `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Avatar   string    `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Info     *UserInfo `protobuf:"bytes,6,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCorpUserLoginTokenResponse) Reset() {
	*x = GetCorpUserLoginTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCorpUserLoginTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCorpUserLoginTokenResponse) ProtoMessage() {}

func (x *GetCorpUserLoginTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCorpUserLoginTokenResponse.ProtoReflect.Descriptor instead.
func (*GetCorpUserLoginTokenResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{51}
}

func (x *GetCorpUserLoginTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetCorpUserLoginTokenResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetCorpUserLoginTokenResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCorpUserLoginTokenResponse) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *GetCorpUserLoginTokenResponse) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GetCorpUserLoginTokenResponse) GetInfo() *UserInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NickName       string       `protobuf:"bytes,1,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Avatar         string       `protobuf:"bytes,2,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Telephone      string       `protobuf:"bytes,3,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	Sex            int32        `protobuf:"varint,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Status         int32        `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	UserID         string       `protobuf:"bytes,6,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IsRefreshToken bool         `protobuf:"varint,7,opt,name=IsRefreshToken,proto3" json:"IsRefreshToken,omitempty"`
	Context        *UserContext `protobuf:"bytes,8,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateUserInfoRequest) Reset() {
	*x = UpdateUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoRequest) ProtoMessage() {}

func (x *UpdateUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateUserInfoRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UpdateUserInfoRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateUserInfoRequest) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *UpdateUserInfoRequest) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *UpdateUserInfoRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateUserInfoRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateUserInfoRequest) GetIsRefreshToken() bool {
	if x != nil {
		return x.IsRefreshToken
	}
	return false
}

func (x *UpdateUserInfoRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdateUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int64  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *UpdateUserInfoResponse) Reset() {
	*x = UpdateUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResponse) ProtoMessage() {}

func (x *UpdateUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateUserInfoResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateUserInfoResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type BatchQueryIsOpenRemindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string     `protobuf:"bytes,1,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	Context *UserContext `protobuf:"bytes,8,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryIsOpenRemindRequest) Reset() {
	*x = BatchQueryIsOpenRemindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryIsOpenRemindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryIsOpenRemindRequest) ProtoMessage() {}

func (x *BatchQueryIsOpenRemindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryIsOpenRemindRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryIsOpenRemindRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{54}
}

func (x *BatchQueryIsOpenRemindRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *BatchQueryIsOpenRemindRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryIsOpenRemindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemindMap map[string]bool `protobuf:"bytes,1,rep,name=RemindMap,proto3" json:"RemindMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchQueryIsOpenRemindResponse) Reset() {
	*x = BatchQueryIsOpenRemindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryIsOpenRemindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryIsOpenRemindResponse) ProtoMessage() {}

func (x *BatchQueryIsOpenRemindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryIsOpenRemindResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryIsOpenRemindResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{55}
}

func (x *BatchQueryIsOpenRemindResponse) GetRemindMap() map[string]bool {
	if x != nil {
		return x.RemindMap
	}
	return nil
}

type BatchQueryUserMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string     `protobuf:"bytes,1,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryUserMemberRequest) Reset() {
	*x = BatchQueryUserMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUserMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUserMemberRequest) ProtoMessage() {}

func (x *BatchQueryUserMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUserMemberRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryUserMemberRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{56}
}

func (x *BatchQueryUserMemberRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *BatchQueryUserMemberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	EndTime     int64  `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	State       int32  `protobuf:"varint,3,opt,name=State,proto3" json:"State,omitempty"`
	NextEndTime int64  `protobuf:"varint,4,opt,name=NextEndTime,proto3" json:"NextEndTime,omitempty"`
	CorpID      string `protobuf:"bytes,5,opt,name=CorpID,proto3" json:"CorpID,omitempty"`
	CorpName    string `protobuf:"bytes,6,opt,name=CorpName,proto3" json:"CorpName,omitempty"`
	CuStatus    int32  `protobuf:"varint,7,opt,name=CuStatus,proto3" json:"CuStatus,omitempty"`
	IsVisible   int32  `protobuf:"varint,8,opt,name=IsVisible,proto3" json:"IsVisible,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{57}
}

func (x *Member) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Member) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Member) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Member) GetNextEndTime() int64 {
	if x != nil {
		return x.NextEndTime
	}
	return 0
}

func (x *Member) GetCorpID() string {
	if x != nil {
		return x.CorpID
	}
	return ""
}

func (x *Member) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *Member) GetCuStatus() int32 {
	if x != nil {
		return x.CuStatus
	}
	return 0
}

func (x *Member) GetIsVisible() int32 {
	if x != nil {
		return x.IsVisible
	}
	return 0
}

type BatchQueryUserMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserState map[string]int32 `protobuf:"bytes,1,rep,name=UserState,proto3" json:"UserState,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Members   []*Member        `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
}

func (x *BatchQueryUserMemberResponse) Reset() {
	*x = BatchQueryUserMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUserMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUserMemberResponse) ProtoMessage() {}

func (x *BatchQueryUserMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUserMemberResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryUserMemberResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{58}
}

func (x *BatchQueryUserMemberResponse) GetUserState() map[string]int32 {
	if x != nil {
		return x.UserState
	}
	return nil
}

func (x *BatchQueryUserMemberResponse) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type AddMemberByGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs     []string     `protobuf:"bytes,1,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	GoodsID     int32        `protobuf:"varint,2,opt,name=GoodsID,proto3" json:"GoodsID,omitempty"`
	Context     *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
	OrderID     string       `protobuf:"bytes,4,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	CreatorID   string       `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	SendVipType int32        `protobuf:"varint,6,opt,name=SendVipType,proto3" json:"SendVipType,omitempty"`
	DayNum      int64        `protobuf:"varint,7,opt,name=DayNum,proto3" json:"DayNum,omitempty"`
}

func (x *AddMemberByGoodsRequest) Reset() {
	*x = AddMemberByGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberByGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberByGoodsRequest) ProtoMessage() {}

func (x *AddMemberByGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberByGoodsRequest.ProtoReflect.Descriptor instead.
func (*AddMemberByGoodsRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{59}
}

func (x *AddMemberByGoodsRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *AddMemberByGoodsRequest) GetGoodsID() int32 {
	if x != nil {
		return x.GoodsID
	}
	return 0
}

func (x *AddMemberByGoodsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AddMemberByGoodsRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *AddMemberByGoodsRequest) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *AddMemberByGoodsRequest) GetSendVipType() int32 {
	if x != nil {
		return x.SendVipType
	}
	return 0
}

func (x *AddMemberByGoodsRequest) GetDayNum() int64 {
	if x != nil {
		return x.DayNum
	}
	return 0
}

type AddMemberByGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailUserID []string `protobuf:"bytes,1,rep,name=FailUserID,proto3" json:"FailUserID,omitempty"`
}

func (x *AddMemberByGoodsResponse) Reset() {
	*x = AddMemberByGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberByGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberByGoodsResponse) ProtoMessage() {}

func (x *AddMemberByGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberByGoodsResponse.ProtoReflect.Descriptor instead.
func (*AddMemberByGoodsResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{60}
}

func (x *AddMemberByGoodsResponse) GetFailUserID() []string {
	if x != nil {
		return x.FailUserID
	}
	return nil
}

type UserInteracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Remark     string `protobuf:"bytes,2,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Pinyin     string `protobuf:"bytes,3,opt,name=Pinyin,proto3" json:"Pinyin,omitempty"`
	InteractID string `protobuf:"bytes,4,opt,name=InteractID,proto3" json:"InteractID,omitempty"`
}

func (x *UserInteracts) Reset() {
	*x = UserInteracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInteracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInteracts) ProtoMessage() {}

func (x *UserInteracts) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInteracts.ProtoReflect.Descriptor instead.
func (*UserInteracts) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{61}
}

func (x *UserInteracts) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInteracts) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UserInteracts) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *UserInteracts) GetInteractID() string {
	if x != nil {
		return x.InteractID
	}
	return ""
}

type BatchQueryUserInteractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs    []string     `protobuf:"bytes,1,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	IsInteract int32        `protobuf:"varint,2,opt,name=IsInteract,proto3" json:"IsInteract,omitempty"`
	Context    *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryUserInteractionRequest) Reset() {
	*x = BatchQueryUserInteractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUserInteractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUserInteractionRequest) ProtoMessage() {}

func (x *BatchQueryUserInteractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUserInteractionRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryUserInteractionRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{62}
}

func (x *BatchQueryUserInteractionRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *BatchQueryUserInteractionRequest) GetIsInteract() int32 {
	if x != nil {
		return x.IsInteract
	}
	return 0
}

func (x *BatchQueryUserInteractionRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryUserInteractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interacts []*UserInteracts `protobuf:"bytes,1,rep,name=Interacts,proto3" json:"Interacts,omitempty"`
}

func (x *BatchQueryUserInteractionResponse) Reset() {
	*x = BatchQueryUserInteractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryUserInteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryUserInteractionResponse) ProtoMessage() {}

func (x *BatchQueryUserInteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryUserInteractionResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryUserInteractionResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{63}
}

func (x *BatchQueryUserInteractionResponse) GetInteracts() []*UserInteracts {
	if x != nil {
		return x.Interacts
	}
	return nil
}

type BatchGetUserSettingByKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	SettingKey string       `protobuf:"bytes,2,opt,name=SettingKey,proto3" json:"SettingKey,omitempty"`
	Context    *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetUserSettingByKeyRequest) Reset() {
	*x = BatchGetUserSettingByKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserSettingByKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserSettingByKeyRequest) ProtoMessage() {}

func (x *BatchGetUserSettingByKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserSettingByKeyRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserSettingByKeyRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{64}
}

func (x *BatchGetUserSettingByKeyRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *BatchGetUserSettingByKeyRequest) GetSettingKey() string {
	if x != nil {
		return x.SettingKey
	}
	return ""
}

func (x *BatchGetUserSettingByKeyRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetUserSettingByKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatchGetUserSettingByKeyResponse) Reset() {
	*x = BatchGetUserSettingByKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserSettingByKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserSettingByKeyResponse) ProtoMessage() {}

func (x *BatchGetUserSettingByKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserSettingByKeyResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserSettingByKeyResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{65}
}

func (x *BatchGetUserSettingByKeyResponse) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type BatchGetUserInfoByTelephoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Telephone []string     `protobuf:"bytes,1,rep,name=Telephone,proto3" json:"Telephone,omitempty"`
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetUserInfoByTelephoneRequest) Reset() {
	*x = BatchGetUserInfoByTelephoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserInfoByTelephoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoByTelephoneRequest) ProtoMessage() {}

func (x *BatchGetUserInfoByTelephoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoByTelephoneRequest.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoByTelephoneRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{66}
}

func (x *BatchGetUserInfoByTelephoneRequest) GetTelephone() []string {
	if x != nil {
		return x.Telephone
	}
	return nil
}

func (x *BatchGetUserInfoByTelephoneRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetUserInfoByTelephoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*SimpleUserInfo `protobuf:"bytes,1,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *BatchGetUserInfoByTelephoneResponse) Reset() {
	*x = BatchGetUserInfoByTelephoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetUserInfoByTelephoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetUserInfoByTelephoneResponse) ProtoMessage() {}

func (x *BatchGetUserInfoByTelephoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetUserInfoByTelephoneResponse.ProtoReflect.Descriptor instead.
func (*BatchGetUserInfoByTelephoneResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{67}
}

func (x *BatchGetUserInfoByTelephoneResponse) GetResponse() []*SimpleUserInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type BatchQueryMemberByPlaceOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	VipType int32        `protobuf:"varint,2,opt,name=VipType,proto3" json:"VipType,omitempty"`
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryMemberByPlaceOrderRequest) Reset() {
	*x = BatchQueryMemberByPlaceOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryMemberByPlaceOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryMemberByPlaceOrderRequest) ProtoMessage() {}

func (x *BatchQueryMemberByPlaceOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryMemberByPlaceOrderRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryMemberByPlaceOrderRequest) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{68}
}

func (x *BatchQueryMemberByPlaceOrderRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *BatchQueryMemberByPlaceOrderRequest) GetVipType() int32 {
	if x != nil {
		return x.VipType
	}
	return 0
}

func (x *BatchQueryMemberByPlaceOrderRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryMemberByPlaceOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberEndTime map[string]int64 `protobuf:"bytes,1,rep,name=MemberEndTime,proto3" json:"MemberEndTime,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BatchQueryMemberByPlaceOrderResponse) Reset() {
	*x = BatchQueryMemberByPlaceOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryMemberByPlaceOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryMemberByPlaceOrderResponse) ProtoMessage() {}

func (x *BatchQueryMemberByPlaceOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryMemberByPlaceOrderResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryMemberByPlaceOrderResponse) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{69}
}

func (x *BatchQueryMemberByPlaceOrderResponse) GetMemberEndTime() map[string]int64 {
	if x != nil {
		return x.MemberEndTime
	}
	return nil
}

var File_usercenter_proto protoreflect.FileDescriptor

var file_usercenter_proto_rawDesc = []byte{
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x49, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x0e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x53, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xa5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x57, 0x0a, 0x1c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x61, 0x0a, 0x1a, 0x54, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x54, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x02, 0x0a, 0x22, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x57, 0x78, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57,
	0x78, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3d,
	0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xcc, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x57, 0x58, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57, 0x58, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6a, 0x0a, 0x25,
	0x57, 0x68, 0x6f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x53, 0x4d, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x26, 0x57, 0x68, 0x6f, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x61, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5b,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa2, 0x02, 0x0a, 0x20,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70,
	0x4f, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79,
	0x12, 0x54, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc7, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x73, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xdc, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x76, 0x0a, 0x1b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x18, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x56,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x56,
	0x69, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x05,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x73, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x57, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x69, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf2, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x1c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x22, 0x43, 0x0a, 0x16, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x70, 0x63,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x62, 0x6a, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x62,
	0x6a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x62, 0x6a,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x69, 0x6e, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x69,
	0x6e, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x44, 0x22, 0x5d,
	0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x37, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8f, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e,
	0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xff, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x56, 0x69, 0x65,
	0x77, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x54, 0x61, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x22,
	0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x35, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x72, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x20, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x49, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x64, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xaf, 0x01, 0x0a,
	0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x70,
	0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x65, 0x78, 0x74,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x44, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x22, 0x3a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x77, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x20,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x54, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1f,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x22,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x55, 0x0a, 0x23, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x24, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc2, 0x12, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x70, 0x63,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x70, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x54, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x79, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x1e, 0x57, 0x68, 0x6f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x53, 0x4d,
	0x53, 0x12, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x68, 0x6f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x19, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x72,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x62, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usercenter_proto_rawDescOnce sync.Once
	file_usercenter_proto_rawDescData = file_usercenter_proto_rawDesc
)

func file_usercenter_proto_rawDescGZIP() []byte {
	file_usercenter_proto_rawDescOnce.Do(func() {
		file_usercenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_usercenter_proto_rawDescData)
	})
	return file_usercenter_proto_rawDescData
}

var file_usercenter_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_usercenter_proto_goTypes = []interface{}{
	(*BatchQueryUsersRequest)(nil),                 // 0: pb.BatchQueryUsersRequest
	(*BatchQueryUsersResponse)(nil),                // 1: pb.BatchQueryUsersResponse
	(*SimpleUserInfo)(nil),                         // 2: pb.SimpleUserInfo
	(*GetUserSettingsRequest)(nil),                 // 3: pb.GetUserSettingsRequest
	(*GetUserSettingsResponse)(nil),                // 4: pb.GetUserSettingsResponse
	(*BatchGetUserSettingsRequest)(nil),            // 5: pb.BatchGetUserSettingsRequest
	(*BatchGetUserSettingsResponse)(nil),           // 6: pb.BatchGetUserSettingsResponse
	(*TryGrantAccessTokenRequest)(nil),             // 7: pb.TryGrantAccessTokenRequest
	(*TryGrantAccessTokenResponse)(nil),            // 8: pb.TryGrantAccessTokenResponse
	(*SetUserSettingsRequest)(nil),                 // 9: pb.SetUserSettingsRequest
	(*CreateUserByOfficialAccountRequest)(nil),     // 10: pb.CreateUserByOfficialAccountRequest
	(*CreateUserByOfficialAccountResponse)(nil),    // 11: pb.CreateUserByOfficialAccountResponse
	(*UpdateUserRequest)(nil),                      // 12: pb.UpdateUserRequest
	(*WhoShouldSendScheduleRemindSMSRequest)(nil),  // 13: pb.WhoShouldSendScheduleRemindSMSRequest
	(*WhoShouldSendScheduleRemindSMSResponse)(nil), // 14: pb.WhoShouldSendScheduleRemindSMSResponse
	(*GetUserDeviceIDRequest)(nil),                 // 15: pb.GetUserDeviceIDRequest
	(*GetUserDeviceIDResponse)(nil),                // 16: pb.GetUserDeviceIDResponse
	(*SetUserLoginStateRequest)(nil),               // 17: pb.SetUserLoginStateRequest
	(*RecentlyLoginAppOrDesktopRequest)(nil),       // 18: pb.RecentlyLoginAppOrDesktopRequest
	(*RecentlyLoginAppOrDesktopResponse)(nil),      // 19: pb.RecentlyLoginAppOrDesktopResponse
	(*GetUserPhoneNumberRequest)(nil),              // 20: pb.GetUserPhoneNumberRequest
	(*GetUserPhoneNumberResponse)(nil),             // 21: pb.GetUserPhoneNumberResponse
	(*GetUserOnlineStateRequest)(nil),              // 22: pb.GetUserOnlineStateRequest
	(*GetUserOnlineStateResponse)(nil),             // 23: pb.GetUserOnlineStateResponse
	(*UserAccountInfoRequest)(nil),                 // 24: pb.UserAccountInfoRequest
	(*UserAccountInfoResponse)(nil),                // 25: pb.UserAccountInfoResponse
	(*BatchGetUserAccountRequest)(nil),             // 26: pb.BatchGetUserAccountRequest
	(*BatchGetUserAccountResponse)(nil),            // 27: pb.BatchGetUserAccountResponse
	(*BatchSetUserSettingsRequest)(nil),            // 28: pb.BatchSetUserSettingsRequest
	(*UserInfo)(nil),                               // 29: pb.UserInfo
	(*GetUserListPageRequest)(nil),                 // 30: pb.GetUserListPageRequest
	(*GetUserListPageResponse)(nil),                // 31: pb.GetUserListPageResponse
	(*UserOfflineRequest)(nil),                     // 32: pb.UserOfflineRequest
	(*GetUsersOnlineClientRequest)(nil),            // 33: pb.GetUsersOnlineClientRequest
	(*GetUsersOnlineClientResponse)(nil),           // 34: pb.GetUsersOnlineClientResponse
	(*GetUsersWechatFilterConditionRequest)(nil),   // 35: pb.GetUsersWechatFilterConditionRequest
	(*GetUsersWechatFilterConditionResponse)(nil),  // 36: pb.GetUsersWechatFilterConditionResponse
	(*CheckUserOperateAuthRequest)(nil),            // 37: pb.CheckUserOperateAuthRequest
	(*CheckUserOperateAuthResponse)(nil),           // 38: pb.CheckUserOperateAuthResponse
	(*HelloRpcBalanceRequest)(nil),                 // 39: pb.HelloRpcBalanceRequest
	(*CreateComboBindRequest)(nil),                 // 40: pb.CreateComboBindRequest
	(*CreateComboBindResponse)(nil),                // 41: pb.CreateComboBindResponse
	(*CheckUserIsMemberRequest)(nil),               // 42: pb.CheckUserIsMemberRequest
	(*CheckUserIsMemberResponse)(nil),              // 43: pb.CheckUserIsMemberResponse
	(*GetTaskEquityRequest)(nil),                   // 44: pb.GetTaskEquityRequest
	(*GetTaskEquityResponse)(nil),                  // 45: pb.GetTaskEquityResponse
	(*GetEquityByMemberRequest)(nil),               // 46: pb.GetEquityByMemberRequest
	(*GetEquityByMemberResponse)(nil),              // 47: pb.GetEquityByMemberResponse
	(*GetUserNickNameRequest)(nil),                 // 48: pb.GetUserNickNameRequest
	(*GetUserNickNameResponse)(nil),                // 49: pb.GetUserNickNameResponse
	(*GetCorpUserLoginTokenRequest)(nil),           // 50: pb.GetCorpUserLoginTokenRequest
	(*GetCorpUserLoginTokenResponse)(nil),          // 51: pb.GetCorpUserLoginTokenResponse
	(*UpdateUserInfoRequest)(nil),                  // 52: pb.UpdateUserInfoRequest
	(*UpdateUserInfoResponse)(nil),                 // 53: pb.UpdateUserInfoResponse
	(*BatchQueryIsOpenRemindRequest)(nil),          // 54: pb.BatchQueryIsOpenRemindRequest
	(*BatchQueryIsOpenRemindResponse)(nil),         // 55: pb.BatchQueryIsOpenRemindResponse
	(*BatchQueryUserMemberRequest)(nil),            // 56: pb.BatchQueryUserMemberRequest
	(*Member)(nil),                                 // 57: pb.Member
	(*BatchQueryUserMemberResponse)(nil),           // 58: pb.BatchQueryUserMemberResponse
	(*AddMemberByGoodsRequest)(nil),                // 59: pb.AddMemberByGoodsRequest
	(*AddMemberByGoodsResponse)(nil),               // 60: pb.AddMemberByGoodsResponse
	(*UserInteracts)(nil),                          // 61: pb.UserInteracts
	(*BatchQueryUserInteractionRequest)(nil),       // 62: pb.BatchQueryUserInteractionRequest
	(*BatchQueryUserInteractionResponse)(nil),      // 63: pb.BatchQueryUserInteractionResponse
	(*BatchGetUserSettingByKeyRequest)(nil),        // 64: pb.BatchGetUserSettingByKeyRequest
	(*BatchGetUserSettingByKeyResponse)(nil),       // 65: pb.BatchGetUserSettingByKeyResponse
	(*BatchGetUserInfoByTelephoneRequest)(nil),     // 66: pb.BatchGetUserInfoByTelephoneRequest
	(*BatchGetUserInfoByTelephoneResponse)(nil),    // 67: pb.BatchGetUserInfoByTelephoneResponse
	(*BatchQueryMemberByPlaceOrderRequest)(nil),    // 68: pb.BatchQueryMemberByPlaceOrderRequest
	(*BatchQueryMemberByPlaceOrderResponse)(nil),   // 69: pb.BatchQueryMemberByPlaceOrderResponse
	nil,                 // 70: pb.GetUserSettingsResponse.DataEntry
	nil,                 // 71: pb.SetUserSettingsRequest.DataEntry
	nil,                 // 72: pb.GetUserDeviceIDResponse.DataEntry
	nil,                 // 73: pb.RecentlyLoginAppOrDesktopRequest.ParametersEntry
	nil,                 // 74: pb.RecentlyLoginAppOrDesktopResponse.ExtraEntry
	nil,                 // 75: pb.GetUserOnlineStateResponse.DataEntry
	nil,                 // 76: pb.GetUsersWechatFilterConditionResponse.DataEntry
	nil,                 // 77: pb.CheckUserOperateAuthRequest.ResourceEntry
	nil,                 // 78: pb.BatchQueryIsOpenRemindResponse.RemindMapEntry
	nil,                 // 79: pb.BatchQueryUserMemberResponse.UserStateEntry
	nil,                 // 80: pb.BatchGetUserSettingByKeyResponse.ValuesEntry
	nil,                 // 81: pb.BatchQueryMemberByPlaceOrderResponse.MemberEndTimeEntry
	(*UserContext)(nil), // 82: pb.UserContext
	(*Paging)(nil),      // 83: pb.Paging
	(*Response)(nil),    // 84: pb.Response
}
var file_usercenter_proto_depIdxs = []int32{
	82, // 0: pb.BatchQueryUsersRequest.Context:type_name -> pb.UserContext
	2,  // 1: pb.BatchQueryUsersResponse.Response:type_name -> pb.SimpleUserInfo
	57, // 2: pb.SimpleUserInfo.Member:type_name -> pb.Member
	82, // 3: pb.GetUserSettingsRequest.Context:type_name -> pb.UserContext
	70, // 4: pb.GetUserSettingsResponse.Data:type_name -> pb.GetUserSettingsResponse.DataEntry
	82, // 5: pb.BatchGetUserSettingsRequest.Context:type_name -> pb.UserContext
	4,  // 6: pb.BatchGetUserSettingsResponse.Response:type_name -> pb.GetUserSettingsResponse
	82, // 7: pb.TryGrantAccessTokenRequest.Context:type_name -> pb.UserContext
	71, // 8: pb.SetUserSettingsRequest.Data:type_name -> pb.SetUserSettingsRequest.DataEntry
	82, // 9: pb.CreateUserByOfficialAccountRequest.Context:type_name -> pb.UserContext
	82, // 10: pb.UpdateUserRequest.Context:type_name -> pb.UserContext
	82, // 11: pb.WhoShouldSendScheduleRemindSMSRequest.Context:type_name -> pb.UserContext
	82, // 12: pb.GetUserDeviceIDRequest.Context:type_name -> pb.UserContext
	72, // 13: pb.GetUserDeviceIDResponse.Data:type_name -> pb.GetUserDeviceIDResponse.DataEntry
	82, // 14: pb.SetUserLoginStateRequest.Context:type_name -> pb.UserContext
	73, // 15: pb.RecentlyLoginAppOrDesktopRequest.Parameters:type_name -> pb.RecentlyLoginAppOrDesktopRequest.ParametersEntry
	82, // 16: pb.RecentlyLoginAppOrDesktopRequest.Context:type_name -> pb.UserContext
	74, // 17: pb.RecentlyLoginAppOrDesktopResponse.Extra:type_name -> pb.RecentlyLoginAppOrDesktopResponse.ExtraEntry
	82, // 18: pb.GetUserPhoneNumberRequest.Context:type_name -> pb.UserContext
	2,  // 19: pb.GetUserPhoneNumberResponse.Response:type_name -> pb.SimpleUserInfo
	82, // 20: pb.GetUserOnlineStateRequest.Context:type_name -> pb.UserContext
	75, // 21: pb.GetUserOnlineStateResponse.Data:type_name -> pb.GetUserOnlineStateResponse.DataEntry
	24, // 22: pb.BatchGetUserAccountRequest.UserAccountInfoRequests:type_name -> pb.UserAccountInfoRequest
	82, // 23: pb.BatchGetUserAccountRequest.Context:type_name -> pb.UserContext
	25, // 24: pb.BatchGetUserAccountResponse.UserAccountInfoResponses:type_name -> pb.UserAccountInfoResponse
	9,  // 25: pb.BatchSetUserSettingsRequest.Settings:type_name -> pb.SetUserSettingsRequest
	82, // 26: pb.BatchSetUserSettingsRequest.Context:type_name -> pb.UserContext
	83, // 27: pb.GetUserListPageRequest.Paging:type_name -> pb.Paging
	82, // 28: pb.GetUserListPageRequest.Context:type_name -> pb.UserContext
	29, // 29: pb.GetUserListPageResponse.Users:type_name -> pb.UserInfo
	82, // 30: pb.UserOfflineRequest.Context:type_name -> pb.UserContext
	82, // 31: pb.GetUsersOnlineClientRequest.Context:type_name -> pb.UserContext
	4,  // 32: pb.GetUsersOnlineClientResponse.Response:type_name -> pb.GetUserSettingsResponse
	82, // 33: pb.GetUsersWechatFilterConditionRequest.Context:type_name -> pb.UserContext
	76, // 34: pb.GetUsersWechatFilterConditionResponse.Data:type_name -> pb.GetUsersWechatFilterConditionResponse.DataEntry
	77, // 35: pb.CheckUserOperateAuthRequest.Resource:type_name -> pb.CheckUserOperateAuthRequest.ResourceEntry
	82, // 36: pb.CheckUserOperateAuthRequest.Context:type_name -> pb.UserContext
	82, // 37: pb.HelloRpcBalanceRequest.Context:type_name -> pb.UserContext
	82, // 38: pb.CreateComboBindRequest.Context:type_name -> pb.UserContext
	82, // 39: pb.CheckUserIsMemberRequest.Context:type_name -> pb.UserContext
	82, // 40: pb.GetTaskEquityRequest.Context:type_name -> pb.UserContext
	82, // 41: pb.GetEquityByMemberRequest.Context:type_name -> pb.UserContext
	82, // 42: pb.GetUserNickNameRequest.Context:type_name -> pb.UserContext
	82, // 43: pb.GetCorpUserLoginTokenRequest.Context:type_name -> pb.UserContext
	29, // 44: pb.GetCorpUserLoginTokenResponse.Info:type_name -> pb.UserInfo
	82, // 45: pb.UpdateUserInfoRequest.Context:type_name -> pb.UserContext
	82, // 46: pb.BatchQueryIsOpenRemindRequest.Context:type_name -> pb.UserContext
	78, // 47: pb.BatchQueryIsOpenRemindResponse.RemindMap:type_name -> pb.BatchQueryIsOpenRemindResponse.RemindMapEntry
	82, // 48: pb.BatchQueryUserMemberRequest.Context:type_name -> pb.UserContext
	79, // 49: pb.BatchQueryUserMemberResponse.UserState:type_name -> pb.BatchQueryUserMemberResponse.UserStateEntry
	57, // 50: pb.BatchQueryUserMemberResponse.Members:type_name -> pb.Member
	82, // 51: pb.AddMemberByGoodsRequest.Context:type_name -> pb.UserContext
	82, // 52: pb.BatchQueryUserInteractionRequest.Context:type_name -> pb.UserContext
	61, // 53: pb.BatchQueryUserInteractionResponse.Interacts:type_name -> pb.UserInteracts
	82, // 54: pb.BatchGetUserSettingByKeyRequest.Context:type_name -> pb.UserContext
	80, // 55: pb.BatchGetUserSettingByKeyResponse.Values:type_name -> pb.BatchGetUserSettingByKeyResponse.ValuesEntry
	82, // 56: pb.BatchGetUserInfoByTelephoneRequest.Context:type_name -> pb.UserContext
	2,  // 57: pb.BatchGetUserInfoByTelephoneResponse.Response:type_name -> pb.SimpleUserInfo
	82, // 58: pb.BatchQueryMemberByPlaceOrderRequest.Context:type_name -> pb.UserContext
	81, // 59: pb.BatchQueryMemberByPlaceOrderResponse.MemberEndTime:type_name -> pb.BatchQueryMemberByPlaceOrderResponse.MemberEndTimeEntry
	39, // 60: pb.UserCenter.HelloRpcBalance:input_type -> pb.HelloRpcBalanceRequest
	5,  // 61: pb.UserCenter.BatchGetUserSettings:input_type -> pb.BatchGetUserSettingsRequest
	0,  // 62: pb.UserCenter.BatchQueryUsers:input_type -> pb.BatchQueryUsersRequest
	7,  // 63: pb.UserCenter.TryGrantAccessToken:input_type -> pb.TryGrantAccessTokenRequest
	3,  // 64: pb.UserCenter.GetUserSettings:input_type -> pb.GetUserSettingsRequest
	10, // 65: pb.UserCenter.CreateUserByOfficialAccount:input_type -> pb.CreateUserByOfficialAccountRequest
	12, // 66: pb.UserCenter.UpdateUser:input_type -> pb.UpdateUserRequest
	13, // 67: pb.UserCenter.WhoShouldSendScheduleRemindSMS:input_type -> pb.WhoShouldSendScheduleRemindSMSRequest
	18, // 68: pb.UserCenter.RecentlyLoginAppOrDesktop:input_type -> pb.RecentlyLoginAppOrDesktopRequest
	15, // 69: pb.UserCenter.GetUserDeviceID:input_type -> pb.GetUserDeviceIDRequest
	17, // 70: pb.UserCenter.SetUserLoginState:input_type -> pb.SetUserLoginStateRequest
	20, // 71: pb.UserCenter.GetUserPhoneNumber:input_type -> pb.GetUserPhoneNumberRequest
	22, // 72: pb.UserCenter.GetUserOnlineState:input_type -> pb.GetUserOnlineStateRequest
	28, // 73: pb.UserCenter.BatchSetUserSettings:input_type -> pb.BatchSetUserSettingsRequest
	26, // 74: pb.UserCenter.BatchGetUserAccount:input_type -> pb.BatchGetUserAccountRequest
	30, // 75: pb.UserCenter.GetUserListPage:input_type -> pb.GetUserListPageRequest
	32, // 76: pb.UserCenter.UserOffline:input_type -> pb.UserOfflineRequest
	33, // 77: pb.UserCenter.GetUsersOnlineClient:input_type -> pb.GetUsersOnlineClientRequest
	35, // 78: pb.UserCenter.GetUsersWechatFilterCondition:input_type -> pb.GetUsersWechatFilterConditionRequest
	37, // 79: pb.UserCenter.CheckUserOperateAuth:input_type -> pb.CheckUserOperateAuthRequest
	40, // 80: pb.UserCenter.CreateComboBind:input_type -> pb.CreateComboBindRequest
	42, // 81: pb.UserCenter.CheckUserIsMember:input_type -> pb.CheckUserIsMemberRequest
	44, // 82: pb.UserCenter.GetTaskEquity:input_type -> pb.GetTaskEquityRequest
	46, // 83: pb.UserCenter.GetEquityByMember:input_type -> pb.GetEquityByMemberRequest
	48, // 84: pb.UserCenter.GetUserNickName:input_type -> pb.GetUserNickNameRequest
	50, // 85: pb.UserCenter.GetCorpUserLoginToken:input_type -> pb.GetCorpUserLoginTokenRequest
	52, // 86: pb.UserCenter.UpdateUserInfo:input_type -> pb.UpdateUserInfoRequest
	54, // 87: pb.UserCenter.BatchQueryIsOpenRemind:input_type -> pb.BatchQueryIsOpenRemindRequest
	56, // 88: pb.UserCenter.BatchQueryUserMember:input_type -> pb.BatchQueryUserMemberRequest
	59, // 89: pb.UserCenter.AddMemberByGoods:input_type -> pb.AddMemberByGoodsRequest
	62, // 90: pb.UserCenter.BatchQueryUserInteraction:input_type -> pb.BatchQueryUserInteractionRequest
	64, // 91: pb.UserCenter.BatchGetUserSettingByKey:input_type -> pb.BatchGetUserSettingByKeyRequest
	66, // 92: pb.UserCenter.BatchGetUserInfoByTelephone:input_type -> pb.BatchGetUserInfoByTelephoneRequest
	68, // 93: pb.UserCenter.BatchQueryMemberByPlaceOrder:input_type -> pb.BatchQueryMemberByPlaceOrderRequest
	84, // 94: pb.UserCenter.HelloRpcBalance:output_type -> pb.Response
	84, // 95: pb.UserCenter.BatchGetUserSettings:output_type -> pb.Response
	84, // 96: pb.UserCenter.BatchQueryUsers:output_type -> pb.Response
	84, // 97: pb.UserCenter.TryGrantAccessToken:output_type -> pb.Response
	84, // 98: pb.UserCenter.GetUserSettings:output_type -> pb.Response
	84, // 99: pb.UserCenter.CreateUserByOfficialAccount:output_type -> pb.Response
	84, // 100: pb.UserCenter.UpdateUser:output_type -> pb.Response
	84, // 101: pb.UserCenter.WhoShouldSendScheduleRemindSMS:output_type -> pb.Response
	84, // 102: pb.UserCenter.RecentlyLoginAppOrDesktop:output_type -> pb.Response
	84, // 103: pb.UserCenter.GetUserDeviceID:output_type -> pb.Response
	84, // 104: pb.UserCenter.SetUserLoginState:output_type -> pb.Response
	84, // 105: pb.UserCenter.GetUserPhoneNumber:output_type -> pb.Response
	84, // 106: pb.UserCenter.GetUserOnlineState:output_type -> pb.Response
	84, // 107: pb.UserCenter.BatchSetUserSettings:output_type -> pb.Response
	84, // 108: pb.UserCenter.BatchGetUserAccount:output_type -> pb.Response
	84, // 109: pb.UserCenter.GetUserListPage:output_type -> pb.Response
	84, // 110: pb.UserCenter.UserOffline:output_type -> pb.Response
	84, // 111: pb.UserCenter.GetUsersOnlineClient:output_type -> pb.Response
	84, // 112: pb.UserCenter.GetUsersWechatFilterCondition:output_type -> pb.Response
	84, // 113: pb.UserCenter.CheckUserOperateAuth:output_type -> pb.Response
	84, // 114: pb.UserCenter.CreateComboBind:output_type -> pb.Response
	84, // 115: pb.UserCenter.CheckUserIsMember:output_type -> pb.Response
	84, // 116: pb.UserCenter.GetTaskEquity:output_type -> pb.Response
	84, // 117: pb.UserCenter.GetEquityByMember:output_type -> pb.Response
	84, // 118: pb.UserCenter.GetUserNickName:output_type -> pb.Response
	84, // 119: pb.UserCenter.GetCorpUserLoginToken:output_type -> pb.Response
	84, // 120: pb.UserCenter.UpdateUserInfo:output_type -> pb.Response
	84, // 121: pb.UserCenter.BatchQueryIsOpenRemind:output_type -> pb.Response
	84, // 122: pb.UserCenter.BatchQueryUserMember:output_type -> pb.Response
	84, // 123: pb.UserCenter.AddMemberByGoods:output_type -> pb.Response
	84, // 124: pb.UserCenter.BatchQueryUserInteraction:output_type -> pb.Response
	84, // 125: pb.UserCenter.BatchGetUserSettingByKey:output_type -> pb.Response
	84, // 126: pb.UserCenter.BatchGetUserInfoByTelephone:output_type -> pb.Response
	84, // 127: pb.UserCenter.BatchQueryMemberByPlaceOrder:output_type -> pb.Response
	94, // [94:128] is the sub-list for method output_type
	60, // [60:94] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_usercenter_proto_init() }
func file_usercenter_proto_init() {
	if File_usercenter_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_usercenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryGrantAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TryGrantAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserByOfficialAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserByOfficialAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhoShouldSendScheduleRemindSMSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhoShouldSendScheduleRemindSMSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDeviceIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDeviceIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUserLoginStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyLoginAppOrDesktopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyLoginAppOrDesktopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPhoneNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPhoneNumberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserOnlineStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserOnlineStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccountInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSetUserSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOfflineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersOnlineClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersOnlineClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersWechatFilterConditionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersWechatFilterConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserOperateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserOperateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRpcBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComboBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateComboBindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserIsMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskEquityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskEquityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityByMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEquityByMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserNickNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserNickNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorpUserLoginTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCorpUserLoginTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryIsOpenRemindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryIsOpenRemindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUserMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUserMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberByGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberByGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInteracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUserInteractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryUserInteractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserSettingByKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserSettingByKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserInfoByTelephoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetUserInfoByTelephoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryMemberByPlaceOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryMemberByPlaceOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usercenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usercenter_proto_goTypes,
		DependencyIndexes: file_usercenter_proto_depIdxs,
		MessageInfos:      file_usercenter_proto_msgTypes,
	}.Build()
	File_usercenter_proto = out.File
	file_usercenter_proto_rawDesc = nil
	file_usercenter_proto_goTypes = nil
	file_usercenter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserCenterClient is the client API for UserCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCenterClient interface {
	HelloRpcBalance(ctx context.Context, in *HelloRpcBalanceRequest, opts ...grpc.CallOption) (*Response, error)
	BatchGetUserSettings(ctx context.Context, in *BatchGetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error)
	//BatchQueryUsers 批量查询用户信息
	BatchQueryUsers(ctx context.Context, in *BatchQueryUsersRequest, opts ...grpc.CallOption) (*Response, error)
	//TryGrantAccessToken 尝试换取用户token
	TryGrantAccessToken(ctx context.Context, in *TryGrantAccessTokenRequest, opts ...grpc.CallOption) (*Response, error)
	//GetUserSettings 获取用户设置数据
	GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error)
	//CreateUserByOfficialAccount 通过公众号创建用户
	CreateUserByOfficialAccount(ctx context.Context, in *CreateUserByOfficialAccountRequest, opts ...grpc.CallOption) (*Response, error)
	//UpdateUser 更新用户
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Response, error)
	//WhoShouldSendScheduleRemindSMS 查询哪些用户应该发送日报提醒短信
	WhoShouldSendScheduleRemindSMS(ctx context.Context, in *WhoShouldSendScheduleRemindSMSRequest, opts ...grpc.CallOption) (*Response, error)
	// RecentlyLoginAppOrDesktop 最近是否有登录过APP或PC端
	RecentlyLoginAppOrDesktop(ctx context.Context, in *RecentlyLoginAppOrDesktopRequest, opts ...grpc.CallOption) (*Response, error)
	// GetUserDeviceID 获取用户的设备信息
	GetUserDeviceID(ctx context.Context, in *GetUserDeviceIDRequest, opts ...grpc.CallOption) (*Response, error)
	// SetUserLoginState 更新用户登录数据状态
	SetUserLoginState(ctx context.Context, in *SetUserLoginStateRequest, opts ...grpc.CallOption) (*Response, error)
	//  GetUserPhoneNumber 获取用户的手机号
	GetUserPhoneNumber(ctx context.Context, in *GetUserPhoneNumberRequest, opts ...grpc.CallOption) (*Response, error)
	// GetUserOnlineState 获取用户在线状态
	GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateRequest, opts ...grpc.CallOption) (*Response, error)
	// BatchSetUserSettings 批量设置用户设置项
	BatchSetUserSettings(ctx context.Context, in *BatchSetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error)
	// BatchGetUserAccount 批量获取用户数据
	BatchGetUserAccount(ctx context.Context, in *BatchGetUserAccountRequest, opts ...grpc.CallOption) (*Response, error)
	// GetUserListPage 分页查询用户列表
	GetUserListPage(ctx context.Context, in *GetUserListPageRequest, opts ...grpc.CallOption) (*Response, error)
	// UserOffline 重置用户状态（清理token）
	UserOffline(ctx context.Context, in *UserOfflineRequest, opts ...grpc.CallOption) (*Response, error)
	// GetUsersOnlineClient 获取用户在线客户端信息
	GetUsersOnlineClient(ctx context.Context, in *GetUsersOnlineClientRequest, opts ...grpc.CallOption) (*Response, error)
	// UserOffline 获取用户在线客户端信息
	GetUsersWechatFilterCondition(ctx context.Context, in *GetUsersWechatFilterConditionRequest, opts ...grpc.CallOption) (*Response, error)
	//SetUserSettings 设置用户设置项
	//  rpc SetUserSettings(SetUserSettingsRequest) returns(Response) ;
	// 检查用户操作权限
	CheckUserOperateAuth(ctx context.Context, in *CheckUserOperateAuthRequest, opts ...grpc.CallOption) (*Response, error)
	// 创建套餐绑定对象
	CreateComboBind(ctx context.Context, in *CreateComboBindRequest, opts ...grpc.CallOption) (*Response, error)
	// 检查用户是否为会员
	CheckUserIsMember(ctx context.Context, in *CheckUserIsMemberRequest, opts ...grpc.CallOption) (*Response, error)
	// 查询事项相关权益
	GetTaskEquity(ctx context.Context, in *GetTaskEquityRequest, opts ...grpc.CallOption) (*Response, error)
	// 查询会员权益
	GetEquityByMember(ctx context.Context, in *GetEquityByMemberRequest, opts ...grpc.CallOption) (*Response, error)
	// 查询会员权益
	GetUserNickName(ctx context.Context, in *GetUserNickNameRequest, opts ...grpc.CallOption) (*Response, error)
	// 获取企微用户登陆token
	GetCorpUserLoginToken(ctx context.Context, in *GetCorpUserLoginTokenRequest, opts ...grpc.CallOption) (*Response, error)
	// 更新用户信息
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询用户是否开启提醒（公众号是否关注，是否绑定小姐姐，是否开启系统提醒）
	BatchQueryIsOpenRemind(ctx context.Context, in *BatchQueryIsOpenRemindRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询用户会员
	BatchQueryUserMember(ctx context.Context, in *BatchQueryUserMemberRequest, opts ...grpc.CallOption) (*Response, error)
	// 根据商品开通会员
	AddMemberByGoods(ctx context.Context, in *AddMemberByGoodsRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询用户协作人信息
	BatchQueryUserInteraction(ctx context.Context, in *BatchQueryUserInteractionRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询用户指定设置项的设置值
	BatchGetUserSettingByKey(ctx context.Context, in *BatchGetUserSettingByKeyRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询用户通过用户手机号信息
	BatchGetUserInfoByTelephone(ctx context.Context, in *BatchGetUserInfoByTelephoneRequest, opts ...grpc.CallOption) (*Response, error)
	// 批量查询会员下单前后信息
	BatchQueryMemberByPlaceOrder(ctx context.Context, in *BatchQueryMemberByPlaceOrderRequest, opts ...grpc.CallOption) (*Response, error)
}

type userCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCenterClient(cc grpc.ClientConnInterface) UserCenterClient {
	return &userCenterClient{cc}
}

func (c *userCenterClient) HelloRpcBalance(ctx context.Context, in *HelloRpcBalanceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/HelloRpcBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchGetUserSettings(ctx context.Context, in *BatchGetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchGetUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchQueryUsers(ctx context.Context, in *BatchQueryUsersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchQueryUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) TryGrantAccessToken(ctx context.Context, in *TryGrantAccessTokenRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/TryGrantAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserSettings(ctx context.Context, in *GetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateUserByOfficialAccount(ctx context.Context, in *CreateUserByOfficialAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/CreateUserByOfficialAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) WhoShouldSendScheduleRemindSMS(ctx context.Context, in *WhoShouldSendScheduleRemindSMSRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/WhoShouldSendScheduleRemindSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) RecentlyLoginAppOrDesktop(ctx context.Context, in *RecentlyLoginAppOrDesktopRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/RecentlyLoginAppOrDesktop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserDeviceID(ctx context.Context, in *GetUserDeviceIDRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserDeviceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) SetUserLoginState(ctx context.Context, in *SetUserLoginStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/SetUserLoginState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserPhoneNumber(ctx context.Context, in *GetUserPhoneNumberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserOnlineState(ctx context.Context, in *GetUserOnlineStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserOnlineState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchSetUserSettings(ctx context.Context, in *BatchSetUserSettingsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchSetUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchGetUserAccount(ctx context.Context, in *BatchGetUserAccountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchGetUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserListPage(ctx context.Context, in *GetUserListPageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserListPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) UserOffline(ctx context.Context, in *UserOfflineRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/UserOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUsersOnlineClient(ctx context.Context, in *GetUsersOnlineClientRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUsersOnlineClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUsersWechatFilterCondition(ctx context.Context, in *GetUsersWechatFilterConditionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUsersWechatFilterCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CheckUserOperateAuth(ctx context.Context, in *CheckUserOperateAuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/CheckUserOperateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CreateComboBind(ctx context.Context, in *CreateComboBindRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/CreateComboBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) CheckUserIsMember(ctx context.Context, in *CheckUserIsMemberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/CheckUserIsMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetTaskEquity(ctx context.Context, in *GetTaskEquityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetTaskEquity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetEquityByMember(ctx context.Context, in *GetEquityByMemberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetEquityByMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetUserNickName(ctx context.Context, in *GetUserNickNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetUserNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) GetCorpUserLoginToken(ctx context.Context, in *GetCorpUserLoginTokenRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/GetCorpUserLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchQueryIsOpenRemind(ctx context.Context, in *BatchQueryIsOpenRemindRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchQueryIsOpenRemind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchQueryUserMember(ctx context.Context, in *BatchQueryUserMemberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchQueryUserMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) AddMemberByGoods(ctx context.Context, in *AddMemberByGoodsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/AddMemberByGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchQueryUserInteraction(ctx context.Context, in *BatchQueryUserInteractionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchQueryUserInteraction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchGetUserSettingByKey(ctx context.Context, in *BatchGetUserSettingByKeyRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchGetUserSettingByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchGetUserInfoByTelephone(ctx context.Context, in *BatchGetUserInfoByTelephoneRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchGetUserInfoByTelephone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterClient) BatchQueryMemberByPlaceOrder(ctx context.Context, in *BatchQueryMemberByPlaceOrderRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserCenter/BatchQueryMemberByPlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCenterServer is the server API for UserCenter service.
type UserCenterServer interface {
	HelloRpcBalance(context.Context, *HelloRpcBalanceRequest) (*Response, error)
	BatchGetUserSettings(context.Context, *BatchGetUserSettingsRequest) (*Response, error)
	//BatchQueryUsers 批量查询用户信息
	BatchQueryUsers(context.Context, *BatchQueryUsersRequest) (*Response, error)
	//TryGrantAccessToken 尝试换取用户token
	TryGrantAccessToken(context.Context, *TryGrantAccessTokenRequest) (*Response, error)
	//GetUserSettings 获取用户设置数据
	GetUserSettings(context.Context, *GetUserSettingsRequest) (*Response, error)
	//CreateUserByOfficialAccount 通过公众号创建用户
	CreateUserByOfficialAccount(context.Context, *CreateUserByOfficialAccountRequest) (*Response, error)
	//UpdateUser 更新用户
	UpdateUser(context.Context, *UpdateUserRequest) (*Response, error)
	//WhoShouldSendScheduleRemindSMS 查询哪些用户应该发送日报提醒短信
	WhoShouldSendScheduleRemindSMS(context.Context, *WhoShouldSendScheduleRemindSMSRequest) (*Response, error)
	// RecentlyLoginAppOrDesktop 最近是否有登录过APP或PC端
	RecentlyLoginAppOrDesktop(context.Context, *RecentlyLoginAppOrDesktopRequest) (*Response, error)
	// GetUserDeviceID 获取用户的设备信息
	GetUserDeviceID(context.Context, *GetUserDeviceIDRequest) (*Response, error)
	// SetUserLoginState 更新用户登录数据状态
	SetUserLoginState(context.Context, *SetUserLoginStateRequest) (*Response, error)
	//  GetUserPhoneNumber 获取用户的手机号
	GetUserPhoneNumber(context.Context, *GetUserPhoneNumberRequest) (*Response, error)
	// GetUserOnlineState 获取用户在线状态
	GetUserOnlineState(context.Context, *GetUserOnlineStateRequest) (*Response, error)
	// BatchSetUserSettings 批量设置用户设置项
	BatchSetUserSettings(context.Context, *BatchSetUserSettingsRequest) (*Response, error)
	// BatchGetUserAccount 批量获取用户数据
	BatchGetUserAccount(context.Context, *BatchGetUserAccountRequest) (*Response, error)
	// GetUserListPage 分页查询用户列表
	GetUserListPage(context.Context, *GetUserListPageRequest) (*Response, error)
	// UserOffline 重置用户状态（清理token）
	UserOffline(context.Context, *UserOfflineRequest) (*Response, error)
	// GetUsersOnlineClient 获取用户在线客户端信息
	GetUsersOnlineClient(context.Context, *GetUsersOnlineClientRequest) (*Response, error)
	// UserOffline 获取用户在线客户端信息
	GetUsersWechatFilterCondition(context.Context, *GetUsersWechatFilterConditionRequest) (*Response, error)
	//SetUserSettings 设置用户设置项
	//  rpc SetUserSettings(SetUserSettingsRequest) returns(Response) ;
	// 检查用户操作权限
	CheckUserOperateAuth(context.Context, *CheckUserOperateAuthRequest) (*Response, error)
	// 创建套餐绑定对象
	CreateComboBind(context.Context, *CreateComboBindRequest) (*Response, error)
	// 检查用户是否为会员
	CheckUserIsMember(context.Context, *CheckUserIsMemberRequest) (*Response, error)
	// 查询事项相关权益
	GetTaskEquity(context.Context, *GetTaskEquityRequest) (*Response, error)
	// 查询会员权益
	GetEquityByMember(context.Context, *GetEquityByMemberRequest) (*Response, error)
	// 查询会员权益
	GetUserNickName(context.Context, *GetUserNickNameRequest) (*Response, error)
	// 获取企微用户登陆token
	GetCorpUserLoginToken(context.Context, *GetCorpUserLoginTokenRequest) (*Response, error)
	// 更新用户信息
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*Response, error)
	// 批量查询用户是否开启提醒（公众号是否关注，是否绑定小姐姐，是否开启系统提醒）
	BatchQueryIsOpenRemind(context.Context, *BatchQueryIsOpenRemindRequest) (*Response, error)
	// 批量查询用户会员
	BatchQueryUserMember(context.Context, *BatchQueryUserMemberRequest) (*Response, error)
	// 根据商品开通会员
	AddMemberByGoods(context.Context, *AddMemberByGoodsRequest) (*Response, error)
	// 批量查询用户协作人信息
	BatchQueryUserInteraction(context.Context, *BatchQueryUserInteractionRequest) (*Response, error)
	// 批量查询用户指定设置项的设置值
	BatchGetUserSettingByKey(context.Context, *BatchGetUserSettingByKeyRequest) (*Response, error)
	// 批量查询用户通过用户手机号信息
	BatchGetUserInfoByTelephone(context.Context, *BatchGetUserInfoByTelephoneRequest) (*Response, error)
	// 批量查询会员下单前后信息
	BatchQueryMemberByPlaceOrder(context.Context, *BatchQueryMemberByPlaceOrderRequest) (*Response, error)
}

// UnimplementedUserCenterServer can be embedded to have forward compatible implementations.
type UnimplementedUserCenterServer struct {
}

func (*UnimplementedUserCenterServer) HelloRpcBalance(context.Context, *HelloRpcBalanceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloRpcBalance not implemented")
}
func (*UnimplementedUserCenterServer) BatchGetUserSettings(context.Context, *BatchGetUserSettingsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserSettings not implemented")
}
func (*UnimplementedUserCenterServer) BatchQueryUsers(context.Context, *BatchQueryUsersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryUsers not implemented")
}
func (*UnimplementedUserCenterServer) TryGrantAccessToken(context.Context, *TryGrantAccessTokenRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryGrantAccessToken not implemented")
}
func (*UnimplementedUserCenterServer) GetUserSettings(context.Context, *GetUserSettingsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettings not implemented")
}
func (*UnimplementedUserCenterServer) CreateUserByOfficialAccount(context.Context, *CreateUserByOfficialAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserByOfficialAccount not implemented")
}
func (*UnimplementedUserCenterServer) UpdateUser(context.Context, *UpdateUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (*UnimplementedUserCenterServer) WhoShouldSendScheduleRemindSMS(context.Context, *WhoShouldSendScheduleRemindSMSRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoShouldSendScheduleRemindSMS not implemented")
}
func (*UnimplementedUserCenterServer) RecentlyLoginAppOrDesktop(context.Context, *RecentlyLoginAppOrDesktopRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentlyLoginAppOrDesktop not implemented")
}
func (*UnimplementedUserCenterServer) GetUserDeviceID(context.Context, *GetUserDeviceIDRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDeviceID not implemented")
}
func (*UnimplementedUserCenterServer) SetUserLoginState(context.Context, *SetUserLoginStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserLoginState not implemented")
}
func (*UnimplementedUserCenterServer) GetUserPhoneNumber(context.Context, *GetUserPhoneNumberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPhoneNumber not implemented")
}
func (*UnimplementedUserCenterServer) GetUserOnlineState(context.Context, *GetUserOnlineStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOnlineState not implemented")
}
func (*UnimplementedUserCenterServer) BatchSetUserSettings(context.Context, *BatchSetUserSettingsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSetUserSettings not implemented")
}
func (*UnimplementedUserCenterServer) BatchGetUserAccount(context.Context, *BatchGetUserAccountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserAccount not implemented")
}
func (*UnimplementedUserCenterServer) GetUserListPage(context.Context, *GetUserListPageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserListPage not implemented")
}
func (*UnimplementedUserCenterServer) UserOffline(context.Context, *UserOfflineRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOffline not implemented")
}
func (*UnimplementedUserCenterServer) GetUsersOnlineClient(context.Context, *GetUsersOnlineClientRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOnlineClient not implemented")
}
func (*UnimplementedUserCenterServer) GetUsersWechatFilterCondition(context.Context, *GetUsersWechatFilterConditionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersWechatFilterCondition not implemented")
}
func (*UnimplementedUserCenterServer) CheckUserOperateAuth(context.Context, *CheckUserOperateAuthRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserOperateAuth not implemented")
}
func (*UnimplementedUserCenterServer) CreateComboBind(context.Context, *CreateComboBindRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComboBind not implemented")
}
func (*UnimplementedUserCenterServer) CheckUserIsMember(context.Context, *CheckUserIsMemberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserIsMember not implemented")
}
func (*UnimplementedUserCenterServer) GetTaskEquity(context.Context, *GetTaskEquityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskEquity not implemented")
}
func (*UnimplementedUserCenterServer) GetEquityByMember(context.Context, *GetEquityByMemberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquityByMember not implemented")
}
func (*UnimplementedUserCenterServer) GetUserNickName(context.Context, *GetUserNickNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNickName not implemented")
}
func (*UnimplementedUserCenterServer) GetCorpUserLoginToken(context.Context, *GetCorpUserLoginTokenRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCorpUserLoginToken not implemented")
}
func (*UnimplementedUserCenterServer) UpdateUserInfo(context.Context, *UpdateUserInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedUserCenterServer) BatchQueryIsOpenRemind(context.Context, *BatchQueryIsOpenRemindRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryIsOpenRemind not implemented")
}
func (*UnimplementedUserCenterServer) BatchQueryUserMember(context.Context, *BatchQueryUserMemberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryUserMember not implemented")
}
func (*UnimplementedUserCenterServer) AddMemberByGoods(context.Context, *AddMemberByGoodsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberByGoods not implemented")
}
func (*UnimplementedUserCenterServer) BatchQueryUserInteraction(context.Context, *BatchQueryUserInteractionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryUserInteraction not implemented")
}
func (*UnimplementedUserCenterServer) BatchGetUserSettingByKey(context.Context, *BatchGetUserSettingByKeyRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserSettingByKey not implemented")
}
func (*UnimplementedUserCenterServer) BatchGetUserInfoByTelephone(context.Context, *BatchGetUserInfoByTelephoneRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserInfoByTelephone not implemented")
}
func (*UnimplementedUserCenterServer) BatchQueryMemberByPlaceOrder(context.Context, *BatchQueryMemberByPlaceOrderRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryMemberByPlaceOrder not implemented")
}

func RegisterUserCenterServer(s *grpc.Server, srv UserCenterServer) {
	s.RegisterService(&_UserCenter_serviceDesc, srv)
}

func _UserCenter_HelloRpcBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRpcBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).HelloRpcBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/HelloRpcBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).HelloRpcBalance(ctx, req.(*HelloRpcBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchGetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchGetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchGetUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchGetUserSettings(ctx, req.(*BatchGetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchQueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchQueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchQueryUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchQueryUsers(ctx, req.(*BatchQueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_TryGrantAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryGrantAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).TryGrantAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/TryGrantAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).TryGrantAccessToken(ctx, req.(*TryGrantAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserSettings(ctx, req.(*GetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateUserByOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserByOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateUserByOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/CreateUserByOfficialAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateUserByOfficialAccount(ctx, req.(*CreateUserByOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_WhoShouldSendScheduleRemindSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoShouldSendScheduleRemindSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).WhoShouldSendScheduleRemindSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/WhoShouldSendScheduleRemindSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).WhoShouldSendScheduleRemindSMS(ctx, req.(*WhoShouldSendScheduleRemindSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_RecentlyLoginAppOrDesktop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecentlyLoginAppOrDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).RecentlyLoginAppOrDesktop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/RecentlyLoginAppOrDesktop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).RecentlyLoginAppOrDesktop(ctx, req.(*RecentlyLoginAppOrDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserDeviceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserDeviceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserDeviceID(ctx, req.(*GetUserDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_SetUserLoginState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserLoginStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).SetUserLoginState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/SetUserLoginState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).SetUserLoginState(ctx, req.(*SetUserLoginStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserPhoneNumber(ctx, req.(*GetUserPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserOnlineState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOnlineStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserOnlineState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserOnlineState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserOnlineState(ctx, req.(*GetUserOnlineStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchSetUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSetUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchSetUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchSetUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchSetUserSettings(ctx, req.(*BatchSetUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchGetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchGetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchGetUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchGetUserAccount(ctx, req.(*BatchGetUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserListPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserListPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserListPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserListPage(ctx, req.(*GetUserListPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_UserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOfflineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/UserOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UserOffline(ctx, req.(*UserOfflineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUsersOnlineClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersOnlineClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUsersOnlineClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUsersOnlineClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUsersOnlineClient(ctx, req.(*GetUsersOnlineClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUsersWechatFilterCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersWechatFilterConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUsersWechatFilterCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUsersWechatFilterCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUsersWechatFilterCondition(ctx, req.(*GetUsersWechatFilterConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CheckUserOperateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserOperateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CheckUserOperateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/CheckUserOperateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CheckUserOperateAuth(ctx, req.(*CheckUserOperateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CreateComboBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComboBindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CreateComboBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/CreateComboBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CreateComboBind(ctx, req.(*CreateComboBindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_CheckUserIsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserIsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).CheckUserIsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/CheckUserIsMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).CheckUserIsMember(ctx, req.(*CheckUserIsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetTaskEquity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskEquityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetTaskEquity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetTaskEquity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetTaskEquity(ctx, req.(*GetTaskEquityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetEquityByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquityByMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetEquityByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetEquityByMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetEquityByMember(ctx, req.(*GetEquityByMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetUserNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNickNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetUserNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetUserNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetUserNickName(ctx, req.(*GetUserNickNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_GetCorpUserLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCorpUserLoginTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).GetCorpUserLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/GetCorpUserLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).GetCorpUserLoginToken(ctx, req.(*GetCorpUserLoginTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchQueryIsOpenRemind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryIsOpenRemindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchQueryIsOpenRemind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchQueryIsOpenRemind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchQueryIsOpenRemind(ctx, req.(*BatchQueryIsOpenRemindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchQueryUserMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryUserMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchQueryUserMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchQueryUserMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchQueryUserMember(ctx, req.(*BatchQueryUserMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_AddMemberByGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberByGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).AddMemberByGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/AddMemberByGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).AddMemberByGoods(ctx, req.(*AddMemberByGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchQueryUserInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryUserInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchQueryUserInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchQueryUserInteraction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchQueryUserInteraction(ctx, req.(*BatchQueryUserInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchGetUserSettingByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserSettingByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchGetUserSettingByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchGetUserSettingByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchGetUserSettingByKey(ctx, req.(*BatchGetUserSettingByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchGetUserInfoByTelephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserInfoByTelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchGetUserInfoByTelephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchGetUserInfoByTelephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchGetUserInfoByTelephone(ctx, req.(*BatchGetUserInfoByTelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenter_BatchQueryMemberByPlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryMemberByPlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServer).BatchQueryMemberByPlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserCenter/BatchQueryMemberByPlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServer).BatchQueryMemberByPlaceOrder(ctx, req.(*BatchQueryMemberByPlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCenter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserCenter",
	HandlerType: (*UserCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloRpcBalance",
			Handler:    _UserCenter_HelloRpcBalance_Handler,
		},
		{
			MethodName: "BatchGetUserSettings",
			Handler:    _UserCenter_BatchGetUserSettings_Handler,
		},
		{
			MethodName: "BatchQueryUsers",
			Handler:    _UserCenter_BatchQueryUsers_Handler,
		},
		{
			MethodName: "TryGrantAccessToken",
			Handler:    _UserCenter_TryGrantAccessToken_Handler,
		},
		{
			MethodName: "GetUserSettings",
			Handler:    _UserCenter_GetUserSettings_Handler,
		},
		{
			MethodName: "CreateUserByOfficialAccount",
			Handler:    _UserCenter_CreateUserByOfficialAccount_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserCenter_UpdateUser_Handler,
		},
		{
			MethodName: "WhoShouldSendScheduleRemindSMS",
			Handler:    _UserCenter_WhoShouldSendScheduleRemindSMS_Handler,
		},
		{
			MethodName: "RecentlyLoginAppOrDesktop",
			Handler:    _UserCenter_RecentlyLoginAppOrDesktop_Handler,
		},
		{
			MethodName: "GetUserDeviceID",
			Handler:    _UserCenter_GetUserDeviceID_Handler,
		},
		{
			MethodName: "SetUserLoginState",
			Handler:    _UserCenter_SetUserLoginState_Handler,
		},
		{
			MethodName: "GetUserPhoneNumber",
			Handler:    _UserCenter_GetUserPhoneNumber_Handler,
		},
		{
			MethodName: "GetUserOnlineState",
			Handler:    _UserCenter_GetUserOnlineState_Handler,
		},
		{
			MethodName: "BatchSetUserSettings",
			Handler:    _UserCenter_BatchSetUserSettings_Handler,
		},
		{
			MethodName: "BatchGetUserAccount",
			Handler:    _UserCenter_BatchGetUserAccount_Handler,
		},
		{
			MethodName: "GetUserListPage",
			Handler:    _UserCenter_GetUserListPage_Handler,
		},
		{
			MethodName: "UserOffline",
			Handler:    _UserCenter_UserOffline_Handler,
		},
		{
			MethodName: "GetUsersOnlineClient",
			Handler:    _UserCenter_GetUsersOnlineClient_Handler,
		},
		{
			MethodName: "GetUsersWechatFilterCondition",
			Handler:    _UserCenter_GetUsersWechatFilterCondition_Handler,
		},
		{
			MethodName: "CheckUserOperateAuth",
			Handler:    _UserCenter_CheckUserOperateAuth_Handler,
		},
		{
			MethodName: "CreateComboBind",
			Handler:    _UserCenter_CreateComboBind_Handler,
		},
		{
			MethodName: "CheckUserIsMember",
			Handler:    _UserCenter_CheckUserIsMember_Handler,
		},
		{
			MethodName: "GetTaskEquity",
			Handler:    _UserCenter_GetTaskEquity_Handler,
		},
		{
			MethodName: "GetEquityByMember",
			Handler:    _UserCenter_GetEquityByMember_Handler,
		},
		{
			MethodName: "GetUserNickName",
			Handler:    _UserCenter_GetUserNickName_Handler,
		},
		{
			MethodName: "GetCorpUserLoginToken",
			Handler:    _UserCenter_GetCorpUserLoginToken_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _UserCenter_UpdateUserInfo_Handler,
		},
		{
			MethodName: "BatchQueryIsOpenRemind",
			Handler:    _UserCenter_BatchQueryIsOpenRemind_Handler,
		},
		{
			MethodName: "BatchQueryUserMember",
			Handler:    _UserCenter_BatchQueryUserMember_Handler,
		},
		{
			MethodName: "AddMemberByGoods",
			Handler:    _UserCenter_AddMemberByGoods_Handler,
		},
		{
			MethodName: "BatchQueryUserInteraction",
			Handler:    _UserCenter_BatchQueryUserInteraction_Handler,
		},
		{
			MethodName: "BatchGetUserSettingByKey",
			Handler:    _UserCenter_BatchGetUserSettingByKey_Handler,
		},
		{
			MethodName: "BatchGetUserInfoByTelephone",
			Handler:    _UserCenter_BatchGetUserInfoByTelephone_Handler,
		},
		{
			MethodName: "BatchQueryMemberByPlaceOrder",
			Handler:    _UserCenter_BatchQueryMemberByPlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usercenter.proto",
}
