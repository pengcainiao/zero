// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemindAt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartRemind   []int64 `protobuf:"varint,1,rep,packed,name=StartRemind,proto3" json:"StartRemind,omitempty"` // 开始时间提醒
	EndRemind     []int64 `protobuf:"varint,2,rep,packed,name=EndRemind,proto3" json:"EndRemind,omitempty"`     // 截止时间提醒
	AloneRemind   []int64 `protobuf:"varint,3,rep,packed,name=AloneRemind,proto3" json:"AloneRemind,omitempty"` // 自定义提醒
	MaxAloneTotal int32   `protobuf:"varint,4,opt,name=MaxAloneTotal,proto3" json:"MaxAloneTotal,omitempty"`    // 最大自定义提醒数量
}

func (x *RemindAt) Reset() {
	*x = RemindAt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemindAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemindAt) ProtoMessage() {}

func (x *RemindAt) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemindAt.ProtoReflect.Descriptor instead.
func (*RemindAt) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{0}
}

func (x *RemindAt) GetStartRemind() []int64 {
	if x != nil {
		return x.StartRemind
	}
	return nil
}

func (x *RemindAt) GetEndRemind() []int64 {
	if x != nil {
		return x.EndRemind
	}
	return nil
}

func (x *RemindAt) GetAloneRemind() []int64 {
	if x != nil {
		return x.AloneRemind
	}
	return nil
}

func (x *RemindAt) GetMaxAloneTotal() int32 {
	if x != nil {
		return x.MaxAloneTotal
	}
	return 0
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string          `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`                                                                                           // 事项id
	Title            string          `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`                                                                                             // 标题
	Detail           string          `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`                                                                                           // 描述
	MatterType       int32           `protobuf:"varint,4,opt,name=MatterType,proto3" json:"MatterType,omitempty"`                                                                                  // 事项类型
	StartTime        int64           `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                                                                    // 开始时间
	StartTimeFullDay int32           `protobuf:"varint,6,opt,name=StartTimeFullDay,proto3" json:"StartTimeFullDay,omitempty"`                                                                      // 开始时间全天事项
	EndTime          int64           `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                                                                        // 结束时间
	EndTimeFullDay   int32           `protobuf:"varint,8,opt,name=EndTimeFullDay,proto3" json:"EndTimeFullDay,omitempty"`                                                                          // 结束时间全天事项
	ExecuteAddr      string          `protobuf:"bytes,9,opt,name=ExecuteAddr,proto3" json:"ExecuteAddr,omitempty"`                                                                                 // 地点
	RemindAt         *RemindAt       `protobuf:"bytes,10,opt,name=RemindAt,proto3" json:"RemindAt,omitempty"`                                                                                      // 提醒时间
	RepeatType       int32           `protobuf:"varint,11,opt,name=RepeatType,proto3" json:"RepeatType,omitempty"`                                                                                 // 重复类型
	EndRepeatAt      int64           `protobuf:"varint,12,opt,name=EndRepeatAt,proto3" json:"EndRepeatAt,omitempty"`                                                                               // 截止重复时间
	Widget           map[string]bool `protobuf:"bytes,13,rep,name=Widget,proto3" json:"Widget,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 控件
	Category         int32           `protobuf:"varint,14,opt,name=Category,proto3" json:"Category,omitempty"`                                                                                     // 事项分类
	ParentID         string          `protobuf:"bytes,15,opt,name=ParentID,proto3" json:"ParentID,omitempty"`                                                                                      // 父级id
	ProjectID        string          `protobuf:"bytes,16,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`                                                                                    // 项目id
	CreatorID        string          `protobuf:"bytes,17,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`                                                                                    // 创建人id
	CreateAt         int64           `protobuf:"varint,18,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`                                                                                     // 创建时间
	ProjectCreator   string          `protobuf:"bytes,19,opt,name=ProjectCreator,proto3" json:"ProjectCreator,omitempty"`                                                                          // 事项所属项目创建人ID
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{2}
}

func (x *GetTaskResponse) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetTaskResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *GetTaskResponse) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

func (x *GetTaskResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTaskResponse) GetStartTimeFullDay() int32 {
	if x != nil {
		return x.StartTimeFullDay
	}
	return 0
}

func (x *GetTaskResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTaskResponse) GetEndTimeFullDay() int32 {
	if x != nil {
		return x.EndTimeFullDay
	}
	return 0
}

func (x *GetTaskResponse) GetExecuteAddr() string {
	if x != nil {
		return x.ExecuteAddr
	}
	return ""
}

func (x *GetTaskResponse) GetRemindAt() *RemindAt {
	if x != nil {
		return x.RemindAt
	}
	return nil
}

func (x *GetTaskResponse) GetRepeatType() int32 {
	if x != nil {
		return x.RepeatType
	}
	return 0
}

func (x *GetTaskResponse) GetEndRepeatAt() int64 {
	if x != nil {
		return x.EndRepeatAt
	}
	return 0
}

func (x *GetTaskResponse) GetWidget() map[string]bool {
	if x != nil {
		return x.Widget
	}
	return nil
}

func (x *GetTaskResponse) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *GetTaskResponse) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *GetTaskResponse) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetTaskResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetTaskResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetTaskResponse) GetProjectCreator() string {
	if x != nil {
		return x.ProjectCreator
	}
	return ""
}

type GetTasksNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTaskID string       `protobuf:"bytes,1,opt,name=RefTaskID,proto3" json:"RefTaskID,omitempty"` // 任务ID，多个用逗号隔开
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTasksNameRequest) Reset() {
	*x = GetTasksNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksNameRequest) ProtoMessage() {}

func (x *GetTasksNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksNameRequest.ProtoReflect.Descriptor instead.
func (*GetTasksNameRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{3}
}

func (x *GetTasksNameRequest) GetRefTaskID() string {
	if x != nil {
		return x.RefTaskID
	}
	return ""
}

func (x *GetTasksNameRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTasksNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[ref_task_id]ref_task_name
}

func (x *GetTasksNameResponse) Reset() {
	*x = GetTasksNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksNameResponse) ProtoMessage() {}

func (x *GetTasksNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksNameResponse.ProtoReflect.Descriptor instead.
func (*GetTasksNameResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{4}
}

func (x *GetTasksNameResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTaskDispatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatchID string       `protobuf:"bytes,1,opt,name=DispatchID,proto3" json:"DispatchID,omitempty"` // 派发任务ID，多个用逗号隔开
	RefTaskID  string       `protobuf:"bytes,2,opt,name=RefTaskID,proto3" json:"RefTaskID,omitempty"`   // 任务ID，多个用逗号隔开
	Context    *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskDispatchRequest) Reset() {
	*x = GetTaskDispatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDispatchRequest) ProtoMessage() {}

func (x *GetTaskDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDispatchRequest.ProtoReflect.Descriptor instead.
func (*GetTaskDispatchRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskDispatchRequest) GetDispatchID() string {
	if x != nil {
		return x.DispatchID
	}
	return ""
}

func (x *GetTaskDispatchRequest) GetRefTaskID() string {
	if x != nil {
		return x.RefTaskID
	}
	return ""
}

func (x *GetTaskDispatchRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskDispatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatchID       string           `protobuf:"bytes,1,opt,name=DispatchID,proto3" json:"DispatchID,omitempty"`                                                                                                       // 派发任务id
	RefTaskID        string           `protobuf:"bytes,2,opt,name=RefTaskID,proto3" json:"RefTaskID,omitempty"`                                                                                                         // 关联事项id
	CreatorID        string           `protobuf:"bytes,3,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`                                                                                                         // 创建人id
	TakerID          string           `protobuf:"bytes,4,opt,name=TakerID,proto3" json:"TakerID,omitempty"`                                                                                                             // 承接人id
	Title            string           `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`                                                                                                                 // 事项标题
	MatterType       int32            `protobuf:"varint,6,opt,name=MatterType,proto3" json:"MatterType,omitempty"`                                                                                                      // 事项类型
	Identity         int32            `protobuf:"varint,7,opt,name=Identity,proto3" json:"Identity,omitempty"`                                                                                                          // 承接人身份
	State            int32            `protobuf:"varint,8,opt,name=State,proto3" json:"State,omitempty"`                                                                                                                // 事项状态
	PersonalState    int32            `protobuf:"varint,9,opt,name=PersonalState,proto3" json:"PersonalState,omitempty"`                                                                                                // 个人状态
	OperateState     int32            `protobuf:"varint,10,opt,name=OperateState,proto3" json:"OperateState,omitempty"`                                                                                                 // 操作状态
	StartTime        int64            `protobuf:"varint,11,opt,name=StartTime,proto3" json:"StartTime,omitempty"`                                                                                                       // 开始时间
	EndTime          int64            `protobuf:"varint,12,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                                                                                                           // 结束时间
	ExecuteAt        int64            `protobuf:"varint,13,opt,name=ExecuteAt,proto3" json:"ExecuteAt,omitempty"`                                                                                                       // 启动时间
	PersonalRemindAt map[string]int64 `protobuf:"bytes,14,rep,name=PersonalRemindAt,proto3" json:"PersonalRemindAt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 个人提醒时间
	FinishTime       int64            `protobuf:"varint,15,opt,name=FinishTime,proto3" json:"FinishTime,omitempty"`                                                                                                     // 完成时间
	CreateAt         int64            `protobuf:"varint,16,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`                                                                                                         // 创建时间
}

func (x *GetTaskDispatchResponse) Reset() {
	*x = GetTaskDispatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskDispatchResponse) ProtoMessage() {}

func (x *GetTaskDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskDispatchResponse.ProtoReflect.Descriptor instead.
func (*GetTaskDispatchResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{6}
}

func (x *GetTaskDispatchResponse) GetDispatchID() string {
	if x != nil {
		return x.DispatchID
	}
	return ""
}

func (x *GetTaskDispatchResponse) GetRefTaskID() string {
	if x != nil {
		return x.RefTaskID
	}
	return ""
}

func (x *GetTaskDispatchResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetTaskDispatchResponse) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *GetTaskDispatchResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetTaskDispatchResponse) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetIdentity() int32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetPersonalState() int32 {
	if x != nil {
		return x.PersonalState
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetOperateState() int32 {
	if x != nil {
		return x.OperateState
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetExecuteAt() int64 {
	if x != nil {
		return x.ExecuteAt
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetPersonalRemindAt() map[string]int64 {
	if x != nil {
		return x.PersonalRemindAt
	}
	return nil
}

func (x *GetTaskDispatchResponse) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *GetTaskDispatchResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type GetTaskTakersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`   // 事项id
	TakerID string       `protobuf:"bytes,2,opt,name=TakerID,proto3" json:"TakerID,omitempty"` // 承接人id
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskTakersRequest) Reset() {
	*x = GetTaskTakersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskTakersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskTakersRequest) ProtoMessage() {}

func (x *GetTaskTakersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskTakersRequest.ProtoReflect.Descriptor instead.
func (*GetTaskTakersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{7}
}

func (x *GetTaskTakersRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskTakersRequest) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *GetTaskTakersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskTakersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`                      // 事项id
	Title            string       `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`                        // 标题
	Detail           string       `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`                      // 描述
	MatterType       int32        `protobuf:"varint,4,opt,name=MatterType,proto3" json:"MatterType,omitempty"`             // 事项类型
	StartTime        int64        `protobuf:"varint,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`               // 开始时间
	StartTimeFullDay int32        `protobuf:"varint,6,opt,name=StartTimeFullDay,proto3" json:"StartTimeFullDay,omitempty"` // 开始时间全天事项
	EndTime          int64        `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`                   // 结束时间
	EndTimeFullDay   int32        `protobuf:"varint,8,opt,name=EndTimeFullDay,proto3" json:"EndTimeFullDay,omitempty"`     // 截止时间全天事项
	RemindAt         *RemindAt    `protobuf:"bytes,9,opt,name=RemindAt,proto3" json:"RemindAt,omitempty"`                  // 提醒时间
	RepeatType       int32        `protobuf:"varint,10,opt,name=RepeatType,proto3" json:"RepeatType,omitempty"`            // 重复类型
	EndRepeatAt      int64        `protobuf:"varint,11,opt,name=EndRepeatAt,proto3" json:"EndRepeatAt,omitempty"`          // 截止重复时间
	ExecuteAddr      string       `protobuf:"bytes,12,opt,name=ExecuteAddr,proto3" json:"ExecuteAddr,omitempty"`           // 地点
	CreatorID        string       `protobuf:"bytes,13,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`               // 创建人id
	Category         int32        `protobuf:"varint,14,opt,name=Category,proto3" json:"Category,omitempty"`                // 事项分类 0->主事项，1->小工具，2->子事项
	ProjectID        string       `protobuf:"bytes,15,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`               // 项目id
	Takers           []*TaskTaker `protobuf:"bytes,16,rep,name=Takers,proto3" json:"Takers,omitempty"`                     // 承接人数组
	WorkspaceID      string       `protobuf:"bytes,17,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`           // 空间ID
}

func (x *GetTaskTakersResponse) Reset() {
	*x = GetTaskTakersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskTakersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskTakersResponse) ProtoMessage() {}

func (x *GetTaskTakersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskTakersResponse.ProtoReflect.Descriptor instead.
func (*GetTaskTakersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{8}
}

func (x *GetTaskTakersResponse) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskTakersResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetTaskTakersResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *GetTaskTakersResponse) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

func (x *GetTaskTakersResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetTaskTakersResponse) GetStartTimeFullDay() int32 {
	if x != nil {
		return x.StartTimeFullDay
	}
	return 0
}

func (x *GetTaskTakersResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetTaskTakersResponse) GetEndTimeFullDay() int32 {
	if x != nil {
		return x.EndTimeFullDay
	}
	return 0
}

func (x *GetTaskTakersResponse) GetRemindAt() *RemindAt {
	if x != nil {
		return x.RemindAt
	}
	return nil
}

func (x *GetTaskTakersResponse) GetRepeatType() int32 {
	if x != nil {
		return x.RepeatType
	}
	return 0
}

func (x *GetTaskTakersResponse) GetEndRepeatAt() int64 {
	if x != nil {
		return x.EndRepeatAt
	}
	return 0
}

func (x *GetTaskTakersResponse) GetExecuteAddr() string {
	if x != nil {
		return x.ExecuteAddr
	}
	return ""
}

func (x *GetTaskTakersResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetTaskTakersResponse) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *GetTaskTakersResponse) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetTaskTakersResponse) GetTakers() []*TaskTaker {
	if x != nil {
		return x.Takers
	}
	return nil
}

func (x *GetTaskTakersResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

type TaskTaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatchID    string `protobuf:"bytes,1,opt,name=DispatchID,proto3" json:"DispatchID,omitempty"`        // 派发任务id
	TakerID       string `protobuf:"bytes,2,opt,name=TakerID,proto3" json:"TakerID,omitempty"`              // 承接人id
	InviteID      string `protobuf:"bytes,3,opt,name=InviteID,proto3" json:"InviteID,omitempty"`            // 邀请人id
	InviteType    string `protobuf:"bytes,4,opt,name=InviteType,proto3" json:"InviteType,omitempty"`        // 邀请类型
	Identity      int32  `protobuf:"varint,5,opt,name=Identity,proto3" json:"Identity,omitempty"`           // 承接人身份
	State         int32  `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`                 // 任务状态
	PersonalState int32  `protobuf:"varint,7,opt,name=PersonalState,proto3" json:"PersonalState,omitempty"` // 个人状态
	OperateState  int32  `protobuf:"varint,8,opt,name=OperateState,proto3" json:"OperateState,omitempty"`   // 操作状态
	IsAdmin       bool   `protobuf:"varint,9,opt,name=IsAdmin,proto3" json:"IsAdmin,omitempty"`             // 是否是责任人
	Status        int32  `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`              // 是否正常数据
	AcceptAt      int64  `protobuf:"varint,11,opt,name=AcceptAt,proto3" json:"AcceptAt,omitempty"`          // 接受时间
	FinishTime    int64  `protobuf:"varint,12,opt,name=FinishTime,proto3" json:"FinishTime,omitempty"`      // 完成时间
	RevokeAt      int64  `protobuf:"varint,13,opt,name=RevokeAt,proto3" json:"RevokeAt,omitempty"`          // 撤回时间
	CancelAt      int64  `protobuf:"varint,14,opt,name=CancelAt,proto3" json:"CancelAt,omitempty"`          // 取消时间
	CreateAt      int64  `protobuf:"varint,15,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`          // 创建时间
	UpdateAt      int64  `protobuf:"varint,16,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`          // 更新时间
}

func (x *TaskTaker) Reset() {
	*x = TaskTaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTaker) ProtoMessage() {}

func (x *TaskTaker) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTaker.ProtoReflect.Descriptor instead.
func (*TaskTaker) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskTaker) GetDispatchID() string {
	if x != nil {
		return x.DispatchID
	}
	return ""
}

func (x *TaskTaker) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *TaskTaker) GetInviteID() string {
	if x != nil {
		return x.InviteID
	}
	return ""
}

func (x *TaskTaker) GetInviteType() string {
	if x != nil {
		return x.InviteType
	}
	return ""
}

func (x *TaskTaker) GetIdentity() int32 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *TaskTaker) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TaskTaker) GetPersonalState() int32 {
	if x != nil {
		return x.PersonalState
	}
	return 0
}

func (x *TaskTaker) GetOperateState() int32 {
	if x != nil {
		return x.OperateState
	}
	return 0
}

func (x *TaskTaker) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *TaskTaker) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskTaker) GetAcceptAt() int64 {
	if x != nil {
		return x.AcceptAt
	}
	return 0
}

func (x *TaskTaker) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *TaskTaker) GetRevokeAt() int64 {
	if x != nil {
		return x.RevokeAt
	}
	return 0
}

func (x *TaskTaker) GetCancelAt() int64 {
	if x != nil {
		return x.CancelAt
	}
	return 0
}

func (x *TaskTaker) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *TaskTaker) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

type TaskExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"` // 事项id
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *TaskExistsRequest) Reset() {
	*x = TaskExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExistsRequest) ProtoMessage() {}

func (x *TaskExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExistsRequest.ProtoReflect.Descriptor instead.
func (*TaskExistsRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskExistsRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskExistsRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type TaskExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=Exists,proto3" json:"Exists,omitempty"` // 是否存在
}

func (x *TaskExistsResponse) Reset() {
	*x = TaskExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExistsResponse) ProtoMessage() {}

func (x *TaskExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExistsResponse.ProtoReflect.Descriptor instead.
func (*TaskExistsResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type CreateGuideTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakerID  string       `protobuf:"bytes,1,opt,name=TakerID,proto3" json:"TakerID,omitempty"`   // 承接人id
	NickName string       `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"` // 承接人昵称
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateGuideTaskRequest) Reset() {
	*x = CreateGuideTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGuideTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGuideTaskRequest) ProtoMessage() {}

func (x *CreateGuideTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGuideTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateGuideTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{12}
}

func (x *CreateGuideTaskRequest) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *CreateGuideTaskRequest) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *CreateGuideTaskRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefTaskID []string     `protobuf:"bytes,1,rep,name=RefTaskID,proto3" json:"RefTaskID,omitempty"` // 任务ID，多个用逗号隔开
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchQueryTaskRequest) Reset() {
	*x = BatchQueryTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryTaskRequest) ProtoMessage() {}

func (x *BatchQueryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryTaskRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{13}
}

func (x *BatchQueryTaskRequest) GetRefTaskID() []string {
	if x != nil {
		return x.RefTaskID
	}
	return nil
}

func (x *BatchQueryTaskRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchQueryTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*BatchQueryTaskInfo `protobuf:"bytes,1,rep,name=Tasks,proto3" json:"Tasks,omitempty"` // 事项数据
}

func (x *BatchQueryTaskResponse) Reset() {
	*x = BatchQueryTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryTaskResponse) ProtoMessage() {}

func (x *BatchQueryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryTaskResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{14}
}

func (x *BatchQueryTaskResponse) GetTasks() []*BatchQueryTaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type BatchQueryTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	MatterType int32  `protobuf:"varint,3,opt,name=MatterType,proto3" json:"MatterType,omitempty"`
	Creator    string `protobuf:"bytes,4,opt,name=Creator,proto3" json:"Creator,omitempty"`
}

func (x *BatchQueryTaskInfo) Reset() {
	*x = BatchQueryTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryTaskInfo) ProtoMessage() {}

func (x *BatchQueryTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryTaskInfo.ProtoReflect.Descriptor instead.
func (*BatchQueryTaskInfo) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{15}
}

func (x *BatchQueryTaskInfo) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *BatchQueryTaskInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BatchQueryTaskInfo) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

func (x *BatchQueryTaskInfo) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type GetTaskRelevantTakersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"` // 任务id
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskRelevantTakersRequest) Reset() {
	*x = GetTaskRelevantTakersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRelevantTakersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRelevantTakersRequest) ProtoMessage() {}

func (x *GetTaskRelevantTakersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRelevantTakersRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRelevantTakersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{16}
}

func (x *GetTaskRelevantTakersRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskRelevantTakersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskRelevantTakersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Takers []*RelevantTaker `protobuf:"bytes,1,rep,name=Takers,proto3" json:"Takers,omitempty"` // 事项相关方参与人
}

func (x *GetTaskRelevantTakersResponse) Reset() {
	*x = GetTaskRelevantTakersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRelevantTakersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRelevantTakersResponse) ProtoMessage() {}

func (x *GetTaskRelevantTakersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRelevantTakersResponse.ProtoReflect.Descriptor instead.
func (*GetTaskRelevantTakersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{17}
}

func (x *GetTaskRelevantTakersResponse) GetTakers() []*RelevantTaker {
	if x != nil {
		return x.Takers
	}
	return nil
}

type RelevantTaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TakerID  string `protobuf:"bytes,1,opt,name=TakerID,proto3" json:"TakerID,omitempty"`   // 参与人id
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"` // 参与人名称
	Avatar   string `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`     // 参与人头像
}

func (x *RelevantTaker) Reset() {
	*x = RelevantTaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelevantTaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelevantTaker) ProtoMessage() {}

func (x *RelevantTaker) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelevantTaker.ProtoReflect.Descriptor instead.
func (*RelevantTaker) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{18}
}

func (x *RelevantTaker) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *RelevantTaker) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RelevantTaker) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

type UpdateTaskRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateType string       `protobuf:"bytes,1,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"` // 更新类型
	Body       string       `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`             // 请求体，json
	Context    *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateTaskRelationRequest) Reset() {
	*x = UpdateTaskRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTaskRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRelationRequest) ProtoMessage() {}

func (x *UpdateTaskRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRelationRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTaskRelationRequest) GetUpdateType() string {
	if x != nil {
		return x.UpdateType
	}
	return ""
}

func (x *UpdateTaskRelationRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UpdateTaskRelationRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`           // 事项id
	ShareUserID string       `protobuf:"bytes,2,opt,name=ShareUserID,proto3" json:"ShareUserID,omitempty"` // 分享用户id
	Context     *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskShareRequest) Reset() {
	*x = GetTaskShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskShareRequest) ProtoMessage() {}

func (x *GetTaskShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskShareRequest.ProtoReflect.Descriptor instead.
func (*GetTaskShareRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{20}
}

func (x *GetTaskShareRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskShareRequest) GetShareUserID() string {
	if x != nil {
		return x.ShareUserID
	}
	return ""
}

func (x *GetTaskShareRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorID   string `protobuf:"bytes,1,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`     // 创建人id
	ShareUserID string `protobuf:"bytes,2,opt,name=ShareUserID,proto3" json:"ShareUserID,omitempty"` // 分享人id
	Status      bool   `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`          // 分享状态
}

func (x *GetTaskShareResponse) Reset() {
	*x = GetTaskShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskShareResponse) ProtoMessage() {}

func (x *GetTaskShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskShareResponse.ProtoReflect.Descriptor instead.
func (*GetTaskShareResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{21}
}

func (x *GetTaskShareResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetTaskShareResponse) GetShareUserID() string {
	if x != nil {
		return x.ShareUserID
	}
	return ""
}

func (x *GetTaskShareResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type CreateUserInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID        string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`                // 事项id
	TakersID      []string     `protobuf:"bytes,2,rep,name=TakersID,proto3" json:"TakersID,omitempty"`            // 参与人id
	DefIsInteract bool         `protobuf:"varint,3,opt,name=DefIsInteract,proto3" json:"DefIsInteract,omitempty"` // 默认协作人
	Context       *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateUserInteractRequest) Reset() {
	*x = CreateUserInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInteractRequest) ProtoMessage() {}

func (x *CreateUserInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInteractRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInteractRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{22}
}

func (x *CreateUserInteractRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *CreateUserInteractRequest) GetTakersID() []string {
	if x != nil {
		return x.TakersID
	}
	return nil
}

func (x *CreateUserInteractRequest) GetDefIsInteract() bool {
	if x != nil {
		return x.DefIsInteract
	}
	return false
}

func (x *CreateUserInteractRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdateUserInteractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"` // 事项id
	UserID  string       `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"` // 用户id
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateUserInteractRequest) Reset() {
	*x = UpdateUserInteractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInteractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInteractRequest) ProtoMessage() {}

func (x *UpdateUserInteractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInteractRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserInteractRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateUserInteractRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *UpdateUserInteractRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateUserInteractRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetPureTaskTakersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`   //事项ID
	TakerID string       `protobuf:"bytes,2,opt,name=TakerID,proto3" json:"TakerID,omitempty"` // 承接人id
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetPureTaskTakersRequest) Reset() {
	*x = GetPureTaskTakersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPureTaskTakersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPureTaskTakersRequest) ProtoMessage() {}

func (x *GetPureTaskTakersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPureTaskTakersRequest.ProtoReflect.Descriptor instead.
func (*GetPureTaskTakersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{24}
}

func (x *GetPureTaskTakersRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetPureTaskTakersRequest) GetTakerID() string {
	if x != nil {
		return x.TakerID
	}
	return ""
}

func (x *GetPureTaskTakersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetPureTaskTakersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Takers []*TaskTaker `protobuf:"bytes,1,rep,name=Takers,proto3" json:"Takers,omitempty"` // 承接人数组
}

func (x *GetPureTaskTakersResponse) Reset() {
	*x = GetPureTaskTakersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPureTaskTakersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPureTaskTakersResponse) ProtoMessage() {}

func (x *GetPureTaskTakersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPureTaskTakersResponse.ProtoReflect.Descriptor instead.
func (*GetPureTaskTakersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{25}
}

func (x *GetPureTaskTakersResponse) GetTakers() []*TaskTaker {
	if x != nil {
		return x.Takers
	}
	return nil
}

type CreateTaskActiveDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`  // 事项id
	Action  int64        `protobuf:"varint,2,opt,name=Action,proto3" json:"Action,omitempty"` // 操作类型
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateTaskActiveDetailRequest) Reset() {
	*x = CreateTaskActiveDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskActiveDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskActiveDetailRequest) ProtoMessage() {}

func (x *CreateTaskActiveDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskActiveDetailRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskActiveDetailRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTaskActiveDetailRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *CreateTaskActiveDetailRequest) GetAction() int64 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *CreateTaskActiveDetailRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdateProjectRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string       `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"` // 项目id
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateProjectRelationRequest) Reset() {
	*x = UpdateProjectRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRelationRequest) ProtoMessage() {}

func (x *UpdateProjectRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRelationRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateProjectRelationRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *UpdateProjectRelationRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string       `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"` // 项目id
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetProjectMembersRequest) Reset() {
	*x = GetProjectMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectMembersRequest) ProtoMessage() {}

func (x *GetProjectMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectMembersRequest.ProtoReflect.Descriptor instead.
func (*GetProjectMembersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{28}
}

func (x *GetProjectMembersRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectMembersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members     []*ProjectMember `protobuf:"bytes,1,rep,name=Members,proto3" json:"Members,omitempty"`         // 项目成员
	WorkspaceID string           `protobuf:"bytes,2,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"` // 空间ID
}

func (x *GetProjectMembersResponse) Reset() {
	*x = GetProjectMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectMembersResponse) ProtoMessage() {}

func (x *GetProjectMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectMembersResponse.ProtoReflect.Descriptor instead.
func (*GetProjectMembersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{29}
}

func (x *GetProjectMembersResponse) GetMembers() []*ProjectMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GetProjectMembersResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

type ProjectMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                      // 用户id
	InviteID         string `protobuf:"bytes,2,opt,name=InviteID,proto3" json:"InviteID,omitempty"`                  // 邀请人id
	InviteType       string `protobuf:"bytes,3,opt,name=InviteType,proto3" json:"InviteType,omitempty"`              // 邀请类型
	State            int32  `protobuf:"varint,4,opt,name=State,proto3" json:"State,omitempty"`                       // 状态
	AcceptAt         int64  `protobuf:"varint,5,opt,name=AcceptAt,proto3" json:"AcceptAt,omitempty"`                 // 接受时间
	RefuseAt         int64  `protobuf:"varint,6,opt,name=RefuseAt,proto3" json:"RefuseAt,omitempty"`                 // 拒绝时间
	CreateAt         int64  `protobuf:"varint,7,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`                 // 创建时间
	UpdateAt         int64  `protobuf:"varint,8,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`                 // 更新时间
	IsExternalMember bool   `protobuf:"varint,9,opt,name=IsExternalMember,proto3" json:"IsExternalMember,omitempty"` // 是否为外部成员
}

func (x *ProjectMember) Reset() {
	*x = ProjectMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMember) ProtoMessage() {}

func (x *ProjectMember) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMember.ProtoReflect.Descriptor instead.
func (*ProjectMember) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{30}
}

func (x *ProjectMember) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ProjectMember) GetInviteID() string {
	if x != nil {
		return x.InviteID
	}
	return ""
}

func (x *ProjectMember) GetInviteType() string {
	if x != nil {
		return x.InviteType
	}
	return ""
}

func (x *ProjectMember) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ProjectMember) GetAcceptAt() int64 {
	if x != nil {
		return x.AcceptAt
	}
	return 0
}

func (x *ProjectMember) GetRefuseAt() int64 {
	if x != nil {
		return x.RefuseAt
	}
	return 0
}

func (x *ProjectMember) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ProjectMember) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ProjectMember) GetIsExternalMember() bool {
	if x != nil {
		return x.IsExternalMember
	}
	return false
}

type GetProjectsNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string       `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"` // 项目ID，多个用逗号隔开
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetProjectsNameRequest) Reset() {
	*x = GetProjectsNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsNameRequest) ProtoMessage() {}

func (x *GetProjectsNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsNameRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsNameRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{31}
}

func (x *GetProjectsNameRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectsNameRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectsNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[project_id]project_name
}

func (x *GetProjectsNameResponse) Reset() {
	*x = GetProjectsNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsNameResponse) ProtoMessage() {}

func (x *GetProjectsNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsNameResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsNameResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{32}
}

func (x *GetProjectsNameResponse) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetUsersMorningAndEveningProgramRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string       `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Type    int32        `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUsersMorningAndEveningProgramRequest) Reset() {
	*x = GetUsersMorningAndEveningProgramRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersMorningAndEveningProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersMorningAndEveningProgramRequest) ProtoMessage() {}

func (x *GetUsersMorningAndEveningProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersMorningAndEveningProgramRequest.ProtoReflect.Descriptor instead.
func (*GetUsersMorningAndEveningProgramRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{33}
}

func (x *GetUsersMorningAndEveningProgramRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUsersMorningAndEveningProgramRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetUsersMorningAndEveningProgramRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUsersMorningAndEveningProgramResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completed  int32    `protobuf:"varint,1,opt,name=Completed,proto3" json:"Completed,omitempty"`
	Incomplete int32    `protobuf:"varint,2,opt,name=Incomplete,proto3" json:"Incomplete,omitempty"`
	Id         string   `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	Titles     []string `protobuf:"bytes,4,rep,name=Titles,proto3" json:"Titles,omitempty"`
}

func (x *GetUsersMorningAndEveningProgramResponse) Reset() {
	*x = GetUsersMorningAndEveningProgramResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersMorningAndEveningProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersMorningAndEveningProgramResponse) ProtoMessage() {}

func (x *GetUsersMorningAndEveningProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersMorningAndEveningProgramResponse.ProtoReflect.Descriptor instead.
func (*GetUsersMorningAndEveningProgramResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{34}
}

func (x *GetUsersMorningAndEveningProgramResponse) GetCompleted() int32 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *GetUsersMorningAndEveningProgramResponse) GetIncomplete() int32 {
	if x != nil {
		return x.Incomplete
	}
	return 0
}

func (x *GetUsersMorningAndEveningProgramResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUsersMorningAndEveningProgramResponse) GetTitles() []string {
	if x != nil {
		return x.Titles
	}
	return nil
}

type TaskResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID     string    `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`          // 事项id
	Title      string    `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`            // 标题
	Detail     string    `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`          // 描述
	MatterType int32     `protobuf:"varint,4,opt,name=MatterType,proto3" json:"MatterType,omitempty"` // 事项类型
	Category   int32     `protobuf:"varint,5,opt,name=Category,proto3" json:"Category,omitempty"`     // 事项分类
	ParentID   string    `protobuf:"bytes,6,opt,name=ParentID,proto3" json:"ParentID,omitempty"`      // 父级id
	ProjectID  string    `protobuf:"bytes,7,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`    // 项目id
	CreatorID  string    `protobuf:"bytes,8,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`    // 创建人id
	RemindAt   *RemindAt `protobuf:"bytes,9,opt,name=RemindAt,proto3" json:"RemindAt,omitempty"`      // 提醒时间
}

func (x *TaskResp) Reset() {
	*x = TaskResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResp) ProtoMessage() {}

func (x *TaskResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResp.ProtoReflect.Descriptor instead.
func (*TaskResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{35}
}

func (x *TaskResp) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskResp) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskResp) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *TaskResp) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

func (x *TaskResp) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *TaskResp) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *TaskResp) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *TaskResp) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TaskResp) GetRemindAt() *RemindAt {
	if x != nil {
		return x.RemindAt
	}
	return nil
}

type TaskConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	MaxTakerTotal       int32  `protobuf:"varint,2,opt,name=MaxTakerTotal,proto3" json:"MaxTakerTotal,omitempty"`
	Category            int32  `protobuf:"varint,3,opt,name=Category,proto3" json:"Category,omitempty"`
	ParentId            string `protobuf:"bytes,4,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	Sort                int32  `protobuf:"varint,5,opt,name=Sort,proto3" json:"Sort,omitempty"`
	IsCheckbox          int32  `protobuf:"varint,6,opt,name=IsCheckbox,proto3" json:"IsCheckbox,omitempty"`
	RefMeetingId        string `protobuf:"bytes,7,opt,name=RefMeetingId,proto3" json:"RefMeetingId,omitempty"`
	ProjectId           string `protobuf:"bytes,8,opt,name=ProjectId,proto3" json:"ProjectId,omitempty"`
	ImportProjectUserId string `protobuf:"bytes,9,opt,name=ImportProjectUserId,proto3" json:"ImportProjectUserId,omitempty"`
	ImportProjectAt     string `protobuf:"bytes,10,opt,name=ImportProjectAt,proto3" json:"ImportProjectAt,omitempty"`
	Score               int32  `protobuf:"varint,11,opt,name=Score,proto3" json:"Score,omitempty"`
	LastActiveAt        int32  `protobuf:"varint,12,opt,name=LastActiveAt,proto3" json:"LastActiveAt,omitempty"`
	RepeatChangeId      int32  `protobuf:"varint,13,opt,name=RepeatChangeId,proto3" json:"RepeatChangeId,omitempty"`
	CreatorId           string `protobuf:"bytes,14,opt,name=CreatorId,proto3" json:"CreatorId,omitempty"`
}

func (x *TaskConfigResp) Reset() {
	*x = TaskConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfigResp) ProtoMessage() {}

func (x *TaskConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfigResp.ProtoReflect.Descriptor instead.
func (*TaskConfigResp) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{36}
}

func (x *TaskConfigResp) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TaskConfigResp) GetMaxTakerTotal() int32 {
	if x != nil {
		return x.MaxTakerTotal
	}
	return 0
}

func (x *TaskConfigResp) GetCategory() int32 {
	if x != nil {
		return x.Category
	}
	return 0
}

func (x *TaskConfigResp) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *TaskConfigResp) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TaskConfigResp) GetIsCheckbox() int32 {
	if x != nil {
		return x.IsCheckbox
	}
	return 0
}

func (x *TaskConfigResp) GetRefMeetingId() string {
	if x != nil {
		return x.RefMeetingId
	}
	return ""
}

func (x *TaskConfigResp) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TaskConfigResp) GetImportProjectUserId() string {
	if x != nil {
		return x.ImportProjectUserId
	}
	return ""
}

func (x *TaskConfigResp) GetImportProjectAt() string {
	if x != nil {
		return x.ImportProjectAt
	}
	return ""
}

func (x *TaskConfigResp) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TaskConfigResp) GetLastActiveAt() int32 {
	if x != nil {
		return x.LastActiveAt
	}
	return 0
}

func (x *TaskConfigResp) GetRepeatChangeId() int32 {
	if x != nil {
		return x.RepeatChangeId
	}
	return 0
}

func (x *TaskConfigResp) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

type GetTaskWithParentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatterId string       `protobuf:"bytes,1,opt,name=MatterId,proto3" json:"MatterId,omitempty"`
	UserID   string       `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskWithParentRequest) Reset() {
	*x = GetTaskWithParentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskWithParentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskWithParentRequest) ProtoMessage() {}

func (x *GetTaskWithParentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskWithParentRequest.ProtoReflect.Descriptor instead.
func (*GetTaskWithParentRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{37}
}

func (x *GetTaskWithParentRequest) GetMatterId() string {
	if x != nil {
		return x.MatterId
	}
	return ""
}

func (x *GetTaskWithParentRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetTaskWithParentRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskWithParentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentTaskConfigs []*TaskConfigResp `protobuf:"bytes,1,rep,name=ParentTaskConfigs,proto3" json:"ParentTaskConfigs,omitempty"`
	TaskResp          *TaskResp         `protobuf:"bytes,2,opt,name=TaskResp,proto3" json:"TaskResp,omitempty"`
}

func (x *GetTaskWithParentResponse) Reset() {
	*x = GetTaskWithParentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskWithParentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskWithParentResponse) ProtoMessage() {}

func (x *GetTaskWithParentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskWithParentResponse.ProtoReflect.Descriptor instead.
func (*GetTaskWithParentResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{38}
}

func (x *GetTaskWithParentResponse) GetParentTaskConfigs() []*TaskConfigResp {
	if x != nil {
		return x.ParentTaskConfigs
	}
	return nil
}

func (x *GetTaskWithParentResponse) GetTaskResp() *TaskResp {
	if x != nil {
		return x.TaskResp
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	ProjectID string       `protobuf:"bytes,2,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{39}
}

func (x *GetProjectRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetProjectRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID   string `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=ProjectName,proto3" json:"ProjectName,omitempty"`
	ProjectDesc string `protobuf:"bytes,3,opt,name=ProjectDesc,proto3" json:"ProjectDesc,omitempty"`
	TargetTime  int64  `protobuf:"varint,4,opt,name=TargetTime,proto3" json:"TargetTime,omitempty"`
	CreatorID   string `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CreateAt    int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	IsArchive   bool   `protobuf:"varint,7,opt,name=IsArchive,proto3" json:"IsArchive,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{40}
}

func (x *GetProjectResponse) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectResponse) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *GetProjectResponse) GetProjectDesc() string {
	if x != nil {
		return x.ProjectDesc
	}
	return ""
}

func (x *GetProjectResponse) GetTargetTime() int64 {
	if x != nil {
		return x.TargetTime
	}
	return 0
}

func (x *GetProjectResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetProjectResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetProjectResponse) GetIsArchive() bool {
	if x != nil {
		return x.IsArchive
	}
	return false
}

type GetWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	WorkspaceID string       `protobuf:"bytes,2,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
}

func (x *GetWorkspaceRequest) Reset() {
	*x = GetWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceRequest) ProtoMessage() {}

func (x *GetWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{41}
}

func (x *GetWorkspaceRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetWorkspaceRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

type GetWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"` // 空间id
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`               // 空间名称
	Level       int32  `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`            // 空间级别
	State       int32  `protobuf:"varint,4,opt,name=State,proto3" json:"State,omitempty"`            // 状态
	CreatorID   string `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`     // 创建人
	CreateAt    int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`      // 创建时间
	WsDesc      string `protobuf:"bytes,7,opt,name=WsDesc,proto3" json:"WsDesc,omitempty"`           // 空间描述
}

func (x *GetWorkspaceResponse) Reset() {
	*x = GetWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceResponse) ProtoMessage() {}

func (x *GetWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{42}
}

func (x *GetWorkspaceResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetWorkspaceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWorkspaceResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetWorkspaceResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetWorkspaceResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetWorkspaceResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetWorkspaceResponse) GetWsDesc() string {
	if x != nil {
		return x.WsDesc
	}
	return ""
}

type GetWorkspaceMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	WorkspaceID string       `protobuf:"bytes,2,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
}

func (x *GetWorkspaceMembersRequest) Reset() {
	*x = GetWorkspaceMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceMembersRequest) ProtoMessage() {}

func (x *GetWorkspaceMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceMembersRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceMembersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{43}
}

func (x *GetWorkspaceMembersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetWorkspaceMembersRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

type GetWorkspaceMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string             `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"` // 空间id
	Name        string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`               // 空间名称
	Level       int32              `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`            // 空间级别
	State       int32              `protobuf:"varint,4,opt,name=State,proto3" json:"State,omitempty"`            // 状态
	CreatorID   string             `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`     // 创建人
	CreateAt    int64              `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`      // 创建时间
	Members     []*WorkspaceMember `protobuf:"bytes,7,rep,name=Members,proto3" json:"Members,omitempty"`         // 空间成员
}

func (x *GetWorkspaceMembersResponse) Reset() {
	*x = GetWorkspaceMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceMembersResponse) ProtoMessage() {}

func (x *GetWorkspaceMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceMembersResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceMembersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{44}
}

func (x *GetWorkspaceMembersResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetWorkspaceMembersResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWorkspaceMembersResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetWorkspaceMembersResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetWorkspaceMembersResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetWorkspaceMembersResponse) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GetWorkspaceMembersResponse) GetMembers() []*WorkspaceMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type WorkspaceMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                         // 成员id
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`                 // 用户id
	InviteID      string `protobuf:"bytes,3,opt,name=InviteID,proto3" json:"InviteID,omitempty"`             // 邀请人id
	InviteType    string `protobuf:"bytes,4,opt,name=InviteType,proto3" json:"InviteType,omitempty"`         // 邀请类型
	Identify      int32  `protobuf:"varint,5,opt,name=Identify,proto3" json:"Identify,omitempty"`            // 身份
	State         int32  `protobuf:"varint,6,opt,name=State,proto3" json:"State,omitempty"`                  // 状态
	AcceptAt      int64  `protobuf:"varint,7,opt,name=AcceptAt,proto3" json:"AcceptAt,omitempty"`            // 接受时间
	RefuseAt      int64  `protobuf:"varint,8,opt,name=RefuseAt,proto3" json:"RefuseAt,omitempty"`            // 拒绝时间
	RevokeAt      int64  `protobuf:"varint,9,opt,name=RevokeAt,proto3" json:"RevokeAt,omitempty"`            // 移除时间
	ExitAt        int64  `protobuf:"varint,10,opt,name=ExitAt,proto3" json:"ExitAt,omitempty"`               // 退出时间
	CreateAt      int64  `protobuf:"varint,11,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`           // 创建时间
	MemberType    int32  `protobuf:"varint,12,opt,name=MemberType,proto3" json:"MemberType,omitempty"`       // 成员类型
	ApprovalAt    int64  `protobuf:"varint,13,opt,name=ApprovalAt,proto3" json:"ApprovalAt,omitempty"`       // 审批时间
	ApprovalState int32  `protobuf:"varint,14,opt,name=ApprovalState,proto3" json:"ApprovalState,omitempty"` // 审批状态
}

func (x *WorkspaceMember) Reset() {
	*x = WorkspaceMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceMember) ProtoMessage() {}

func (x *WorkspaceMember) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceMember.ProtoReflect.Descriptor instead.
func (*WorkspaceMember) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{45}
}

func (x *WorkspaceMember) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WorkspaceMember) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *WorkspaceMember) GetInviteID() string {
	if x != nil {
		return x.InviteID
	}
	return ""
}

func (x *WorkspaceMember) GetInviteType() string {
	if x != nil {
		return x.InviteType
	}
	return ""
}

func (x *WorkspaceMember) GetIdentify() int32 {
	if x != nil {
		return x.Identify
	}
	return 0
}

func (x *WorkspaceMember) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *WorkspaceMember) GetAcceptAt() int64 {
	if x != nil {
		return x.AcceptAt
	}
	return 0
}

func (x *WorkspaceMember) GetRefuseAt() int64 {
	if x != nil {
		return x.RefuseAt
	}
	return 0
}

func (x *WorkspaceMember) GetRevokeAt() int64 {
	if x != nil {
		return x.RevokeAt
	}
	return 0
}

func (x *WorkspaceMember) GetExitAt() int64 {
	if x != nil {
		return x.ExitAt
	}
	return 0
}

func (x *WorkspaceMember) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *WorkspaceMember) GetMemberType() int32 {
	if x != nil {
		return x.MemberType
	}
	return 0
}

func (x *WorkspaceMember) GetApprovalAt() int64 {
	if x != nil {
		return x.ApprovalAt
	}
	return 0
}

func (x *WorkspaceMember) GetApprovalState() int32 {
	if x != nil {
		return x.ApprovalState
	}
	return 0
}

type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`               // 分布式ID
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`           // 名称
	CreatorID string `protobuf:"bytes,3,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"` // 空间创建人id
	WsType    int32  `protobuf:"varint,4,opt,name=WsType,proto3" json:"WsType,omitempty"`      // '1 空间  2 项目集',
	Level     int32  `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`        // '1 普通 2 专业版本',
	CreateAt  int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`  // 创建时间
	State     int32  `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`        // '1 可用 2 不可用'
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{46}
}

func (x *Workspace) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Workspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workspace) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *Workspace) GetWsType() int32 {
	if x != nil {
		return x.WsType
	}
	return 0
}

func (x *Workspace) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Workspace) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Workspace) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type GetWorkspaceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string       `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`  // 用户id
	WsType  int32        `protobuf:"varint,2,opt,name=WsType,proto3" json:"WsType,omitempty"` // 空间类型
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetWorkspaceListRequest) Reset() {
	*x = GetWorkspaceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceListRequest) ProtoMessage() {}

func (x *GetWorkspaceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceListRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceListRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{47}
}

func (x *GetWorkspaceListRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetWorkspaceListRequest) GetWsType() int32 {
	if x != nil {
		return x.WsType
	}
	return 0
}

func (x *GetWorkspaceListRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetWorkspaceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces []*Workspace `protobuf:"bytes,1,rep,name=Workspaces,proto3" json:"Workspaces,omitempty"`
}

func (x *GetWorkspaceListResponse) Reset() {
	*x = GetWorkspaceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceListResponse) ProtoMessage() {}

func (x *GetWorkspaceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceListResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceListResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{48}
}

func (x *GetWorkspaceListResponse) GetWorkspaces() []*Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type TaskChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                  // 事项ID
	CreatorID  string `protobuf:"bytes,2,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`    // 创建者ID
	MatterType int32  `protobuf:"varint,3,opt,name=MatterType,proto3" json:"MatterType,omitempty"` // 事项类型
}

func (x *TaskChildren) Reset() {
	*x = TaskChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskChildren) ProtoMessage() {}

func (x *TaskChildren) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskChildren.ProtoReflect.Descriptor instead.
func (*TaskChildren) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{49}
}

func (x *TaskChildren) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TaskChildren) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TaskChildren) GetMatterType() int32 {
	if x != nil {
		return x.MatterType
	}
	return 0
}

type GetTaskChildrenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID   string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`     // 事项ID
	ParentID string       `protobuf:"bytes,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"` // 父事项ID
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskChildrenRequest) Reset() {
	*x = GetTaskChildrenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskChildrenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskChildrenRequest) ProtoMessage() {}

func (x *GetTaskChildrenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskChildrenRequest.ProtoReflect.Descriptor instead.
func (*GetTaskChildrenRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{50}
}

func (x *GetTaskChildrenRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskChildrenRequest) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *GetTaskChildrenRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskChildrenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskChildren []*TaskChildren `protobuf:"bytes,1,rep,name=TaskChildren,proto3" json:"TaskChildren,omitempty"`
}

func (x *GetTaskChildrenResponse) Reset() {
	*x = GetTaskChildrenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskChildrenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskChildrenResponse) ProtoMessage() {}

func (x *GetTaskChildrenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskChildrenResponse.ProtoReflect.Descriptor instead.
func (*GetTaskChildrenResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{51}
}

func (x *GetTaskChildrenResponse) GetTaskChildren() []*TaskChildren {
	if x != nil {
		return x.TaskChildren
	}
	return nil
}

type GetWorkspaceFileSpaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string       `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetWorkspaceFileSpaceRequest) Reset() {
	*x = GetWorkspaceFileSpaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceFileSpaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceFileSpaceRequest) ProtoMessage() {}

func (x *GetWorkspaceFileSpaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceFileSpaceRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceFileSpaceRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{52}
}

func (x *GetWorkspaceFileSpaceRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetWorkspaceFileSpaceRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetWorkspaceFileSpaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSpace         int64 `protobuf:"varint,1,opt,name=TotalSpace,proto3" json:"TotalSpace,omitempty"`                 // 总空间
	AvailableSpace     int64 `protobuf:"varint,2,opt,name=AvailableSpace,proto3" json:"AvailableSpace,omitempty"`         // 可用空间
	ProcessFileSpace   int64 `protobuf:"varint,3,opt,name=ProcessFileSpace,proto3" json:"ProcessFileSpace,omitempty"`     //  过程文件空间
	KnowledgeBaseSpace int64 `protobuf:"varint,4,opt,name=KnowledgeBaseSpace,proto3" json:"KnowledgeBaseSpace,omitempty"` // 知识库空间
	OtherSpace         int64 `protobuf:"varint,5,opt,name=OtherSpace,proto3" json:"OtherSpace,omitempty"`                 // 其他文件空间
}

func (x *GetWorkspaceFileSpaceResponse) Reset() {
	*x = GetWorkspaceFileSpaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceFileSpaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceFileSpaceResponse) ProtoMessage() {}

func (x *GetWorkspaceFileSpaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceFileSpaceResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceFileSpaceResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{53}
}

func (x *GetWorkspaceFileSpaceResponse) GetTotalSpace() int64 {
	if x != nil {
		return x.TotalSpace
	}
	return 0
}

func (x *GetWorkspaceFileSpaceResponse) GetAvailableSpace() int64 {
	if x != nil {
		return x.AvailableSpace
	}
	return 0
}

func (x *GetWorkspaceFileSpaceResponse) GetProcessFileSpace() int64 {
	if x != nil {
		return x.ProcessFileSpace
	}
	return 0
}

func (x *GetWorkspaceFileSpaceResponse) GetKnowledgeBaseSpace() int64 {
	if x != nil {
		return x.KnowledgeBaseSpace
	}
	return 0
}

func (x *GetWorkspaceFileSpaceResponse) GetOtherSpace() int64 {
	if x != nil {
		return x.OtherSpace
	}
	return 0
}

type GetWorkspaceBindProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string       `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetWorkspaceBindProjectRequest) Reset() {
	*x = GetWorkspaceBindProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceBindProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceBindProjectRequest) ProtoMessage() {}

func (x *GetWorkspaceBindProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceBindProjectRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceBindProjectRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{54}
}

func (x *GetWorkspaceBindProjectRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetWorkspaceBindProjectRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetWorkspaceBindProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIDs []string `protobuf:"bytes,1,rep,name=ProjectIDs,proto3" json:"ProjectIDs,omitempty"`
}

func (x *GetWorkspaceBindProjectResponse) Reset() {
	*x = GetWorkspaceBindProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceBindProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceBindProjectResponse) ProtoMessage() {}

func (x *GetWorkspaceBindProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceBindProjectResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceBindProjectResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{55}
}

func (x *GetWorkspaceBindProjectResponse) GetProjectIDs() []string {
	if x != nil {
		return x.ProjectIDs
	}
	return nil
}

type GetWorkspaceExternalMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string       `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetWorkspaceExternalMemberRequest) Reset() {
	*x = GetWorkspaceExternalMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceExternalMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceExternalMemberRequest) ProtoMessage() {}

func (x *GetWorkspaceExternalMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceExternalMemberRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceExternalMemberRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{56}
}

func (x *GetWorkspaceExternalMemberRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetWorkspaceExternalMemberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetWorkspaceExternalMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalMemberIDs []string `protobuf:"bytes,1,rep,name=ExternalMemberIDs,proto3" json:"ExternalMemberIDs,omitempty"`
}

func (x *GetWorkspaceExternalMemberResponse) Reset() {
	*x = GetWorkspaceExternalMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceExternalMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceExternalMemberResponse) ProtoMessage() {}

func (x *GetWorkspaceExternalMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceExternalMemberResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceExternalMemberResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{57}
}

func (x *GetWorkspaceExternalMemberResponse) GetExternalMemberIDs() []string {
	if x != nil {
		return x.ExternalMemberIDs
	}
	return nil
}

type ExpireEquityUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectLimitNum   int64        `protobuf:"varint,1,opt,name=ProjectLimitNum,proto3" json:"ProjectLimitNum,omitempty"`     // 项目限制数量
	ProjectState      int32        `protobuf:"varint,2,opt,name=ProjectState,proto3" json:"ProjectState,omitempty"`           // 项目要变更的状态
	UserID            string       `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`                        // 用户ID
	WorkspaceLimitNum int64        `protobuf:"varint,4,opt,name=WorkspaceLimitNum,proto3" json:"WorkspaceLimitNum,omitempty"` // 空间限制数量
	WorkspaceState    int32        `protobuf:"varint,5,opt,name=WorkspaceState,proto3" json:"WorkspaceState,omitempty"`       // 空间变更的状态
	Context           *UserContext `protobuf:"bytes,6,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *ExpireEquityUpdateRequest) Reset() {
	*x = ExpireEquityUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireEquityUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireEquityUpdateRequest) ProtoMessage() {}

func (x *ExpireEquityUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireEquityUpdateRequest.ProtoReflect.Descriptor instead.
func (*ExpireEquityUpdateRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{58}
}

func (x *ExpireEquityUpdateRequest) GetProjectLimitNum() int64 {
	if x != nil {
		return x.ProjectLimitNum
	}
	return 0
}

func (x *ExpireEquityUpdateRequest) GetProjectState() int32 {
	if x != nil {
		return x.ProjectState
	}
	return 0
}

func (x *ExpireEquityUpdateRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ExpireEquityUpdateRequest) GetWorkspaceLimitNum() int64 {
	if x != nil {
		return x.WorkspaceLimitNum
	}
	return 0
}

func (x *ExpireEquityUpdateRequest) GetWorkspaceState() int32 {
	if x != nil {
		return x.WorkspaceState
	}
	return 0
}

func (x *ExpireEquityUpdateRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type ExpireEquityUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *ExpireEquityUpdateResponse) Reset() {
	*x = ExpireEquityUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireEquityUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireEquityUpdateResponse) ProtoMessage() {}

func (x *ExpireEquityUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireEquityUpdateResponse.ProtoReflect.Descriptor instead.
func (*ExpireEquityUpdateResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{59}
}

func (x *ExpireEquityUpdateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateWorkspaceLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string       `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	ExpireAt    int64        `protobuf:"varint,2,opt,name=ExpireAt,proto3" json:"ExpireAt,omitempty"`
	Level       int64        `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	Context     *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateWorkspaceLevelRequest) Reset() {
	*x = UpdateWorkspaceLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkspaceLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceLevelRequest) ProtoMessage() {}

func (x *UpdateWorkspaceLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceLevelRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceLevelRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateWorkspaceLevelRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *UpdateWorkspaceLevelRequest) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *UpdateWorkspaceLevelRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *UpdateWorkspaceLevelRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdateWorkspaceLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *UpdateWorkspaceLevelResponse) Reset() {
	*x = UpdateWorkspaceLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkspaceLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkspaceLevelResponse) ProtoMessage() {}

func (x *UpdateWorkspaceLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkspaceLevelResponse.ProtoReflect.Descriptor instead.
func (*UpdateWorkspaceLevelResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateWorkspaceLevelResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetTaskWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskWorkspaceRequest) Reset() {
	*x = GetTaskWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskWorkspaceRequest) ProtoMessage() {}

func (x *GetTaskWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetTaskWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{62}
}

func (x *GetTaskWorkspaceRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetTaskWorkspaceRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID         string `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	CreatorID           string `protobuf:"bytes,2,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	WsType              int64  `protobuf:"varint,3,opt,name=WsType,proto3" json:"WsType,omitempty"`
	Level               int64  `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	ExpiredAt           int64  `protobuf:"varint,5,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	TaskCreatorID       string `protobuf:"bytes,6,opt,name=TaskCreatorID,proto3" json:"TaskCreatorID,omitempty"`
	TaskParentCreatorID string `protobuf:"bytes,7,opt,name=TaskParentCreatorID,proto3" json:"TaskParentCreatorID,omitempty"`
}

func (x *GetTaskWorkspaceResponse) Reset() {
	*x = GetTaskWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskWorkspaceResponse) ProtoMessage() {}

func (x *GetTaskWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetTaskWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{63}
}

func (x *GetTaskWorkspaceResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetTaskWorkspaceResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetTaskWorkspaceResponse) GetWsType() int64 {
	if x != nil {
		return x.WsType
	}
	return 0
}

func (x *GetTaskWorkspaceResponse) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetTaskWorkspaceResponse) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GetTaskWorkspaceResponse) GetTaskCreatorID() string {
	if x != nil {
		return x.TaskCreatorID
	}
	return ""
}

func (x *GetTaskWorkspaceResponse) GetTaskParentCreatorID() string {
	if x != nil {
		return x.TaskParentCreatorID
	}
	return ""
}

type GetProjectWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectID string       `protobuf:"bytes,1,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	Context   *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetProjectWorkspaceRequest) Reset() {
	*x = GetProjectWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectWorkspaceRequest) ProtoMessage() {}

func (x *GetProjectWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*GetProjectWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{64}
}

func (x *GetProjectWorkspaceRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetProjectWorkspaceRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetProjectWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID      string `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	CreatorID        string `protobuf:"bytes,2,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	WsType           int64  `protobuf:"varint,3,opt,name=WsType,proto3" json:"WsType,omitempty"`
	Level            int64  `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	ExpiredAt        int64  `protobuf:"varint,5,opt,name=ExpiredAt,proto3" json:"ExpiredAt,omitempty"`
	ProjectCreatorID string `protobuf:"bytes,6,opt,name=ProjectCreatorID,proto3" json:"ProjectCreatorID,omitempty"`
}

func (x *GetProjectWorkspaceResponse) Reset() {
	*x = GetProjectWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectWorkspaceResponse) ProtoMessage() {}

func (x *GetProjectWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*GetProjectWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{65}
}

func (x *GetProjectWorkspaceResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetProjectWorkspaceResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetProjectWorkspaceResponse) GetWsType() int64 {
	if x != nil {
		return x.WsType
	}
	return 0
}

func (x *GetProjectWorkspaceResponse) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetProjectWorkspaceResponse) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *GetProjectWorkspaceResponse) GetProjectCreatorID() string {
	if x != nil {
		return x.ProjectCreatorID
	}
	return ""
}

type AddMemberEquityUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskTakerNum int64        `protobuf:"varint,1,opt,name=TaskTakerNum,proto3" json:"TaskTakerNum,omitempty"`
	WorkspaceNum int64        `protobuf:"varint,2,opt,name=WorkspaceNum,proto3" json:"WorkspaceNum,omitempty"`
	ProjectNum   int64        `protobuf:"varint,3,opt,name=ProjectNum,proto3" json:"ProjectNum,omitempty"`
	Context      *UserContext `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *AddMemberEquityUpdateRequest) Reset() {
	*x = AddMemberEquityUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberEquityUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberEquityUpdateRequest) ProtoMessage() {}

func (x *AddMemberEquityUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberEquityUpdateRequest.ProtoReflect.Descriptor instead.
func (*AddMemberEquityUpdateRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{66}
}

func (x *AddMemberEquityUpdateRequest) GetTaskTakerNum() int64 {
	if x != nil {
		return x.TaskTakerNum
	}
	return 0
}

func (x *AddMemberEquityUpdateRequest) GetWorkspaceNum() int64 {
	if x != nil {
		return x.WorkspaceNum
	}
	return 0
}

func (x *AddMemberEquityUpdateRequest) GetProjectNum() int64 {
	if x != nil {
		return x.ProjectNum
	}
	return 0
}

func (x *AddMemberEquityUpdateRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type AddMemberEquityUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AddMemberEquityUpdateResponse) Reset() {
	*x = AddMemberEquityUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMemberEquityUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMemberEquityUpdateResponse) ProtoMessage() {}

func (x *AddMemberEquityUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMemberEquityUpdateResponse.ProtoReflect.Descriptor instead.
func (*AddMemberEquityUpdateResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{67}
}

func (x *AddMemberEquityUpdateResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type BatchGetWorkspaceDirectoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceDirectoryID []string     `protobuf:"bytes,1,rep,name=WorkspaceDirectoryID,proto3" json:"WorkspaceDirectoryID,omitempty"`
	Context              *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetWorkspaceDirectoryRequest) Reset() {
	*x = BatchGetWorkspaceDirectoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWorkspaceDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWorkspaceDirectoryRequest) ProtoMessage() {}

func (x *BatchGetWorkspaceDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWorkspaceDirectoryRequest.ProtoReflect.Descriptor instead.
func (*BatchGetWorkspaceDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{68}
}

func (x *BatchGetWorkspaceDirectoryRequest) GetWorkspaceDirectoryID() []string {
	if x != nil {
		return x.WorkspaceDirectoryID
	}
	return nil
}

func (x *BatchGetWorkspaceDirectoryRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetWorkspaceDirectoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceDirectory []*WorkspaceDirectory `protobuf:"bytes,1,rep,name=WorkspaceDirectory,proto3" json:"WorkspaceDirectory,omitempty"`
}

func (x *BatchGetWorkspaceDirectoryResponse) Reset() {
	*x = BatchGetWorkspaceDirectoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetWorkspaceDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetWorkspaceDirectoryResponse) ProtoMessage() {}

func (x *BatchGetWorkspaceDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetWorkspaceDirectoryResponse.ProtoReflect.Descriptor instead.
func (*BatchGetWorkspaceDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{69}
}

func (x *BatchGetWorkspaceDirectoryResponse) GetWorkspaceDirectory() []*WorkspaceDirectory {
	if x != nil {
		return x.WorkspaceDirectory
	}
	return nil
}

type WorkspaceDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ParentID    string `protobuf:"bytes,3,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	WorkSpaceID string `protobuf:"bytes,4,opt,name=WorkSpaceID,proto3" json:"WorkSpaceID,omitempty"`
	CreatorID   string `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CreateAt    int64  `protobuf:"varint,6,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt    int64  `protobuf:"varint,7,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	IsDefault   int32  `protobuf:"varint,8,opt,name=IsDefault,proto3" json:"IsDefault,omitempty"`
}

func (x *WorkspaceDirectory) Reset() {
	*x = WorkspaceDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceDirectory) ProtoMessage() {}

func (x *WorkspaceDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceDirectory.ProtoReflect.Descriptor instead.
func (*WorkspaceDirectory) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{70}
}

func (x *WorkspaceDirectory) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WorkspaceDirectory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkspaceDirectory) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *WorkspaceDirectory) GetWorkSpaceID() string {
	if x != nil {
		return x.WorkSpaceID
	}
	return ""
}

func (x *WorkspaceDirectory) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *WorkspaceDirectory) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *WorkspaceDirectory) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *WorkspaceDirectory) GetIsDefault() int32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

type GetWorkspaceMembersOfTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  string       `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetWorkspaceMembersOfTaskRequest) Reset() {
	*x = GetWorkspaceMembersOfTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceMembersOfTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceMembersOfTaskRequest) ProtoMessage() {}

func (x *GetWorkspaceMembersOfTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceMembersOfTaskRequest.ProtoReflect.Descriptor instead.
func (*GetWorkspaceMembersOfTaskRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{71}
}

func (x *GetWorkspaceMembersOfTaskRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *GetWorkspaceMembersOfTaskRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetBatchWorkspaceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceID string       `protobuf:"bytes,1,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetBatchWorkspaceInfoRequest) Reset() {
	*x = GetBatchWorkspaceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchWorkspaceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchWorkspaceInfoRequest) ProtoMessage() {}

func (x *GetBatchWorkspaceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchWorkspaceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBatchWorkspaceInfoRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{72}
}

func (x *GetBatchWorkspaceInfoRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetBatchWorkspaceInfoRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetBatchWorkspaceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace []*Workspace `protobuf:"bytes,1,rep,name=Workspace,proto3" json:"Workspace,omitempty"`
}

func (x *GetBatchWorkspaceInfoResponse) Reset() {
	*x = GetBatchWorkspaceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBatchWorkspaceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatchWorkspaceInfoResponse) ProtoMessage() {}

func (x *GetBatchWorkspaceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatchWorkspaceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBatchWorkspaceInfoResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{73}
}

func (x *GetBatchWorkspaceInfoResponse) GetWorkspace() []*Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type GetWorkspaceMembersOfTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []string `protobuf:"bytes,1,rep,name=Members,proto3" json:"Members,omitempty"`
}

func (x *GetWorkspaceMembersOfTaskResponse) Reset() {
	*x = GetWorkspaceMembersOfTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkspaceMembersOfTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkspaceMembersOfTaskResponse) ProtoMessage() {}

func (x *GetWorkspaceMembersOfTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkspaceMembersOfTaskResponse.ProtoReflect.Descriptor instead.
func (*GetWorkspaceMembersOfTaskResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{74}
}

func (x *GetWorkspaceMembersOfTaskResponse) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

type CreateNewInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefID      string            `protobuf:"bytes,1,opt,name=RefID,proto3" json:"RefID,omitempty"`
	RefType    string            `protobuf:"bytes,2,opt,name=RefType,proto3" json:"RefType,omitempty"`
	ContentMap map[string]string `protobuf:"bytes,3,rep,name=ContentMap,proto3" json:"ContentMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Context    *UserContext      `protobuf:"bytes,4,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *CreateNewInviteRequest) Reset() {
	*x = CreateNewInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewInviteRequest) ProtoMessage() {}

func (x *CreateNewInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewInviteRequest.ProtoReflect.Descriptor instead.
func (*CreateNewInviteRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{75}
}

func (x *CreateNewInviteRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *CreateNewInviteRequest) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *CreateNewInviteRequest) GetContentMap() map[string]string {
	if x != nil {
		return x.ContentMap
	}
	return nil
}

func (x *CreateNewInviteRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetObjectiveMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveID string       `protobuf:"bytes,1,opt,name=ObjectiveID,proto3" json:"ObjectiveID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetObjectiveMemberRequest) Reset() {
	*x = GetObjectiveMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectiveMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectiveMemberRequest) ProtoMessage() {}

func (x *GetObjectiveMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectiveMemberRequest.ProtoReflect.Descriptor instead.
func (*GetObjectiveMemberRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{76}
}

func (x *GetObjectiveMemberRequest) GetObjectiveID() string {
	if x != nil {
		return x.ObjectiveID
	}
	return ""
}

func (x *GetObjectiveMemberRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetObjectiveMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ObjectiveMember `protobuf:"bytes,1,rep,name=Member,proto3" json:"Member,omitempty"`
}

func (x *GetObjectiveMemberResponse) Reset() {
	*x = GetObjectiveMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectiveMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectiveMemberResponse) ProtoMessage() {}

func (x *GetObjectiveMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectiveMemberResponse.ProtoReflect.Descriptor instead.
func (*GetObjectiveMemberResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{77}
}

func (x *GetObjectiveMemberResponse) GetMember() []*ObjectiveMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type ObjectiveMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveID string `protobuf:"bytes,1,opt,name=ObjectiveID,proto3" json:"ObjectiveID,omitempty"`
	CreatorID   string `protobuf:"bytes,2,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	UserID      string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`     // 用户id
	InviteID    string `protobuf:"bytes,4,opt,name=InviteID,proto3" json:"InviteID,omitempty"` // 邀请人id
	State       int32  `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`      // 状态
}

func (x *ObjectiveMember) Reset() {
	*x = ObjectiveMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectiveMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveMember) ProtoMessage() {}

func (x *ObjectiveMember) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveMember.ProtoReflect.Descriptor instead.
func (*ObjectiveMember) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{78}
}

func (x *ObjectiveMember) GetObjectiveID() string {
	if x != nil {
		return x.ObjectiveID
	}
	return ""
}

func (x *ObjectiveMember) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *ObjectiveMember) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ObjectiveMember) GetInviteID() string {
	if x != nil {
		return x.InviteID
	}
	return ""
}

func (x *ObjectiveMember) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type GetObjectiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveID string       `protobuf:"bytes,1,opt,name=ObjectiveID,proto3" json:"ObjectiveID,omitempty"`
	Context     *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetObjectiveRequest) Reset() {
	*x = GetObjectiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectiveRequest) ProtoMessage() {}

func (x *GetObjectiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectiveRequest.ProtoReflect.Descriptor instead.
func (*GetObjectiveRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{79}
}

func (x *GetObjectiveRequest) GetObjectiveID() string {
	if x != nil {
		return x.ObjectiveID
	}
	return ""
}

func (x *GetObjectiveRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetObjectiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveID string `protobuf:"bytes,1,opt,name=ObjectiveID,proto3" json:"ObjectiveID,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Detail      string `protobuf:"bytes,3,opt,name=Detail,proto3" json:"Detail,omitempty"`
	Level       int32  `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	State       int32  `protobuf:"varint,5,opt,name=State,proto3" json:"State,omitempty"`
	OriginType  int32  `protobuf:"varint,6,opt,name=OriginType,proto3" json:"OriginType,omitempty"`
	OriginID    string `protobuf:"bytes,7,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	CreatorID   string `protobuf:"bytes,8,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	Schedule    int32  `protobuf:"varint,9,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	AffectedUid string `protobuf:"bytes,10,opt,name=AffectedUid,proto3" json:"AffectedUid,omitempty"`
	CompleteAt  int64  `protobuf:"varint,11,opt,name=CompleteAt,proto3" json:"CompleteAt,omitempty"`
}

func (x *GetObjectiveResponse) Reset() {
	*x = GetObjectiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetObjectiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetObjectiveResponse) ProtoMessage() {}

func (x *GetObjectiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetObjectiveResponse.ProtoReflect.Descriptor instead.
func (*GetObjectiveResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{80}
}

func (x *GetObjectiveResponse) GetObjectiveID() string {
	if x != nil {
		return x.ObjectiveID
	}
	return ""
}

func (x *GetObjectiveResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetObjectiveResponse) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *GetObjectiveResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GetObjectiveResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetObjectiveResponse) GetOriginType() int32 {
	if x != nil {
		return x.OriginType
	}
	return 0
}

func (x *GetObjectiveResponse) GetOriginID() string {
	if x != nil {
		return x.OriginID
	}
	return ""
}

func (x *GetObjectiveResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *GetObjectiveResponse) GetSchedule() int32 {
	if x != nil {
		return x.Schedule
	}
	return 0
}

func (x *GetObjectiveResponse) GetAffectedUid() string {
	if x != nil {
		return x.AffectedUid
	}
	return ""
}

func (x *GetObjectiveResponse) GetCompleteAt() int64 {
	if x != nil {
		return x.CompleteAt
	}
	return 0
}

type GetScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenID string       `protobuf:"bytes,1,opt,name=ScreenID,proto3" json:"ScreenID,omitempty"`
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetScreenRequest) Reset() {
	*x = GetScreenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenRequest) ProtoMessage() {}

func (x *GetScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenRequest.ProtoReflect.Descriptor instead.
func (*GetScreenRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{81}
}

func (x *GetScreenRequest) GetScreenID() string {
	if x != nil {
		return x.ScreenID
	}
	return ""
}

func (x *GetScreenRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenID     string `protobuf:"bytes,1,opt,name=ScreenID,proto3" json:"ScreenID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	LocationType int32  `protobuf:"varint,3,opt,name=LocationType,proto3" json:"LocationType,omitempty"`
	WorkspaceID  string `protobuf:"bytes,4,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	ProjectID    string `protobuf:"bytes,5,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	Type         int32  `protobuf:"varint,6,opt,name=Type,proto3" json:"Type,omitempty"`
	State        int32  `protobuf:"varint,7,opt,name=State,proto3" json:"State,omitempty"`
	CreatorID    string `protobuf:"bytes,8,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
}

func (x *GetScreenResponse) Reset() {
	*x = GetScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenResponse) ProtoMessage() {}

func (x *GetScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenResponse.ProtoReflect.Descriptor instead.
func (*GetScreenResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{82}
}

func (x *GetScreenResponse) GetScreenID() string {
	if x != nil {
		return x.ScreenID
	}
	return ""
}

func (x *GetScreenResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetScreenResponse) GetLocationType() int32 {
	if x != nil {
		return x.LocationType
	}
	return 0
}

func (x *GetScreenResponse) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *GetScreenResponse) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GetScreenResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetScreenResponse) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GetScreenResponse) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

type GetScreenMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenID string       `protobuf:"bytes,1,opt,name=ScreenID,proto3" json:"ScreenID,omitempty"`
	Context  *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetScreenMembersRequest) Reset() {
	*x = GetScreenMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenMembersRequest) ProtoMessage() {}

func (x *GetScreenMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenMembersRequest.ProtoReflect.Descriptor instead.
func (*GetScreenMembersRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{83}
}

func (x *GetScreenMembersRequest) GetScreenID() string {
	if x != nil {
		return x.ScreenID
	}
	return ""
}

func (x *GetScreenMembersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetScreenMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []string `protobuf:"bytes,1,rep,name=Members,proto3" json:"Members,omitempty"`
}

func (x *GetScreenMembersResponse) Reset() {
	*x = GetScreenMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenMembersResponse) ProtoMessage() {}

func (x *GetScreenMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenMembersResponse.ProtoReflect.Descriptor instead.
func (*GetScreenMembersResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{84}
}

func (x *GetScreenMembersResponse) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

type GetScreensByCardTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType int32        `protobuf:"varint,1,opt,name=CardType,proto3" json:"CardType,omitempty"`
	RefID    string       `protobuf:"bytes,2,opt,name=RefID,proto3" json:"RefID,omitempty"`
	Context  *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetScreensByCardTypeRequest) Reset() {
	*x = GetScreensByCardTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreensByCardTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreensByCardTypeRequest) ProtoMessage() {}

func (x *GetScreensByCardTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreensByCardTypeRequest.ProtoReflect.Descriptor instead.
func (*GetScreensByCardTypeRequest) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{85}
}

func (x *GetScreensByCardTypeRequest) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *GetScreensByCardTypeRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *GetScreensByCardTypeRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetScreensByCardTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetScreenResponse `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *GetScreensByCardTypeResponse) Reset() {
	*x = GetScreensByCardTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreensByCardTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreensByCardTypeResponse) ProtoMessage() {}

func (x *GetScreensByCardTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_task_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreensByCardTypeResponse.ProtoReflect.Descriptor instead.
func (*GetScreensByCardTypeResponse) Descriptor() ([]byte, []int) {
	return file_task_proto_rawDescGZIP(), []int{86}
}

func (x *GetScreensByCardTypeResponse) GetData() []*GetScreenResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_task_proto protoreflect.FileDescriptor

var file_task_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6f, 0x6e,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xbd, 0x05, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x41, 0x74, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x06, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x39, 0x0a, 0x0b, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf7, 0x04, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x66, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x1a, 0x43,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x41, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb8, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44,
	0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x41, 0x74, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x22, 0xdb, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x22, 0x56, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x60, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x52, 0x65, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x46, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x7c, 0x0a, 0x12,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4a, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65,
	0x72, 0x52, 0x06, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x7a, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x7a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa0, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x44, 0x65, 0x66, 0x49, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x76, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x06, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x7a, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x67, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x63, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0x95,
	0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x27, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x28, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x22,
	0x8e, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74, 0x52, 0x08, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x41, 0x74,
	0x22, 0xd0, 0x03, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x54,
	0x61, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x62, 0x6f, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x4d, 0x65, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x66,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x87,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x52, 0x11, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x52, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0xca, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x22, 0xe8, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x95,
	0x03, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x45, 0x78, 0x69, 0x74, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x45, 0x78,
	0x69, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4f,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22,
	0x6b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x6d, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x41, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x73, 0x22, 0x70, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x19, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x34, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x57, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x41,
	0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x37,
	0x0a, 0x1d, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x74,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x21, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6c, 0x0a, 0x22,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x12, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x66,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6b,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4c, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12,
	0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9b,
	0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x62, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xca, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x22, 0x59, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x22, 0x7a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65,
	0x66, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x32, 0x8d, 0x15, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x19, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d,
	0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_proto_rawDescOnce sync.Once
	file_task_proto_rawDescData = file_task_proto_rawDesc
)

func file_task_proto_rawDescGZIP() []byte {
	file_task_proto_rawDescOnce.Do(func() {
		file_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_proto_rawDescData)
	})
	return file_task_proto_rawDescData
}

var file_task_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_task_proto_goTypes = []interface{}{
	(*RemindAt)(nil),                                 // 0: pb.RemindAt
	(*GetTaskRequest)(nil),                           // 1: pb.GetTaskRequest
	(*GetTaskResponse)(nil),                          // 2: pb.GetTaskResponse
	(*GetTasksNameRequest)(nil),                      // 3: pb.GetTasksNameRequest
	(*GetTasksNameResponse)(nil),                     // 4: pb.GetTasksNameResponse
	(*GetTaskDispatchRequest)(nil),                   // 5: pb.GetTaskDispatchRequest
	(*GetTaskDispatchResponse)(nil),                  // 6: pb.GetTaskDispatchResponse
	(*GetTaskTakersRequest)(nil),                     // 7: pb.GetTaskTakersRequest
	(*GetTaskTakersResponse)(nil),                    // 8: pb.GetTaskTakersResponse
	(*TaskTaker)(nil),                                // 9: pb.TaskTaker
	(*TaskExistsRequest)(nil),                        // 10: pb.TaskExistsRequest
	(*TaskExistsResponse)(nil),                       // 11: pb.TaskExistsResponse
	(*CreateGuideTaskRequest)(nil),                   // 12: pb.CreateGuideTaskRequest
	(*BatchQueryTaskRequest)(nil),                    // 13: pb.BatchQueryTaskRequest
	(*BatchQueryTaskResponse)(nil),                   // 14: pb.BatchQueryTaskResponse
	(*BatchQueryTaskInfo)(nil),                       // 15: pb.BatchQueryTaskInfo
	(*GetTaskRelevantTakersRequest)(nil),             // 16: pb.GetTaskRelevantTakersRequest
	(*GetTaskRelevantTakersResponse)(nil),            // 17: pb.GetTaskRelevantTakersResponse
	(*RelevantTaker)(nil),                            // 18: pb.RelevantTaker
	(*UpdateTaskRelationRequest)(nil),                // 19: pb.UpdateTaskRelationRequest
	(*GetTaskShareRequest)(nil),                      // 20: pb.GetTaskShareRequest
	(*GetTaskShareResponse)(nil),                     // 21: pb.GetTaskShareResponse
	(*CreateUserInteractRequest)(nil),                // 22: pb.CreateUserInteractRequest
	(*UpdateUserInteractRequest)(nil),                // 23: pb.UpdateUserInteractRequest
	(*GetPureTaskTakersRequest)(nil),                 // 24: pb.GetPureTaskTakersRequest
	(*GetPureTaskTakersResponse)(nil),                // 25: pb.GetPureTaskTakersResponse
	(*CreateTaskActiveDetailRequest)(nil),            // 26: pb.CreateTaskActiveDetailRequest
	(*UpdateProjectRelationRequest)(nil),             // 27: pb.UpdateProjectRelationRequest
	(*GetProjectMembersRequest)(nil),                 // 28: pb.GetProjectMembersRequest
	(*GetProjectMembersResponse)(nil),                // 29: pb.GetProjectMembersResponse
	(*ProjectMember)(nil),                            // 30: pb.ProjectMember
	(*GetProjectsNameRequest)(nil),                   // 31: pb.GetProjectsNameRequest
	(*GetProjectsNameResponse)(nil),                  // 32: pb.GetProjectsNameResponse
	(*GetUsersMorningAndEveningProgramRequest)(nil),  // 33: pb.GetUsersMorningAndEveningProgramRequest
	(*GetUsersMorningAndEveningProgramResponse)(nil), // 34: pb.GetUsersMorningAndEveningProgramResponse
	(*TaskResp)(nil),                                 // 35: pb.TaskResp
	(*TaskConfigResp)(nil),                           // 36: pb.TaskConfigResp
	(*GetTaskWithParentRequest)(nil),                 // 37: pb.GetTaskWithParentRequest
	(*GetTaskWithParentResponse)(nil),                // 38: pb.GetTaskWithParentResponse
	(*GetProjectRequest)(nil),                        // 39: pb.GetProjectRequest
	(*GetProjectResponse)(nil),                       // 40: pb.GetProjectResponse
	(*GetWorkspaceRequest)(nil),                      // 41: pb.GetWorkspaceRequest
	(*GetWorkspaceResponse)(nil),                     // 42: pb.GetWorkspaceResponse
	(*GetWorkspaceMembersRequest)(nil),               // 43: pb.GetWorkspaceMembersRequest
	(*GetWorkspaceMembersResponse)(nil),              // 44: pb.GetWorkspaceMembersResponse
	(*WorkspaceMember)(nil),                          // 45: pb.WorkspaceMember
	(*Workspace)(nil),                                // 46: pb.Workspace
	(*GetWorkspaceListRequest)(nil),                  // 47: pb.GetWorkspaceListRequest
	(*GetWorkspaceListResponse)(nil),                 // 48: pb.GetWorkspaceListResponse
	(*TaskChildren)(nil),                             // 49: pb.TaskChildren
	(*GetTaskChildrenRequest)(nil),                   // 50: pb.GetTaskChildrenRequest
	(*GetTaskChildrenResponse)(nil),                  // 51: pb.GetTaskChildrenResponse
	(*GetWorkspaceFileSpaceRequest)(nil),             // 52: pb.GetWorkspaceFileSpaceRequest
	(*GetWorkspaceFileSpaceResponse)(nil),            // 53: pb.GetWorkspaceFileSpaceResponse
	(*GetWorkspaceBindProjectRequest)(nil),           // 54: pb.GetWorkspaceBindProjectRequest
	(*GetWorkspaceBindProjectResponse)(nil),          // 55: pb.GetWorkspaceBindProjectResponse
	(*GetWorkspaceExternalMemberRequest)(nil),        // 56: pb.GetWorkspaceExternalMemberRequest
	(*GetWorkspaceExternalMemberResponse)(nil),       // 57: pb.GetWorkspaceExternalMemberResponse
	(*ExpireEquityUpdateRequest)(nil),                // 58: pb.ExpireEquityUpdateRequest
	(*ExpireEquityUpdateResponse)(nil),               // 59: pb.ExpireEquityUpdateResponse
	(*UpdateWorkspaceLevelRequest)(nil),              // 60: pb.UpdateWorkspaceLevelRequest
	(*UpdateWorkspaceLevelResponse)(nil),             // 61: pb.UpdateWorkspaceLevelResponse
	(*GetTaskWorkspaceRequest)(nil),                  // 62: pb.GetTaskWorkspaceRequest
	(*GetTaskWorkspaceResponse)(nil),                 // 63: pb.GetTaskWorkspaceResponse
	(*GetProjectWorkspaceRequest)(nil),               // 64: pb.GetProjectWorkspaceRequest
	(*GetProjectWorkspaceResponse)(nil),              // 65: pb.GetProjectWorkspaceResponse
	(*AddMemberEquityUpdateRequest)(nil),             // 66: pb.AddMemberEquityUpdateRequest
	(*AddMemberEquityUpdateResponse)(nil),            // 67: pb.AddMemberEquityUpdateResponse
	(*BatchGetWorkspaceDirectoryRequest)(nil),        // 68: pb.BatchGetWorkspaceDirectoryRequest
	(*BatchGetWorkspaceDirectoryResponse)(nil),       // 69: pb.BatchGetWorkspaceDirectoryResponse
	(*WorkspaceDirectory)(nil),                       // 70: pb.WorkspaceDirectory
	(*GetWorkspaceMembersOfTaskRequest)(nil),         // 71: pb.GetWorkspaceMembersOfTaskRequest
	(*GetBatchWorkspaceInfoRequest)(nil),             // 72: pb.GetBatchWorkspaceInfoRequest
	(*GetBatchWorkspaceInfoResponse)(nil),            // 73: pb.GetBatchWorkspaceInfoResponse
	(*GetWorkspaceMembersOfTaskResponse)(nil),        // 74: pb.GetWorkspaceMembersOfTaskResponse
	(*CreateNewInviteRequest)(nil),                   // 75: pb.CreateNewInviteRequest
	(*GetObjectiveMemberRequest)(nil),                // 76: pb.GetObjectiveMemberRequest
	(*GetObjectiveMemberResponse)(nil),               // 77: pb.GetObjectiveMemberResponse
	(*ObjectiveMember)(nil),                          // 78: pb.ObjectiveMember
	(*GetObjectiveRequest)(nil),                      // 79: pb.GetObjectiveRequest
	(*GetObjectiveResponse)(nil),                     // 80: pb.GetObjectiveResponse
	(*GetScreenRequest)(nil),                         // 81: pb.GetScreenRequest
	(*GetScreenResponse)(nil),                        // 82: pb.GetScreenResponse
	(*GetScreenMembersRequest)(nil),                  // 83: pb.GetScreenMembersRequest
	(*GetScreenMembersResponse)(nil),                 // 84: pb.GetScreenMembersResponse
	(*GetScreensByCardTypeRequest)(nil),              // 85: pb.GetScreensByCardTypeRequest
	(*GetScreensByCardTypeResponse)(nil),             // 86: pb.GetScreensByCardTypeResponse
	nil,                                              // 87: pb.GetTaskResponse.WidgetEntry
	nil,                                              // 88: pb.GetTasksNameResponse.DataEntry
	nil,                                              // 89: pb.GetTaskDispatchResponse.PersonalRemindAtEntry
	nil,                                              // 90: pb.GetProjectsNameResponse.DataEntry
	nil,                                              // 91: pb.CreateNewInviteRequest.ContentMapEntry
	(*UserContext)(nil),                              // 92: pb.UserContext
	(*Response)(nil),                                 // 93: pb.Response
}
var file_task_proto_depIdxs = []int32{
	92,  // 0: pb.GetTaskRequest.Context:type_name -> pb.UserContext
	0,   // 1: pb.GetTaskResponse.RemindAt:type_name -> pb.RemindAt
	87,  // 2: pb.GetTaskResponse.Widget:type_name -> pb.GetTaskResponse.WidgetEntry
	92,  // 3: pb.GetTasksNameRequest.Context:type_name -> pb.UserContext
	88,  // 4: pb.GetTasksNameResponse.Data:type_name -> pb.GetTasksNameResponse.DataEntry
	92,  // 5: pb.GetTaskDispatchRequest.Context:type_name -> pb.UserContext
	89,  // 6: pb.GetTaskDispatchResponse.PersonalRemindAt:type_name -> pb.GetTaskDispatchResponse.PersonalRemindAtEntry
	92,  // 7: pb.GetTaskTakersRequest.Context:type_name -> pb.UserContext
	0,   // 8: pb.GetTaskTakersResponse.RemindAt:type_name -> pb.RemindAt
	9,   // 9: pb.GetTaskTakersResponse.Takers:type_name -> pb.TaskTaker
	92,  // 10: pb.TaskExistsRequest.Context:type_name -> pb.UserContext
	92,  // 11: pb.CreateGuideTaskRequest.Context:type_name -> pb.UserContext
	92,  // 12: pb.BatchQueryTaskRequest.Context:type_name -> pb.UserContext
	15,  // 13: pb.BatchQueryTaskResponse.Tasks:type_name -> pb.BatchQueryTaskInfo
	92,  // 14: pb.GetTaskRelevantTakersRequest.Context:type_name -> pb.UserContext
	18,  // 15: pb.GetTaskRelevantTakersResponse.Takers:type_name -> pb.RelevantTaker
	92,  // 16: pb.UpdateTaskRelationRequest.Context:type_name -> pb.UserContext
	92,  // 17: pb.GetTaskShareRequest.Context:type_name -> pb.UserContext
	92,  // 18: pb.CreateUserInteractRequest.Context:type_name -> pb.UserContext
	92,  // 19: pb.UpdateUserInteractRequest.Context:type_name -> pb.UserContext
	92,  // 20: pb.GetPureTaskTakersRequest.Context:type_name -> pb.UserContext
	9,   // 21: pb.GetPureTaskTakersResponse.Takers:type_name -> pb.TaskTaker
	92,  // 22: pb.CreateTaskActiveDetailRequest.Context:type_name -> pb.UserContext
	92,  // 23: pb.UpdateProjectRelationRequest.Context:type_name -> pb.UserContext
	92,  // 24: pb.GetProjectMembersRequest.Context:type_name -> pb.UserContext
	30,  // 25: pb.GetProjectMembersResponse.Members:type_name -> pb.ProjectMember
	92,  // 26: pb.GetProjectsNameRequest.Context:type_name -> pb.UserContext
	90,  // 27: pb.GetProjectsNameResponse.Data:type_name -> pb.GetProjectsNameResponse.DataEntry
	92,  // 28: pb.GetUsersMorningAndEveningProgramRequest.Context:type_name -> pb.UserContext
	0,   // 29: pb.TaskResp.RemindAt:type_name -> pb.RemindAt
	92,  // 30: pb.GetTaskWithParentRequest.Context:type_name -> pb.UserContext
	36,  // 31: pb.GetTaskWithParentResponse.ParentTaskConfigs:type_name -> pb.TaskConfigResp
	35,  // 32: pb.GetTaskWithParentResponse.TaskResp:type_name -> pb.TaskResp
	92,  // 33: pb.GetProjectRequest.Context:type_name -> pb.UserContext
	92,  // 34: pb.GetWorkspaceRequest.Context:type_name -> pb.UserContext
	92,  // 35: pb.GetWorkspaceMembersRequest.Context:type_name -> pb.UserContext
	45,  // 36: pb.GetWorkspaceMembersResponse.Members:type_name -> pb.WorkspaceMember
	92,  // 37: pb.GetWorkspaceListRequest.Context:type_name -> pb.UserContext
	46,  // 38: pb.GetWorkspaceListResponse.Workspaces:type_name -> pb.Workspace
	92,  // 39: pb.GetTaskChildrenRequest.Context:type_name -> pb.UserContext
	49,  // 40: pb.GetTaskChildrenResponse.TaskChildren:type_name -> pb.TaskChildren
	92,  // 41: pb.GetWorkspaceFileSpaceRequest.Context:type_name -> pb.UserContext
	92,  // 42: pb.GetWorkspaceBindProjectRequest.Context:type_name -> pb.UserContext
	92,  // 43: pb.GetWorkspaceExternalMemberRequest.Context:type_name -> pb.UserContext
	92,  // 44: pb.ExpireEquityUpdateRequest.Context:type_name -> pb.UserContext
	92,  // 45: pb.UpdateWorkspaceLevelRequest.Context:type_name -> pb.UserContext
	92,  // 46: pb.GetTaskWorkspaceRequest.Context:type_name -> pb.UserContext
	92,  // 47: pb.GetProjectWorkspaceRequest.Context:type_name -> pb.UserContext
	92,  // 48: pb.AddMemberEquityUpdateRequest.Context:type_name -> pb.UserContext
	92,  // 49: pb.BatchGetWorkspaceDirectoryRequest.Context:type_name -> pb.UserContext
	70,  // 50: pb.BatchGetWorkspaceDirectoryResponse.WorkspaceDirectory:type_name -> pb.WorkspaceDirectory
	92,  // 51: pb.GetWorkspaceMembersOfTaskRequest.Context:type_name -> pb.UserContext
	92,  // 52: pb.GetBatchWorkspaceInfoRequest.Context:type_name -> pb.UserContext
	46,  // 53: pb.GetBatchWorkspaceInfoResponse.Workspace:type_name -> pb.Workspace
	91,  // 54: pb.CreateNewInviteRequest.ContentMap:type_name -> pb.CreateNewInviteRequest.ContentMapEntry
	92,  // 55: pb.CreateNewInviteRequest.Context:type_name -> pb.UserContext
	92,  // 56: pb.GetObjectiveMemberRequest.Context:type_name -> pb.UserContext
	78,  // 57: pb.GetObjectiveMemberResponse.Member:type_name -> pb.ObjectiveMember
	92,  // 58: pb.GetObjectiveRequest.Context:type_name -> pb.UserContext
	92,  // 59: pb.GetScreenRequest.Context:type_name -> pb.UserContext
	92,  // 60: pb.GetScreenMembersRequest.Context:type_name -> pb.UserContext
	92,  // 61: pb.GetScreensByCardTypeRequest.Context:type_name -> pb.UserContext
	82,  // 62: pb.GetScreensByCardTypeResponse.Data:type_name -> pb.GetScreenResponse
	1,   // 63: pb.Task.GetTask:input_type -> pb.GetTaskRequest
	3,   // 64: pb.Task.GetTasksName:input_type -> pb.GetTasksNameRequest
	5,   // 65: pb.Task.GetTaskDispatch:input_type -> pb.GetTaskDispatchRequest
	7,   // 66: pb.Task.GetTaskTakers:input_type -> pb.GetTaskTakersRequest
	24,  // 67: pb.Task.GetPureTaskTakers:input_type -> pb.GetPureTaskTakersRequest
	10,  // 68: pb.Task.TaskExists:input_type -> pb.TaskExistsRequest
	12,  // 69: pb.Task.CreateGuideTask:input_type -> pb.CreateGuideTaskRequest
	13,  // 70: pb.Task.BatchQueryTask:input_type -> pb.BatchQueryTaskRequest
	16,  // 71: pb.Task.GetTaskRelevantTakers:input_type -> pb.GetTaskRelevantTakersRequest
	19,  // 72: pb.Task.UpdateTaskRelation:input_type -> pb.UpdateTaskRelationRequest
	20,  // 73: pb.Task.GetTaskShare:input_type -> pb.GetTaskShareRequest
	22,  // 74: pb.Task.CreateUserInteract:input_type -> pb.CreateUserInteractRequest
	23,  // 75: pb.Task.UpdateUserInteract:input_type -> pb.UpdateUserInteractRequest
	26,  // 76: pb.Task.CreateTaskActiveDetail:input_type -> pb.CreateTaskActiveDetailRequest
	27,  // 77: pb.Task.UpdateProjectRelation:input_type -> pb.UpdateProjectRelationRequest
	28,  // 78: pb.Task.GetProjectMembers:input_type -> pb.GetProjectMembersRequest
	31,  // 79: pb.Task.GetProjectsName:input_type -> pb.GetProjectsNameRequest
	33,  // 80: pb.Task.GetUsersMorningAndEveningProgram:input_type -> pb.GetUsersMorningAndEveningProgramRequest
	37,  // 81: pb.Task.GetTaskWithParent:input_type -> pb.GetTaskWithParentRequest
	39,  // 82: pb.Task.GetProject:input_type -> pb.GetProjectRequest
	41,  // 83: pb.Task.GetWorkspace:input_type -> pb.GetWorkspaceRequest
	43,  // 84: pb.Task.GetWorkspaceMembers:input_type -> pb.GetWorkspaceMembersRequest
	47,  // 85: pb.Task.GetWorkspaceList:input_type -> pb.GetWorkspaceListRequest
	50,  // 86: pb.Task.GetTaskChildren:input_type -> pb.GetTaskChildrenRequest
	52,  // 87: pb.Task.GetWorkspaceFileSpace:input_type -> pb.GetWorkspaceFileSpaceRequest
	54,  // 88: pb.Task.GetWorkspaceBindProject:input_type -> pb.GetWorkspaceBindProjectRequest
	56,  // 89: pb.Task.GetWorkspaceExternalMember:input_type -> pb.GetWorkspaceExternalMemberRequest
	58,  // 90: pb.Task.ExpireEquityUpdate:input_type -> pb.ExpireEquityUpdateRequest
	60,  // 91: pb.Task.UpdateWorkspaceLevel:input_type -> pb.UpdateWorkspaceLevelRequest
	62,  // 92: pb.Task.GetTaskWorkspace:input_type -> pb.GetTaskWorkspaceRequest
	64,  // 93: pb.Task.GetProjectWorkspace:input_type -> pb.GetProjectWorkspaceRequest
	66,  // 94: pb.Task.AddMemberEquityUpdate:input_type -> pb.AddMemberEquityUpdateRequest
	68,  // 95: pb.Task.BatchGetWorkspaceDirectory:input_type -> pb.BatchGetWorkspaceDirectoryRequest
	71,  // 96: pb.Task.GetWorkspaceMembersOfTask:input_type -> pb.GetWorkspaceMembersOfTaskRequest
	72,  // 97: pb.Task.GetBatchWorkspaceInfo:input_type -> pb.GetBatchWorkspaceInfoRequest
	75,  // 98: pb.Task.CreateNewInvite:input_type -> pb.CreateNewInviteRequest
	76,  // 99: pb.Task.GetObjectiveMember:input_type -> pb.GetObjectiveMemberRequest
	79,  // 100: pb.Task.GetObjective:input_type -> pb.GetObjectiveRequest
	81,  // 101: pb.Task.GetScreen:input_type -> pb.GetScreenRequest
	83,  // 102: pb.Task.GetScreenMembers:input_type -> pb.GetScreenMembersRequest
	85,  // 103: pb.Task.GetScreensByCardType:input_type -> pb.GetScreensByCardTypeRequest
	93,  // 104: pb.Task.GetTask:output_type -> pb.Response
	93,  // 105: pb.Task.GetTasksName:output_type -> pb.Response
	93,  // 106: pb.Task.GetTaskDispatch:output_type -> pb.Response
	93,  // 107: pb.Task.GetTaskTakers:output_type -> pb.Response
	93,  // 108: pb.Task.GetPureTaskTakers:output_type -> pb.Response
	93,  // 109: pb.Task.TaskExists:output_type -> pb.Response
	93,  // 110: pb.Task.CreateGuideTask:output_type -> pb.Response
	93,  // 111: pb.Task.BatchQueryTask:output_type -> pb.Response
	93,  // 112: pb.Task.GetTaskRelevantTakers:output_type -> pb.Response
	93,  // 113: pb.Task.UpdateTaskRelation:output_type -> pb.Response
	93,  // 114: pb.Task.GetTaskShare:output_type -> pb.Response
	93,  // 115: pb.Task.CreateUserInteract:output_type -> pb.Response
	93,  // 116: pb.Task.UpdateUserInteract:output_type -> pb.Response
	93,  // 117: pb.Task.CreateTaskActiveDetail:output_type -> pb.Response
	93,  // 118: pb.Task.UpdateProjectRelation:output_type -> pb.Response
	93,  // 119: pb.Task.GetProjectMembers:output_type -> pb.Response
	93,  // 120: pb.Task.GetProjectsName:output_type -> pb.Response
	93,  // 121: pb.Task.GetUsersMorningAndEveningProgram:output_type -> pb.Response
	93,  // 122: pb.Task.GetTaskWithParent:output_type -> pb.Response
	93,  // 123: pb.Task.GetProject:output_type -> pb.Response
	93,  // 124: pb.Task.GetWorkspace:output_type -> pb.Response
	93,  // 125: pb.Task.GetWorkspaceMembers:output_type -> pb.Response
	93,  // 126: pb.Task.GetWorkspaceList:output_type -> pb.Response
	93,  // 127: pb.Task.GetTaskChildren:output_type -> pb.Response
	93,  // 128: pb.Task.GetWorkspaceFileSpace:output_type -> pb.Response
	93,  // 129: pb.Task.GetWorkspaceBindProject:output_type -> pb.Response
	93,  // 130: pb.Task.GetWorkspaceExternalMember:output_type -> pb.Response
	93,  // 131: pb.Task.ExpireEquityUpdate:output_type -> pb.Response
	93,  // 132: pb.Task.UpdateWorkspaceLevel:output_type -> pb.Response
	93,  // 133: pb.Task.GetTaskWorkspace:output_type -> pb.Response
	93,  // 134: pb.Task.GetProjectWorkspace:output_type -> pb.Response
	93,  // 135: pb.Task.AddMemberEquityUpdate:output_type -> pb.Response
	93,  // 136: pb.Task.BatchGetWorkspaceDirectory:output_type -> pb.Response
	93,  // 137: pb.Task.GetWorkspaceMembersOfTask:output_type -> pb.Response
	93,  // 138: pb.Task.GetBatchWorkspaceInfo:output_type -> pb.Response
	93,  // 139: pb.Task.CreateNewInvite:output_type -> pb.Response
	93,  // 140: pb.Task.GetObjectiveMember:output_type -> pb.Response
	93,  // 141: pb.Task.GetObjective:output_type -> pb.Response
	93,  // 142: pb.Task.GetScreen:output_type -> pb.Response
	93,  // 143: pb.Task.GetScreenMembers:output_type -> pb.Response
	93,  // 144: pb.Task.GetScreensByCardType:output_type -> pb.Response
	104, // [104:145] is the sub-list for method output_type
	63,  // [63:104] is the sub-list for method input_type
	63,  // [63:63] is the sub-list for extension type_name
	63,  // [63:63] is the sub-list for extension extendee
	0,   // [0:63] is the sub-list for field type_name
}

func init() { file_task_proto_init() }
func file_task_proto_init() {
	if File_task_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemindAt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDispatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskDispatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskTakersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskTakersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGuideTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRelevantTakersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRelevantTakersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelevantTaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTaskRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserInteractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPureTaskTakersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPureTaskTakersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskActiveDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersMorningAndEveningProgramRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersMorningAndEveningProgramResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskWithParentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskWithParentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskChildrenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskChildrenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceFileSpaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceFileSpaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceBindProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceBindProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceExternalMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceExternalMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireEquityUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireEquityUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkspaceLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkspaceLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberEquityUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMemberEquityUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWorkspaceDirectoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetWorkspaceDirectoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceMembersOfTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchWorkspaceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBatchWorkspaceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkspaceMembersOfTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectiveMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectiveMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectiveMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetObjectiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreensByCardTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreensByCardTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_task_proto_goTypes,
		DependencyIndexes: file_task_proto_depIdxs,
		MessageInfos:      file_task_proto_msgTypes,
	}.Build()
	File_task_proto = out.File
	file_task_proto_rawDesc = nil
	file_task_proto_goTypes = nil
	file_task_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Response, error)
	GetTasksName(ctx context.Context, in *GetTasksNameRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskDispatch(ctx context.Context, in *GetTaskDispatchRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskTakers(ctx context.Context, in *GetTaskTakersRequest, opts ...grpc.CallOption) (*Response, error)
	GetPureTaskTakers(ctx context.Context, in *GetPureTaskTakersRequest, opts ...grpc.CallOption) (*Response, error)
	TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*Response, error)
	CreateGuideTask(ctx context.Context, in *CreateGuideTaskRequest, opts ...grpc.CallOption) (*Response, error)
	BatchQueryTask(ctx context.Context, in *BatchQueryTaskRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskRelevantTakers(ctx context.Context, in *GetTaskRelevantTakersRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateTaskRelation(ctx context.Context, in *UpdateTaskRelationRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskShare(ctx context.Context, in *GetTaskShareRequest, opts ...grpc.CallOption) (*Response, error)
	CreateUserInteract(ctx context.Context, in *CreateUserInteractRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateUserInteract(ctx context.Context, in *UpdateUserInteractRequest, opts ...grpc.CallOption) (*Response, error)
	CreateTaskActiveDetail(ctx context.Context, in *CreateTaskActiveDetailRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateProjectRelation(ctx context.Context, in *UpdateProjectRelationRequest, opts ...grpc.CallOption) (*Response, error)
	GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*Response, error)
	GetProjectsName(ctx context.Context, in *GetProjectsNameRequest, opts ...grpc.CallOption) (*Response, error)
	GetUsersMorningAndEveningProgram(ctx context.Context, in *GetUsersMorningAndEveningProgramRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskWithParent(ctx context.Context, in *GetTaskWithParentRequest, opts ...grpc.CallOption) (*Response, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceMembers(ctx context.Context, in *GetWorkspaceMembersRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceList(ctx context.Context, in *GetWorkspaceListRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskChildren(ctx context.Context, in *GetTaskChildrenRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceFileSpace(ctx context.Context, in *GetWorkspaceFileSpaceRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceBindProject(ctx context.Context, in *GetWorkspaceBindProjectRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceExternalMember(ctx context.Context, in *GetWorkspaceExternalMemberRequest, opts ...grpc.CallOption) (*Response, error)
	ExpireEquityUpdate(ctx context.Context, in *ExpireEquityUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateWorkspaceLevel(ctx context.Context, in *UpdateWorkspaceLevelRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskWorkspace(ctx context.Context, in *GetTaskWorkspaceRequest, opts ...grpc.CallOption) (*Response, error)
	GetProjectWorkspace(ctx context.Context, in *GetProjectWorkspaceRequest, opts ...grpc.CallOption) (*Response, error)
	AddMemberEquityUpdate(ctx context.Context, in *AddMemberEquityUpdateRequest, opts ...grpc.CallOption) (*Response, error)
	BatchGetWorkspaceDirectory(ctx context.Context, in *BatchGetWorkspaceDirectoryRequest, opts ...grpc.CallOption) (*Response, error)
	GetWorkspaceMembersOfTask(ctx context.Context, in *GetWorkspaceMembersOfTaskRequest, opts ...grpc.CallOption) (*Response, error)
	GetBatchWorkspaceInfo(ctx context.Context, in *GetBatchWorkspaceInfoRequest, opts ...grpc.CallOption) (*Response, error)
	CreateNewInvite(ctx context.Context, in *CreateNewInviteRequest, opts ...grpc.CallOption) (*Response, error)
	GetObjectiveMember(ctx context.Context, in *GetObjectiveMemberRequest, opts ...grpc.CallOption) (*Response, error)
	GetObjective(ctx context.Context, in *GetObjectiveRequest, opts ...grpc.CallOption) (*Response, error)
	GetScreen(ctx context.Context, in *GetScreenRequest, opts ...grpc.CallOption) (*Response, error)
	GetScreenMembers(ctx context.Context, in *GetScreenMembersRequest, opts ...grpc.CallOption) (*Response, error)
	GetScreensByCardType(ctx context.Context, in *GetScreensByCardTypeRequest, opts ...grpc.CallOption) (*Response, error)
}

type taskClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskClient(cc grpc.ClientConnInterface) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTasksName(ctx context.Context, in *GetTasksNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTasksName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskDispatch(ctx context.Context, in *GetTaskDispatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskDispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskTakers(ctx context.Context, in *GetTaskTakersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskTakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetPureTaskTakers(ctx context.Context, in *GetPureTaskTakersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetPureTaskTakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) TaskExists(ctx context.Context, in *TaskExistsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/TaskExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateGuideTask(ctx context.Context, in *CreateGuideTaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/CreateGuideTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) BatchQueryTask(ctx context.Context, in *BatchQueryTaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/BatchQueryTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskRelevantTakers(ctx context.Context, in *GetTaskRelevantTakersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskRelevantTakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateTaskRelation(ctx context.Context, in *UpdateTaskRelationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/UpdateTaskRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskShare(ctx context.Context, in *GetTaskShareRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateUserInteract(ctx context.Context, in *CreateUserInteractRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/CreateUserInteract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateUserInteract(ctx context.Context, in *UpdateUserInteractRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/UpdateUserInteract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateTaskActiveDetail(ctx context.Context, in *CreateTaskActiveDetailRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/CreateTaskActiveDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateProjectRelation(ctx context.Context, in *UpdateProjectRelationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/UpdateProjectRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetProjectMembers(ctx context.Context, in *GetProjectMembersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetProjectMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetProjectsName(ctx context.Context, in *GetProjectsNameRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetProjectsName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetUsersMorningAndEveningProgram(ctx context.Context, in *GetUsersMorningAndEveningProgramRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetUsersMorningAndEveningProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskWithParent(ctx context.Context, in *GetTaskWithParentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskWithParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceMembers(ctx context.Context, in *GetWorkspaceMembersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceList(ctx context.Context, in *GetWorkspaceListRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskChildren(ctx context.Context, in *GetTaskChildrenRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskChildren", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceFileSpace(ctx context.Context, in *GetWorkspaceFileSpaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceFileSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceBindProject(ctx context.Context, in *GetWorkspaceBindProjectRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceBindProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceExternalMember(ctx context.Context, in *GetWorkspaceExternalMemberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceExternalMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ExpireEquityUpdate(ctx context.Context, in *ExpireEquityUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/ExpireEquityUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) UpdateWorkspaceLevel(ctx context.Context, in *UpdateWorkspaceLevelRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/UpdateWorkspaceLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskWorkspace(ctx context.Context, in *GetTaskWorkspaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetTaskWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetProjectWorkspace(ctx context.Context, in *GetProjectWorkspaceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetProjectWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) AddMemberEquityUpdate(ctx context.Context, in *AddMemberEquityUpdateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/AddMemberEquityUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) BatchGetWorkspaceDirectory(ctx context.Context, in *BatchGetWorkspaceDirectoryRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/BatchGetWorkspaceDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetWorkspaceMembersOfTask(ctx context.Context, in *GetWorkspaceMembersOfTaskRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetWorkspaceMembersOfTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetBatchWorkspaceInfo(ctx context.Context, in *GetBatchWorkspaceInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetBatchWorkspaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CreateNewInvite(ctx context.Context, in *CreateNewInviteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/CreateNewInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetObjectiveMember(ctx context.Context, in *GetObjectiveMemberRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetObjectiveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetObjective(ctx context.Context, in *GetObjectiveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetObjective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetScreen(ctx context.Context, in *GetScreenRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetScreen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetScreenMembers(ctx context.Context, in *GetScreenMembersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetScreenMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetScreensByCardType(ctx context.Context, in *GetScreensByCardTypeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Task/GetScreensByCardType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	GetTask(context.Context, *GetTaskRequest) (*Response, error)
	GetTasksName(context.Context, *GetTasksNameRequest) (*Response, error)
	GetTaskDispatch(context.Context, *GetTaskDispatchRequest) (*Response, error)
	GetTaskTakers(context.Context, *GetTaskTakersRequest) (*Response, error)
	GetPureTaskTakers(context.Context, *GetPureTaskTakersRequest) (*Response, error)
	TaskExists(context.Context, *TaskExistsRequest) (*Response, error)
	CreateGuideTask(context.Context, *CreateGuideTaskRequest) (*Response, error)
	BatchQueryTask(context.Context, *BatchQueryTaskRequest) (*Response, error)
	GetTaskRelevantTakers(context.Context, *GetTaskRelevantTakersRequest) (*Response, error)
	UpdateTaskRelation(context.Context, *UpdateTaskRelationRequest) (*Response, error)
	GetTaskShare(context.Context, *GetTaskShareRequest) (*Response, error)
	CreateUserInteract(context.Context, *CreateUserInteractRequest) (*Response, error)
	UpdateUserInteract(context.Context, *UpdateUserInteractRequest) (*Response, error)
	CreateTaskActiveDetail(context.Context, *CreateTaskActiveDetailRequest) (*Response, error)
	UpdateProjectRelation(context.Context, *UpdateProjectRelationRequest) (*Response, error)
	GetProjectMembers(context.Context, *GetProjectMembersRequest) (*Response, error)
	GetProjectsName(context.Context, *GetProjectsNameRequest) (*Response, error)
	GetUsersMorningAndEveningProgram(context.Context, *GetUsersMorningAndEveningProgramRequest) (*Response, error)
	GetTaskWithParent(context.Context, *GetTaskWithParentRequest) (*Response, error)
	GetProject(context.Context, *GetProjectRequest) (*Response, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*Response, error)
	GetWorkspaceMembers(context.Context, *GetWorkspaceMembersRequest) (*Response, error)
	GetWorkspaceList(context.Context, *GetWorkspaceListRequest) (*Response, error)
	GetTaskChildren(context.Context, *GetTaskChildrenRequest) (*Response, error)
	GetWorkspaceFileSpace(context.Context, *GetWorkspaceFileSpaceRequest) (*Response, error)
	GetWorkspaceBindProject(context.Context, *GetWorkspaceBindProjectRequest) (*Response, error)
	GetWorkspaceExternalMember(context.Context, *GetWorkspaceExternalMemberRequest) (*Response, error)
	ExpireEquityUpdate(context.Context, *ExpireEquityUpdateRequest) (*Response, error)
	UpdateWorkspaceLevel(context.Context, *UpdateWorkspaceLevelRequest) (*Response, error)
	GetTaskWorkspace(context.Context, *GetTaskWorkspaceRequest) (*Response, error)
	GetProjectWorkspace(context.Context, *GetProjectWorkspaceRequest) (*Response, error)
	AddMemberEquityUpdate(context.Context, *AddMemberEquityUpdateRequest) (*Response, error)
	BatchGetWorkspaceDirectory(context.Context, *BatchGetWorkspaceDirectoryRequest) (*Response, error)
	GetWorkspaceMembersOfTask(context.Context, *GetWorkspaceMembersOfTaskRequest) (*Response, error)
	GetBatchWorkspaceInfo(context.Context, *GetBatchWorkspaceInfoRequest) (*Response, error)
	CreateNewInvite(context.Context, *CreateNewInviteRequest) (*Response, error)
	GetObjectiveMember(context.Context, *GetObjectiveMemberRequest) (*Response, error)
	GetObjective(context.Context, *GetObjectiveRequest) (*Response, error)
	GetScreen(context.Context, *GetScreenRequest) (*Response, error)
	GetScreenMembers(context.Context, *GetScreenMembersRequest) (*Response, error)
	GetScreensByCardType(context.Context, *GetScreensByCardTypeRequest) (*Response, error)
}

// UnimplementedTaskServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (*UnimplementedTaskServer) GetTask(context.Context, *GetTaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedTaskServer) GetTasksName(context.Context, *GetTasksNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksName not implemented")
}
func (*UnimplementedTaskServer) GetTaskDispatch(context.Context, *GetTaskDispatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskDispatch not implemented")
}
func (*UnimplementedTaskServer) GetTaskTakers(context.Context, *GetTaskTakersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskTakers not implemented")
}
func (*UnimplementedTaskServer) GetPureTaskTakers(context.Context, *GetPureTaskTakersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPureTaskTakers not implemented")
}
func (*UnimplementedTaskServer) TaskExists(context.Context, *TaskExistsRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskExists not implemented")
}
func (*UnimplementedTaskServer) CreateGuideTask(context.Context, *CreateGuideTaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGuideTask not implemented")
}
func (*UnimplementedTaskServer) BatchQueryTask(context.Context, *BatchQueryTaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryTask not implemented")
}
func (*UnimplementedTaskServer) GetTaskRelevantTakers(context.Context, *GetTaskRelevantTakersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskRelevantTakers not implemented")
}
func (*UnimplementedTaskServer) UpdateTaskRelation(context.Context, *UpdateTaskRelationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskRelation not implemented")
}
func (*UnimplementedTaskServer) GetTaskShare(context.Context, *GetTaskShareRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskShare not implemented")
}
func (*UnimplementedTaskServer) CreateUserInteract(context.Context, *CreateUserInteractRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInteract not implemented")
}
func (*UnimplementedTaskServer) UpdateUserInteract(context.Context, *UpdateUserInteractRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInteract not implemented")
}
func (*UnimplementedTaskServer) CreateTaskActiveDetail(context.Context, *CreateTaskActiveDetailRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskActiveDetail not implemented")
}
func (*UnimplementedTaskServer) UpdateProjectRelation(context.Context, *UpdateProjectRelationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRelation not implemented")
}
func (*UnimplementedTaskServer) GetProjectMembers(context.Context, *GetProjectMembersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectMembers not implemented")
}
func (*UnimplementedTaskServer) GetProjectsName(context.Context, *GetProjectsNameRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsName not implemented")
}
func (*UnimplementedTaskServer) GetUsersMorningAndEveningProgram(context.Context, *GetUsersMorningAndEveningProgramRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersMorningAndEveningProgram not implemented")
}
func (*UnimplementedTaskServer) GetTaskWithParent(context.Context, *GetTaskWithParentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskWithParent not implemented")
}
func (*UnimplementedTaskServer) GetProject(context.Context, *GetProjectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedTaskServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceMembers(context.Context, *GetWorkspaceMembersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceMembers not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceList(context.Context, *GetWorkspaceListRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceList not implemented")
}
func (*UnimplementedTaskServer) GetTaskChildren(context.Context, *GetTaskChildrenRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskChildren not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceFileSpace(context.Context, *GetWorkspaceFileSpaceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceFileSpace not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceBindProject(context.Context, *GetWorkspaceBindProjectRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceBindProject not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceExternalMember(context.Context, *GetWorkspaceExternalMemberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceExternalMember not implemented")
}
func (*UnimplementedTaskServer) ExpireEquityUpdate(context.Context, *ExpireEquityUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpireEquityUpdate not implemented")
}
func (*UnimplementedTaskServer) UpdateWorkspaceLevel(context.Context, *UpdateWorkspaceLevelRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkspaceLevel not implemented")
}
func (*UnimplementedTaskServer) GetTaskWorkspace(context.Context, *GetTaskWorkspaceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskWorkspace not implemented")
}
func (*UnimplementedTaskServer) GetProjectWorkspace(context.Context, *GetProjectWorkspaceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectWorkspace not implemented")
}
func (*UnimplementedTaskServer) AddMemberEquityUpdate(context.Context, *AddMemberEquityUpdateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberEquityUpdate not implemented")
}
func (*UnimplementedTaskServer) BatchGetWorkspaceDirectory(context.Context, *BatchGetWorkspaceDirectoryRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetWorkspaceDirectory not implemented")
}
func (*UnimplementedTaskServer) GetWorkspaceMembersOfTask(context.Context, *GetWorkspaceMembersOfTaskRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceMembersOfTask not implemented")
}
func (*UnimplementedTaskServer) GetBatchWorkspaceInfo(context.Context, *GetBatchWorkspaceInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchWorkspaceInfo not implemented")
}
func (*UnimplementedTaskServer) CreateNewInvite(context.Context, *CreateNewInviteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewInvite not implemented")
}
func (*UnimplementedTaskServer) GetObjectiveMember(context.Context, *GetObjectiveMemberRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectiveMember not implemented")
}
func (*UnimplementedTaskServer) GetObjective(context.Context, *GetObjectiveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjective not implemented")
}
func (*UnimplementedTaskServer) GetScreen(context.Context, *GetScreenRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreen not implemented")
}
func (*UnimplementedTaskServer) GetScreenMembers(context.Context, *GetScreenMembersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenMembers not implemented")
}
func (*UnimplementedTaskServer) GetScreensByCardType(context.Context, *GetScreensByCardTypeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreensByCardType not implemented")
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTasksName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTasksName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTasksName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTasksName(ctx, req.(*GetTasksNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskDispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskDispatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskDispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskDispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskDispatch(ctx, req.(*GetTaskDispatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskTakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskTakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskTakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskTakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskTakers(ctx, req.(*GetTaskTakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetPureTaskTakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPureTaskTakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetPureTaskTakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetPureTaskTakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetPureTaskTakers(ctx, req.(*GetPureTaskTakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_TaskExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).TaskExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/TaskExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).TaskExists(ctx, req.(*TaskExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateGuideTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuideTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateGuideTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/CreateGuideTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateGuideTask(ctx, req.(*CreateGuideTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_BatchQueryTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).BatchQueryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/BatchQueryTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).BatchQueryTask(ctx, req.(*BatchQueryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskRelevantTakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRelevantTakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskRelevantTakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskRelevantTakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskRelevantTakers(ctx, req.(*GetTaskRelevantTakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateTaskRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateTaskRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/UpdateTaskRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateTaskRelation(ctx, req.(*UpdateTaskRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskShare(ctx, req.(*GetTaskShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateUserInteract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInteractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateUserInteract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/CreateUserInteract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateUserInteract(ctx, req.(*CreateUserInteractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateUserInteract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInteractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateUserInteract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/UpdateUserInteract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateUserInteract(ctx, req.(*UpdateUserInteractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateTaskActiveDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskActiveDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateTaskActiveDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/CreateTaskActiveDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateTaskActiveDetail(ctx, req.(*CreateTaskActiveDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateProjectRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateProjectRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/UpdateProjectRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateProjectRelation(ctx, req.(*UpdateProjectRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetProjectMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetProjectMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetProjectMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetProjectMembers(ctx, req.(*GetProjectMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetProjectsName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetProjectsName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetProjectsName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetProjectsName(ctx, req.(*GetProjectsNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetUsersMorningAndEveningProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersMorningAndEveningProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetUsersMorningAndEveningProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetUsersMorningAndEveningProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetUsersMorningAndEveningProgram(ctx, req.(*GetUsersMorningAndEveningProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskWithParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskWithParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskWithParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskWithParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskWithParent(ctx, req.(*GetTaskWithParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceMembers(ctx, req.(*GetWorkspaceMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceList(ctx, req.(*GetWorkspaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskChildren(ctx, req.(*GetTaskChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceFileSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceFileSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceFileSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceFileSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceFileSpace(ctx, req.(*GetWorkspaceFileSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceBindProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceBindProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceBindProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceBindProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceBindProject(ctx, req.(*GetWorkspaceBindProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceExternalMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceExternalMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceExternalMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceExternalMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceExternalMember(ctx, req.(*GetWorkspaceExternalMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ExpireEquityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireEquityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ExpireEquityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/ExpireEquityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ExpireEquityUpdate(ctx, req.(*ExpireEquityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_UpdateWorkspaceLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkspaceLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).UpdateWorkspaceLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/UpdateWorkspaceLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).UpdateWorkspaceLevel(ctx, req.(*UpdateWorkspaceLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetTaskWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskWorkspace(ctx, req.(*GetTaskWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetProjectWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetProjectWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetProjectWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetProjectWorkspace(ctx, req.(*GetProjectWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_AddMemberEquityUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberEquityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).AddMemberEquityUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/AddMemberEquityUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).AddMemberEquityUpdate(ctx, req.(*AddMemberEquityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_BatchGetWorkspaceDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetWorkspaceDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).BatchGetWorkspaceDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/BatchGetWorkspaceDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).BatchGetWorkspaceDirectory(ctx, req.(*BatchGetWorkspaceDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetWorkspaceMembersOfTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceMembersOfTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetWorkspaceMembersOfTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetWorkspaceMembersOfTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetWorkspaceMembersOfTask(ctx, req.(*GetWorkspaceMembersOfTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetBatchWorkspaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchWorkspaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetBatchWorkspaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetBatchWorkspaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetBatchWorkspaceInfo(ctx, req.(*GetBatchWorkspaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CreateNewInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CreateNewInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/CreateNewInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CreateNewInvite(ctx, req.(*CreateNewInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetObjectiveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectiveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetObjectiveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetObjectiveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetObjectiveMember(ctx, req.(*GetObjectiveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetObjective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetObjective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetObjective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetObjective(ctx, req.(*GetObjectiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetScreen(ctx, req.(*GetScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetScreenMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetScreenMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetScreenMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetScreenMembers(ctx, req.(*GetScreenMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetScreensByCardType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreensByCardTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetScreensByCardType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Task/GetScreensByCardType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetScreensByCardType(ctx, req.(*GetScreensByCardTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _Task_GetTask_Handler,
		},
		{
			MethodName: "GetTasksName",
			Handler:    _Task_GetTasksName_Handler,
		},
		{
			MethodName: "GetTaskDispatch",
			Handler:    _Task_GetTaskDispatch_Handler,
		},
		{
			MethodName: "GetTaskTakers",
			Handler:    _Task_GetTaskTakers_Handler,
		},
		{
			MethodName: "GetPureTaskTakers",
			Handler:    _Task_GetPureTaskTakers_Handler,
		},
		{
			MethodName: "TaskExists",
			Handler:    _Task_TaskExists_Handler,
		},
		{
			MethodName: "CreateGuideTask",
			Handler:    _Task_CreateGuideTask_Handler,
		},
		{
			MethodName: "BatchQueryTask",
			Handler:    _Task_BatchQueryTask_Handler,
		},
		{
			MethodName: "GetTaskRelevantTakers",
			Handler:    _Task_GetTaskRelevantTakers_Handler,
		},
		{
			MethodName: "UpdateTaskRelation",
			Handler:    _Task_UpdateTaskRelation_Handler,
		},
		{
			MethodName: "GetTaskShare",
			Handler:    _Task_GetTaskShare_Handler,
		},
		{
			MethodName: "CreateUserInteract",
			Handler:    _Task_CreateUserInteract_Handler,
		},
		{
			MethodName: "UpdateUserInteract",
			Handler:    _Task_UpdateUserInteract_Handler,
		},
		{
			MethodName: "CreateTaskActiveDetail",
			Handler:    _Task_CreateTaskActiveDetail_Handler,
		},
		{
			MethodName: "UpdateProjectRelation",
			Handler:    _Task_UpdateProjectRelation_Handler,
		},
		{
			MethodName: "GetProjectMembers",
			Handler:    _Task_GetProjectMembers_Handler,
		},
		{
			MethodName: "GetProjectsName",
			Handler:    _Task_GetProjectsName_Handler,
		},
		{
			MethodName: "GetUsersMorningAndEveningProgram",
			Handler:    _Task_GetUsersMorningAndEveningProgram_Handler,
		},
		{
			MethodName: "GetTaskWithParent",
			Handler:    _Task_GetTaskWithParent_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Task_GetProject_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Task_GetWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceMembers",
			Handler:    _Task_GetWorkspaceMembers_Handler,
		},
		{
			MethodName: "GetWorkspaceList",
			Handler:    _Task_GetWorkspaceList_Handler,
		},
		{
			MethodName: "GetTaskChildren",
			Handler:    _Task_GetTaskChildren_Handler,
		},
		{
			MethodName: "GetWorkspaceFileSpace",
			Handler:    _Task_GetWorkspaceFileSpace_Handler,
		},
		{
			MethodName: "GetWorkspaceBindProject",
			Handler:    _Task_GetWorkspaceBindProject_Handler,
		},
		{
			MethodName: "GetWorkspaceExternalMember",
			Handler:    _Task_GetWorkspaceExternalMember_Handler,
		},
		{
			MethodName: "ExpireEquityUpdate",
			Handler:    _Task_ExpireEquityUpdate_Handler,
		},
		{
			MethodName: "UpdateWorkspaceLevel",
			Handler:    _Task_UpdateWorkspaceLevel_Handler,
		},
		{
			MethodName: "GetTaskWorkspace",
			Handler:    _Task_GetTaskWorkspace_Handler,
		},
		{
			MethodName: "GetProjectWorkspace",
			Handler:    _Task_GetProjectWorkspace_Handler,
		},
		{
			MethodName: "AddMemberEquityUpdate",
			Handler:    _Task_AddMemberEquityUpdate_Handler,
		},
		{
			MethodName: "BatchGetWorkspaceDirectory",
			Handler:    _Task_BatchGetWorkspaceDirectory_Handler,
		},
		{
			MethodName: "GetWorkspaceMembersOfTask",
			Handler:    _Task_GetWorkspaceMembersOfTask_Handler,
		},
		{
			MethodName: "GetBatchWorkspaceInfo",
			Handler:    _Task_GetBatchWorkspaceInfo_Handler,
		},
		{
			MethodName: "CreateNewInvite",
			Handler:    _Task_CreateNewInvite_Handler,
		},
		{
			MethodName: "GetObjectiveMember",
			Handler:    _Task_GetObjectiveMember_Handler,
		},
		{
			MethodName: "GetObjective",
			Handler:    _Task_GetObjective_Handler,
		},
		{
			MethodName: "GetScreen",
			Handler:    _Task_GetScreen_Handler,
		},
		{
			MethodName: "GetScreenMembers",
			Handler:    _Task_GetScreenMembers_Handler,
		},
		{
			MethodName: "GetScreensByCardType",
			Handler:    _Task_GetScreensByCardType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
