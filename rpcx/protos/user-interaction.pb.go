// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: user-interaction.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonCreateCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefType        string            `protobuf:"bytes,1,opt,name=RefType,proto3" json:"RefType,omitempty"`                // 关联类型，task，record
	RefID          string            `protobuf:"bytes,2,opt,name=RefID,proto3" json:"RefID,omitempty"`                    // 关联id
	MsgType        int64             `protobuf:"varint,3,opt,name=MsgType,proto3" json:"MsgType,omitempty"`               // 消息类型
	SystemType     int64             `protobuf:"varint,4,opt,name=SystemType,proto3" json:"SystemType,omitempty"`         // 系统消息类型
	Content        string            `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`                // 消息内容
	AffectedUID    string            `protobuf:"bytes,6,opt,name=AffectedUID,proto3" json:"AffectedUID,omitempty"`        // 受影响人id，多个用逗号隔开
	NotifyUID      string            `protobuf:"bytes,7,opt,name=NotifyUID,proto3" json:"NotifyUID,omitempty"`            // 通知用户id，多个用逗号隔开
	NotPushDynamic bool              `protobuf:"varint,8,opt,name=NotPushDynamic,proto3" json:"NotPushDynamic,omitempty"` // 不推送动态
	Context        *UserContext      `protobuf:"bytes,9,opt,name=Context,proto3" json:"Context,omitempty"`
	NotStore       bool              `protobuf:"varint,10,opt,name=NotStore,proto3" json:"NotStore,omitempty"`                                                                                      // 不需要存储数据库
	Cronjobs       string            `protobuf:"bytes,11,opt,name=Cronjobs,proto3" json:"Cronjobs,omitempty"`                                                                                       // 需要推送的定时任务，json格式
	Changes        map[string]string `protobuf:"bytes,12,rep,name=Changes,proto3" json:"Changes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 变化
	NotPushSocket  bool              `protobuf:"varint,13,opt,name=NotPushSocket,proto3" json:"NotPushSocket,omitempty"`                                                                            // 不推送websocket
	BatchID        string            `protobuf:"bytes,14,opt,name=BatchID,proto3" json:"BatchID,omitempty"`                                                                                         // 是否批量操作
	BatchType      int32             `protobuf:"varint,15,opt,name=BatchType,proto3" json:"BatchType,omitempty"`                                                                                    // 批量类型
	BatchRefID     string            `protobuf:"bytes,16,opt,name=BatchRefID,proto3" json:"BatchRefID,omitempty"`                                                                                   // 批量操作关联id
	MarkRead       bool              `protobuf:"varint,17,opt,name=MarkRead,proto3" json:"MarkRead,omitempty"`                                                                                      // 标记为已读
	MsgForamt      int64             `protobuf:"varint,18,opt,name=MsgForamt,proto3" json:"MsgForamt,omitempty"`                                                                                    // 消息格式
	Files          []*File           `protobuf:"bytes,19,rep,name=Files,proto3" json:"Files,omitempty"`                                                                                             // 文件信息
	KrID           string            `protobuf:"bytes,20,opt,name=KrID,proto3" json:"KrID,omitempty"`                                                                                               // kr id
}

func (x *CommonCreateCommentRequest) Reset() {
	*x = CommonCreateCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCreateCommentRequest) ProtoMessage() {}

func (x *CommonCreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CommonCreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{0}
}

func (x *CommonCreateCommentRequest) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetMsgType() int64 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *CommonCreateCommentRequest) GetSystemType() int64 {
	if x != nil {
		return x.SystemType
	}
	return 0
}

func (x *CommonCreateCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetAffectedUID() string {
	if x != nil {
		return x.AffectedUID
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetNotifyUID() string {
	if x != nil {
		return x.NotifyUID
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetNotPushDynamic() bool {
	if x != nil {
		return x.NotPushDynamic
	}
	return false
}

func (x *CommonCreateCommentRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CommonCreateCommentRequest) GetNotStore() bool {
	if x != nil {
		return x.NotStore
	}
	return false
}

func (x *CommonCreateCommentRequest) GetCronjobs() string {
	if x != nil {
		return x.Cronjobs
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetChanges() map[string]string {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CommonCreateCommentRequest) GetNotPushSocket() bool {
	if x != nil {
		return x.NotPushSocket
	}
	return false
}

func (x *CommonCreateCommentRequest) GetBatchID() string {
	if x != nil {
		return x.BatchID
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetBatchType() int32 {
	if x != nil {
		return x.BatchType
	}
	return 0
}

func (x *CommonCreateCommentRequest) GetBatchRefID() string {
	if x != nil {
		return x.BatchRefID
	}
	return ""
}

func (x *CommonCreateCommentRequest) GetMarkRead() bool {
	if x != nil {
		return x.MarkRead
	}
	return false
}

func (x *CommonCreateCommentRequest) GetMsgForamt() int64 {
	if x != nil {
		return x.MsgForamt
	}
	return 0
}

func (x *CommonCreateCommentRequest) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CommonCreateCommentRequest) GetKrID() string {
	if x != nil {
		return x.KrID
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`         // 文件id
	Entry  string `protobuf:"bytes,2,opt,name=Entry,proto3" json:"Entry,omitempty"`   // 入口
	Name   string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`     // 名称
	Origin string `protobuf:"bytes,4,opt,name=Origin,proto3" json:"Origin,omitempty"` // 来源
	Size   string `protobuf:"bytes,5,opt,name=Size,proto3" json:"Size,omitempty"`     // 文件大小
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *File) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *File) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type CommonCreateCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID string `protobuf:"bytes,1,opt,name=CommentID,proto3" json:"CommentID,omitempty"` // 评论id
}

func (x *CommonCreateCommentResponse) Reset() {
	*x = CommonCreateCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCreateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCreateCommentResponse) ProtoMessage() {}

func (x *CommonCreateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCreateCommentResponse.ProtoReflect.Descriptor instead.
func (*CommonCreateCommentResponse) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{2}
}

func (x *CommonCreateCommentResponse) GetCommentID() string {
	if x != nil {
		return x.CommentID
	}
	return ""
}

type GetTaskNewCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentMap map[string]string `protobuf:"bytes,1,rep,name=CommentMap,proto3" json:"CommentMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 评论id,map[task_id]comment_id
	Context    *UserContext      `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetTaskNewCommentRequest) Reset() {
	*x = GetTaskNewCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskNewCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskNewCommentRequest) ProtoMessage() {}

func (x *GetTaskNewCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskNewCommentRequest.ProtoReflect.Descriptor instead.
func (*GetTaskNewCommentRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{3}
}

func (x *GetTaskNewCommentRequest) GetCommentMap() map[string]string {
	if x != nil {
		return x.CommentMap
	}
	return nil
}

func (x *GetTaskNewCommentRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetTaskNewCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TaskNewComment `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"` // 任务最新评论
}

func (x *GetTaskNewCommentResponse) Reset() {
	*x = GetTaskNewCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskNewCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskNewCommentResponse) ProtoMessage() {}

func (x *GetTaskNewCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskNewCommentResponse.ProtoReflect.Descriptor instead.
func (*GetTaskNewCommentResponse) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskNewCommentResponse) GetData() []*TaskNewComment {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskNewComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      string `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`            // 事项id
	Content     string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`          // 评论内容
	IsImportant bool   `protobuf:"varint,3,opt,name=IsImportant,proto3" json:"IsImportant,omitempty"` // 是否重点
	CreateAt    int64  `protobuf:"varint,4,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`       // 评论时间
}

func (x *TaskNewComment) Reset() {
	*x = TaskNewComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNewComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNewComment) ProtoMessage() {}

func (x *TaskNewComment) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNewComment.ProtoReflect.Descriptor instead.
func (*TaskNewComment) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{5}
}

func (x *TaskNewComment) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskNewComment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *TaskNewComment) GetIsImportant() bool {
	if x != nil {
		return x.IsImportant
	}
	return false
}

func (x *TaskNewComment) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type MarkReadCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefType string       `protobuf:"bytes,1,opt,name=RefType,proto3" json:"RefType,omitempty"` // 关联类型，task，record
	RefID   string       `protobuf:"bytes,2,opt,name=RefID,proto3" json:"RefID,omitempty"`     // 关联id
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *MarkReadCommentRequest) Reset() {
	*x = MarkReadCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkReadCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkReadCommentRequest) ProtoMessage() {}

func (x *MarkReadCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkReadCommentRequest.ProtoReflect.Descriptor instead.
func (*MarkReadCommentRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{6}
}

func (x *MarkReadCommentRequest) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *MarkReadCommentRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *MarkReadCommentRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type UpdateCommentFileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefType  string       `protobuf:"bytes,1,opt,name=RefType,proto3" json:"RefType,omitempty"`   // 关联类型，task，record
	RefID    string       `protobuf:"bytes,2,opt,name=RefID,proto3" json:"RefID,omitempty"`       // 关联id
	FileID   string       `protobuf:"bytes,3,opt,name=FileID,proto3" json:"FileID,omitempty"`     // 文件id
	FileName string       `protobuf:"bytes,4,opt,name=FileName,proto3" json:"FileName,omitempty"` // 文件名称
	Context  *UserContext `protobuf:"bytes,5,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *UpdateCommentFileInfoRequest) Reset() {
	*x = UpdateCommentFileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentFileInfoRequest) ProtoMessage() {}

func (x *UpdateCommentFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentFileInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCommentFileInfoRequest) GetRefType() string {
	if x != nil {
		return x.RefType
	}
	return ""
}

func (x *UpdateCommentFileInfoRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *UpdateCommentFileInfoRequest) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *UpdateCommentFileInfoRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *UpdateCommentFileInfoRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryUserTaskCommentTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefID   string       `protobuf:"bytes,1,opt,name=RefID,proto3" json:"RefID,omitempty"`
	UserID  string       `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,3,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *QueryUserTaskCommentTotalRequest) Reset() {
	*x = QueryUserTaskCommentTotalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserTaskCommentTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserTaskCommentTotalRequest) ProtoMessage() {}

func (x *QueryUserTaskCommentTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserTaskCommentTotalRequest.ProtoReflect.Descriptor instead.
func (*QueryUserTaskCommentTotalRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{8}
}

func (x *QueryUserTaskCommentTotalRequest) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *QueryUserTaskCommentTotalRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *QueryUserTaskCommentTotalRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type QueryUserTaskCommentTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserTaskCommentTotal `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *QueryUserTaskCommentTotalResponse) Reset() {
	*x = QueryUserTaskCommentTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserTaskCommentTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserTaskCommentTotalResponse) ProtoMessage() {}

func (x *QueryUserTaskCommentTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserTaskCommentTotalResponse.ProtoReflect.Descriptor instead.
func (*QueryUserTaskCommentTotalResponse) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{9}
}

func (x *QueryUserTaskCommentTotalResponse) GetData() []*UserTaskCommentTotal {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserTaskCommentTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID                 string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`                                  // 用户id
	CommentTotal           int64  `protobuf:"varint,2,opt,name=CommentTotal,proto3" json:"CommentTotal,omitempty"`                     // 评论数量
	ImportantTotal         int64  `protobuf:"varint,3,opt,name=ImportantTotal,proto3" json:"ImportantTotal,omitempty"`                 // 重点数量
	QuoteTotal             int64  `protobuf:"varint,4,opt,name=QuoteTotal,proto3" json:"QuoteTotal,omitempty"`                         // 引用数量
	GadgetTotal            int64  `protobuf:"varint,5,opt,name=GadgetTotal,proto3" json:"GadgetTotal,omitempty"`                       // 小工具数量
	GadgetMeetingTotal     int64  `protobuf:"varint,6,opt,name=GadgetMeetingTotal,proto3" json:"GadgetMeetingTotal,omitempty"`         // 小工具会议数量
	GadgetTimeCollectTotal int64  `protobuf:"varint,7,opt,name=GadgetTimeCollectTotal,proto3" json:"GadgetTimeCollectTotal,omitempty"` // 小工具时间征集数量
	GadgetNoticeTotal      int64  `protobuf:"varint,8,opt,name=GadgetNoticeTotal,proto3" json:"GadgetNoticeTotal,omitempty"`           // 小工具公告数量
	GadgetTodoTotal        int64  `protobuf:"varint,9,opt,name=GadgetTodoTotal,proto3" json:"GadgetTodoTotal,omitempty"`               // 小工具待办数量
}

func (x *UserTaskCommentTotal) Reset() {
	*x = UserTaskCommentTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskCommentTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskCommentTotal) ProtoMessage() {}

func (x *UserTaskCommentTotal) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskCommentTotal.ProtoReflect.Descriptor instead.
func (*UserTaskCommentTotal) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{10}
}

func (x *UserTaskCommentTotal) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserTaskCommentTotal) GetCommentTotal() int64 {
	if x != nil {
		return x.CommentTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetImportantTotal() int64 {
	if x != nil {
		return x.ImportantTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetQuoteTotal() int64 {
	if x != nil {
		return x.QuoteTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetGadgetTotal() int64 {
	if x != nil {
		return x.GadgetTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetGadgetMeetingTotal() int64 {
	if x != nil {
		return x.GadgetMeetingTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetGadgetTimeCollectTotal() int64 {
	if x != nil {
		return x.GadgetTimeCollectTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetGadgetNoticeTotal() int64 {
	if x != nil {
		return x.GadgetNoticeTotal
	}
	return 0
}

func (x *UserTaskCommentTotal) GetGadgetTodoTotal() int64 {
	if x != nil {
		return x.GadgetTodoTotal
	}
	return 0
}

type BatchQueryChatUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *UserContext `protobuf:"bytes,1,opt,name=Context,proto3" json:"Context,omitempty"`
	ChatsID []string     `protobuf:"bytes,2,rep,name=ChatsID,proto3" json:"ChatsID,omitempty"` // 聊天id列表
}

func (x *BatchQueryChatUsersRequest) Reset() {
	*x = BatchQueryChatUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryChatUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryChatUsersRequest) ProtoMessage() {}

func (x *BatchQueryChatUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryChatUsersRequest.ProtoReflect.Descriptor instead.
func (*BatchQueryChatUsersRequest) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{11}
}

func (x *BatchQueryChatUsersRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *BatchQueryChatUsersRequest) GetChatsID() []string {
	if x != nil {
		return x.ChatsID
	}
	return nil
}

type BatchQueryChatUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatUsers []*ChatUser `protobuf:"bytes,1,rep,name=ChatUsers,proto3" json:"ChatUsers,omitempty"` // 聊天用户信息
}

func (x *BatchQueryChatUsersResponse) Reset() {
	*x = BatchQueryChatUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchQueryChatUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchQueryChatUsersResponse) ProtoMessage() {}

func (x *BatchQueryChatUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchQueryChatUsersResponse.ProtoReflect.Descriptor instead.
func (*BatchQueryChatUsersResponse) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{12}
}

func (x *BatchQueryChatUsersResponse) GetChatUsers() []*ChatUser {
	if x != nil {
		return x.ChatUsers
	}
	return nil
}

type ChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatID string `protobuf:"bytes,1,opt,name=ChatID,proto3" json:"ChatID,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *ChatUser) Reset() {
	*x = ChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_interaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatUser) ProtoMessage() {}

func (x *ChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_interaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatUser.ProtoReflect.Descriptor instead.
func (*ChatUser) Descriptor() ([]byte, []int) {
	return file_user_interaction_proto_rawDescGZIP(), []int{13}
}

func (x *ChatUser) GetChatID() string {
	if x != nil {
		return x.ChatID
	}
	return ""
}

func (x *ChatUser) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

var File_user_interaction_proto protoreflect.FileDescriptor

var file_user_interaction_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x05,
	0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x50, 0x75,
	0x73, 0x68, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x61, 0x6d, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x4d, 0x73, 0x67, 0x46, 0x6f, 0x72, 0x61, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x05, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x72,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4b, 0x72, 0x49, 0x44, 0x1a, 0x3a,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3b, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x22, 0x73, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7b, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52,
	0x65, 0x66, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x51, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c,
	0x0a, 0x11, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x47, 0x61, 0x64, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x47, 0x61, 0x64, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x64,
	0x6f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x61, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x68, 0x61, 0x74, 0x73, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x1b, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x32, 0xf6, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x24, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_interaction_proto_rawDescOnce sync.Once
	file_user_interaction_proto_rawDescData = file_user_interaction_proto_rawDesc
)

func file_user_interaction_proto_rawDescGZIP() []byte {
	file_user_interaction_proto_rawDescOnce.Do(func() {
		file_user_interaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_interaction_proto_rawDescData)
	})
	return file_user_interaction_proto_rawDescData
}

var file_user_interaction_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_user_interaction_proto_goTypes = []interface{}{
	(*CommonCreateCommentRequest)(nil),        // 0: pb.CommonCreateCommentRequest
	(*File)(nil),                              // 1: pb.File
	(*CommonCreateCommentResponse)(nil),       // 2: pb.CommonCreateCommentResponse
	(*GetTaskNewCommentRequest)(nil),          // 3: pb.GetTaskNewCommentRequest
	(*GetTaskNewCommentResponse)(nil),         // 4: pb.GetTaskNewCommentResponse
	(*TaskNewComment)(nil),                    // 5: pb.TaskNewComment
	(*MarkReadCommentRequest)(nil),            // 6: pb.MarkReadCommentRequest
	(*UpdateCommentFileInfoRequest)(nil),      // 7: pb.UpdateCommentFileInfoRequest
	(*QueryUserTaskCommentTotalRequest)(nil),  // 8: pb.QueryUserTaskCommentTotalRequest
	(*QueryUserTaskCommentTotalResponse)(nil), // 9: pb.QueryUserTaskCommentTotalResponse
	(*UserTaskCommentTotal)(nil),              // 10: pb.UserTaskCommentTotal
	(*BatchQueryChatUsersRequest)(nil),        // 11: pb.BatchQueryChatUsersRequest
	(*BatchQueryChatUsersResponse)(nil),       // 12: pb.BatchQueryChatUsersResponse
	(*ChatUser)(nil),                          // 13: pb.ChatUser
	nil,                                       // 14: pb.CommonCreateCommentRequest.ChangesEntry
	nil,                                       // 15: pb.GetTaskNewCommentRequest.CommentMapEntry
	(*UserContext)(nil),                       // 16: pb.UserContext
	(*Response)(nil),                          // 17: pb.Response
}
var file_user_interaction_proto_depIdxs = []int32{
	16, // 0: pb.CommonCreateCommentRequest.Context:type_name -> pb.UserContext
	14, // 1: pb.CommonCreateCommentRequest.Changes:type_name -> pb.CommonCreateCommentRequest.ChangesEntry
	1,  // 2: pb.CommonCreateCommentRequest.Files:type_name -> pb.File
	15, // 3: pb.GetTaskNewCommentRequest.CommentMap:type_name -> pb.GetTaskNewCommentRequest.CommentMapEntry
	16, // 4: pb.GetTaskNewCommentRequest.Context:type_name -> pb.UserContext
	5,  // 5: pb.GetTaskNewCommentResponse.Data:type_name -> pb.TaskNewComment
	16, // 6: pb.MarkReadCommentRequest.Context:type_name -> pb.UserContext
	16, // 7: pb.UpdateCommentFileInfoRequest.Context:type_name -> pb.UserContext
	16, // 8: pb.QueryUserTaskCommentTotalRequest.Context:type_name -> pb.UserContext
	10, // 9: pb.QueryUserTaskCommentTotalResponse.Data:type_name -> pb.UserTaskCommentTotal
	16, // 10: pb.BatchQueryChatUsersRequest.Context:type_name -> pb.UserContext
	13, // 11: pb.BatchQueryChatUsersResponse.ChatUsers:type_name -> pb.ChatUser
	0,  // 12: pb.UserInteraction.CommonCreateComment:input_type -> pb.CommonCreateCommentRequest
	3,  // 13: pb.UserInteraction.GetTaskNewComment:input_type -> pb.GetTaskNewCommentRequest
	7,  // 14: pb.UserInteraction.UpdateCommentFileInfo:input_type -> pb.UpdateCommentFileInfoRequest
	8,  // 15: pb.UserInteraction.QueryUserTaskCommentTotal:input_type -> pb.QueryUserTaskCommentTotalRequest
	11, // 16: pb.UserInteraction.BatchQueryChatUsers:input_type -> pb.BatchQueryChatUsersRequest
	17, // 17: pb.UserInteraction.CommonCreateComment:output_type -> pb.Response
	17, // 18: pb.UserInteraction.GetTaskNewComment:output_type -> pb.Response
	17, // 19: pb.UserInteraction.UpdateCommentFileInfo:output_type -> pb.Response
	17, // 20: pb.UserInteraction.QueryUserTaskCommentTotal:output_type -> pb.Response
	17, // 21: pb.UserInteraction.BatchQueryChatUsers:output_type -> pb.Response
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_user_interaction_proto_init() }
func file_user_interaction_proto_init() {
	if File_user_interaction_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_interaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCreateCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCreateCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskNewCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskNewCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNewComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkReadCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommentFileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserTaskCommentTotalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserTaskCommentTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskCommentTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryChatUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchQueryChatUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_interaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_interaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_interaction_proto_goTypes,
		DependencyIndexes: file_user_interaction_proto_depIdxs,
		MessageInfos:      file_user_interaction_proto_msgTypes,
	}.Build()
	File_user_interaction_proto = out.File
	file_user_interaction_proto_rawDesc = nil
	file_user_interaction_proto_goTypes = nil
	file_user_interaction_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserInteractionClient is the client API for UserInteraction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserInteractionClient interface {
	CommonCreateComment(ctx context.Context, in *CommonCreateCommentRequest, opts ...grpc.CallOption) (*Response, error)
	GetTaskNewComment(ctx context.Context, in *GetTaskNewCommentRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCommentFileInfo(ctx context.Context, in *UpdateCommentFileInfoRequest, opts ...grpc.CallOption) (*Response, error)
	QueryUserTaskCommentTotal(ctx context.Context, in *QueryUserTaskCommentTotalRequest, opts ...grpc.CallOption) (*Response, error)
	BatchQueryChatUsers(ctx context.Context, in *BatchQueryChatUsersRequest, opts ...grpc.CallOption) (*Response, error)
}

type userInteractionClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInteractionClient(cc grpc.ClientConnInterface) UserInteractionClient {
	return &userInteractionClient{cc}
}

func (c *userInteractionClient) CommonCreateComment(ctx context.Context, in *CommonCreateCommentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserInteraction/CommonCreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionClient) GetTaskNewComment(ctx context.Context, in *GetTaskNewCommentRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserInteraction/GetTaskNewComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionClient) UpdateCommentFileInfo(ctx context.Context, in *UpdateCommentFileInfoRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserInteraction/UpdateCommentFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionClient) QueryUserTaskCommentTotal(ctx context.Context, in *QueryUserTaskCommentTotalRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserInteraction/QueryUserTaskCommentTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInteractionClient) BatchQueryChatUsers(ctx context.Context, in *BatchQueryChatUsersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserInteraction/BatchQueryChatUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInteractionServer is the server API for UserInteraction service.
type UserInteractionServer interface {
	CommonCreateComment(context.Context, *CommonCreateCommentRequest) (*Response, error)
	GetTaskNewComment(context.Context, *GetTaskNewCommentRequest) (*Response, error)
	UpdateCommentFileInfo(context.Context, *UpdateCommentFileInfoRequest) (*Response, error)
	QueryUserTaskCommentTotal(context.Context, *QueryUserTaskCommentTotalRequest) (*Response, error)
	BatchQueryChatUsers(context.Context, *BatchQueryChatUsersRequest) (*Response, error)
}

// UnimplementedUserInteractionServer can be embedded to have forward compatible implementations.
type UnimplementedUserInteractionServer struct {
}

func (*UnimplementedUserInteractionServer) CommonCreateComment(context.Context, *CommonCreateCommentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonCreateComment not implemented")
}
func (*UnimplementedUserInteractionServer) GetTaskNewComment(context.Context, *GetTaskNewCommentRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskNewComment not implemented")
}
func (*UnimplementedUserInteractionServer) UpdateCommentFileInfo(context.Context, *UpdateCommentFileInfoRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentFileInfo not implemented")
}
func (*UnimplementedUserInteractionServer) QueryUserTaskCommentTotal(context.Context, *QueryUserTaskCommentTotalRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserTaskCommentTotal not implemented")
}
func (*UnimplementedUserInteractionServer) BatchQueryChatUsers(context.Context, *BatchQueryChatUsersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryChatUsers not implemented")
}

func RegisterUserInteractionServer(s *grpc.Server, srv UserInteractionServer) {
	s.RegisterService(&_UserInteraction_serviceDesc, srv)
}

func _UserInteraction_CommonCreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionServer).CommonCreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserInteraction/CommonCreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionServer).CommonCreateComment(ctx, req.(*CommonCreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteraction_GetTaskNewComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskNewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionServer).GetTaskNewComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserInteraction/GetTaskNewComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionServer).GetTaskNewComment(ctx, req.(*GetTaskNewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteraction_UpdateCommentFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionServer).UpdateCommentFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserInteraction/UpdateCommentFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionServer).UpdateCommentFileInfo(ctx, req.(*UpdateCommentFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteraction_QueryUserTaskCommentTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserTaskCommentTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionServer).QueryUserTaskCommentTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserInteraction/QueryUserTaskCommentTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionServer).QueryUserTaskCommentTotal(ctx, req.(*QueryUserTaskCommentTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserInteraction_BatchQueryChatUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryChatUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInteractionServer).BatchQueryChatUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserInteraction/BatchQueryChatUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInteractionServer).BatchQueryChatUsers(ctx, req.(*BatchQueryChatUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserInteraction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserInteraction",
	HandlerType: (*UserInteractionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommonCreateComment",
			Handler:    _UserInteraction_CommonCreateComment_Handler,
		},
		{
			MethodName: "GetTaskNewComment",
			Handler:    _UserInteraction_GetTaskNewComment_Handler,
		},
		{
			MethodName: "UpdateCommentFileInfo",
			Handler:    _UserInteraction_UpdateCommentFileInfo_Handler,
		},
		{
			MethodName: "QueryUserTaskCommentTotal",
			Handler:    _UserInteraction_QueryUserTaskCommentTotal_Handler,
		},
		{
			MethodName: "BatchQueryChatUsers",
			Handler:    _UserInteraction_BatchQueryChatUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-interaction.proto",
}
