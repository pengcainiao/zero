// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: official-listener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType    int32        `protobuf:"varint,1,opt,name=MessageType,proto3" json:"MessageType,omitempty"`      //消息类型
	UserID         []string     `protobuf:"bytes,2,rep,name=UserID,proto3" json:"UserID,omitempty"`                 //用户ID
	MsgContent     string       `protobuf:"bytes,3,opt,name=MsgContent,proto3" json:"MsgContent,omitempty"`         //消息文本，图片链接
	Href           string       `protobuf:"bytes,4,opt,name=Href,proto3" json:"Href,omitempty"`                     //链接
	Title          string       `protobuf:"bytes,5,opt,name=Title,proto3" json:"Title,omitempty"`                   //标题
	Desc           string       `protobuf:"bytes,6,opt,name=Desc,proto3" json:"Desc,omitempty"`                     //描述
	AcceptedUserID []string     `protobuf:"bytes,7,rep,name=AcceptedUserID,proto3" json:"AcceptedUserID,omitempty"` //已经接受的用户ID
	Context        *UserContext `protobuf:"bytes,8,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{0}
}

func (x *SendMessageRequest) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *SendMessageRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *SendMessageRequest) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *SendMessageRequest) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *SendMessageRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SendMessageRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SendMessageRequest) GetAcceptedUserID() []string {
	if x != nil {
		return x.AcceptedUserID
	}
	return nil
}

func (x *SendMessageRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32 `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{1}
}

func (x *SendMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type SendCorpTempMsgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstTitle       string       `protobuf:"bytes,1,opt,name=FirstTitle,proto3" json:"FirstTitle,omitempty"`             // 一级标题
	FirstTitleDetail string       `protobuf:"bytes,2,opt,name=FirstTitleDetail,proto3" json:"FirstTitleDetail,omitempty"` // 一级标题辅助信息
	Content          string       `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`                   // 普通文本
	CreateAt         int64        `protobuf:"varint,4,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`                // 创建时间
	CreatorID        string       `protobuf:"bytes,5,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`               // 创建人
	Url              string       `protobuf:"bytes,6,opt,name=Url,proto3" json:"Url,omitempty"`                           // 跳转地址
	MsgType          string       `protobuf:"bytes,7,opt,name=MsgType,proto3" json:"MsgType,omitempty"`                   // 消息类型
	NotifyUserID     []string     `protobuf:"bytes,8,rep,name=NotifyUserID,proto3" json:"NotifyUserID,omitempty"`         //通知的用户ID
	TaskID           string       `protobuf:"bytes,9,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	WorkspaceID      string       `protobuf:"bytes,10,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	ProjectID        string       `protobuf:"bytes,11,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	Context          *UserContext `protobuf:"bytes,12,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *SendCorpTempMsgRequest) Reset() {
	*x = SendCorpTempMsgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCorpTempMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCorpTempMsgRequest) ProtoMessage() {}

func (x *SendCorpTempMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCorpTempMsgRequest.ProtoReflect.Descriptor instead.
func (*SendCorpTempMsgRequest) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{2}
}

func (x *SendCorpTempMsgRequest) GetFirstTitle() string {
	if x != nil {
		return x.FirstTitle
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetFirstTitleDetail() string {
	if x != nil {
		return x.FirstTitleDetail
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *SendCorpTempMsgRequest) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetMsgType() string {
	if x != nil {
		return x.MsgType
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetNotifyUserID() []string {
	if x != nil {
		return x.NotifyUserID
	}
	return nil
}

func (x *SendCorpTempMsgRequest) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *SendCorpTempMsgRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type SendCorpTempMsgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *SendCorpTempMsgResponse) Reset() {
	*x = SendCorpTempMsgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCorpTempMsgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCorpTempMsgResponse) ProtoMessage() {}

func (x *SendCorpTempMsgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCorpTempMsgResponse.ProtoReflect.Descriptor instead.
func (*SendCorpTempMsgResponse) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{3}
}

func (x *SendCorpTempMsgResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SendCorpTempMsgResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UserCorpDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CorpID     string `protobuf:"bytes,2,opt,name=CorpID,proto3" json:"CorpID,omitempty"`
	CorpName   string `protobuf:"bytes,3,opt,name=CorpName,proto3" json:"CorpName,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	AppStatus  int32  `protobuf:"varint,5,opt,name=AppStatus,proto3" json:"AppStatus,omitempty"`
	UserLimit  int64  `protobuf:"varint,6,opt,name=UserLimit,proto3" json:"UserLimit,omitempty"`
	IsVisible  int32  `protobuf:"varint,7,opt,name=IsVisible,proto3" json:"IsVisible,omitempty"`
	UserStatus int32  `protobuf:"varint,8,opt,name=UserStatus,proto3" json:"UserStatus,omitempty"`
}

func (x *UserCorpDetail) Reset() {
	*x = UserCorpDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCorpDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCorpDetail) ProtoMessage() {}

func (x *UserCorpDetail) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCorpDetail.ProtoReflect.Descriptor instead.
func (*UserCorpDetail) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{4}
}

func (x *UserCorpDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserCorpDetail) GetCorpID() string {
	if x != nil {
		return x.CorpID
	}
	return ""
}

func (x *UserCorpDetail) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *UserCorpDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserCorpDetail) GetAppStatus() int32 {
	if x != nil {
		return x.AppStatus
	}
	return 0
}

func (x *UserCorpDetail) GetUserLimit() int64 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *UserCorpDetail) GetIsVisible() int32 {
	if x != nil {
		return x.IsVisible
	}
	return 0
}

func (x *UserCorpDetail) GetUserStatus() int32 {
	if x != nil {
		return x.UserStatus
	}
	return 0
}

type GetUserCorpDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  []string     `protobuf:"bytes,1,rep,name=UserID,proto3" json:"UserID,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *GetUserCorpDetailRequest) Reset() {
	*x = GetUserCorpDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCorpDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCorpDetailRequest) ProtoMessage() {}

func (x *GetUserCorpDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCorpDetailRequest.ProtoReflect.Descriptor instead.
func (*GetUserCorpDetailRequest) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserCorpDetailRequest) GetUserID() []string {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *GetUserCorpDetailRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type GetUserCorpDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*UserCorpDetail `protobuf:"bytes,1,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *GetUserCorpDetailResponse) Reset() {
	*x = GetUserCorpDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCorpDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCorpDetailResponse) ProtoMessage() {}

func (x *GetUserCorpDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCorpDetailResponse.ProtoReflect.Descriptor instead.
func (*GetUserCorpDetailResponse) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserCorpDetailResponse) GetDetails() []*UserCorpDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type CorpDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorpID      string `protobuf:"bytes,1,opt,name=CorpID,proto3" json:"CorpID,omitempty"`
	CorpName    string `protobuf:"bytes,2,opt,name=CorpName,proto3" json:"CorpName,omitempty"`
	ExpiredTime int64  `protobuf:"varint,3,opt,name=ExpiredTime,proto3" json:"ExpiredTime,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=Version,proto3" json:"Version,omitempty"`
	AppStatus   int32  `protobuf:"varint,5,opt,name=AppStatus,proto3" json:"AppStatus,omitempty"`
	UserLimit   int64  `protobuf:"varint,6,opt,name=UserLimit,proto3" json:"UserLimit,omitempty"`
}

func (x *CorpDetail) Reset() {
	*x = CorpDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorpDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorpDetail) ProtoMessage() {}

func (x *CorpDetail) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorpDetail.ProtoReflect.Descriptor instead.
func (*CorpDetail) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{7}
}

func (x *CorpDetail) GetCorpID() string {
	if x != nil {
		return x.CorpID
	}
	return ""
}

func (x *CorpDetail) GetCorpName() string {
	if x != nil {
		return x.CorpName
	}
	return ""
}

func (x *CorpDetail) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *CorpDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CorpDetail) GetAppStatus() int32 {
	if x != nil {
		return x.AppStatus
	}
	return 0
}

func (x *CorpDetail) GetUserLimit() int64 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

type BatchGetCorpDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorpIDs []string     `protobuf:"bytes,1,rep,name=CorpIDs,proto3" json:"CorpIDs,omitempty"`
	Context *UserContext `protobuf:"bytes,2,opt,name=Context,proto3" json:"Context,omitempty"`
}

func (x *BatchGetCorpDetailRequest) Reset() {
	*x = BatchGetCorpDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetCorpDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetCorpDetailRequest) ProtoMessage() {}

func (x *BatchGetCorpDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetCorpDetailRequest.ProtoReflect.Descriptor instead.
func (*BatchGetCorpDetailRequest) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{8}
}

func (x *BatchGetCorpDetailRequest) GetCorpIDs() []string {
	if x != nil {
		return x.CorpIDs
	}
	return nil
}

func (x *BatchGetCorpDetailRequest) GetContext() *UserContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type BatchGetCorpDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*CorpDetail `protobuf:"bytes,1,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *BatchGetCorpDetailResponse) Reset() {
	*x = BatchGetCorpDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_official_listener_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetCorpDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetCorpDetailResponse) ProtoMessage() {}

func (x *BatchGetCorpDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_official_listener_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetCorpDetailResponse.ProtoReflect.Descriptor instead.
func (*BatchGetCorpDetailResponse) Descriptor() ([]byte, []int) {
	return file_official_listener_proto_rawDescGZIP(), []int{9}
}

func (x *BatchGetCorpDetailResponse) GetDetails() []*CorpDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_official_listener_proto protoreflect.FileDescriptor

var file_official_listener_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff,
	0x01, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48,
	0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x29, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x16,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x72, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0xf0, 0x01, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x49, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x70,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6f, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x60, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x72, 0x70, 0x49, 0x44, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x46, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0x88, 0x02, 0x0a,
	0x10, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x72, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x72, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x72, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_official_listener_proto_rawDescOnce sync.Once
	file_official_listener_proto_rawDescData = file_official_listener_proto_rawDesc
)

func file_official_listener_proto_rawDescGZIP() []byte {
	file_official_listener_proto_rawDescOnce.Do(func() {
		file_official_listener_proto_rawDescData = protoimpl.X.CompressGZIP(file_official_listener_proto_rawDescData)
	})
	return file_official_listener_proto_rawDescData
}

var file_official_listener_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_official_listener_proto_goTypes = []interface{}{
	(*SendMessageRequest)(nil),         // 0: pb.SendMessageRequest
	(*SendMessageResponse)(nil),        // 1: pb.SendMessageResponse
	(*SendCorpTempMsgRequest)(nil),     // 2: pb.SendCorpTempMsgRequest
	(*SendCorpTempMsgResponse)(nil),    // 3: pb.SendCorpTempMsgResponse
	(*UserCorpDetail)(nil),             // 4: pb.UserCorpDetail
	(*GetUserCorpDetailRequest)(nil),   // 5: pb.GetUserCorpDetailRequest
	(*GetUserCorpDetailResponse)(nil),  // 6: pb.GetUserCorpDetailResponse
	(*CorpDetail)(nil),                 // 7: pb.CorpDetail
	(*BatchGetCorpDetailRequest)(nil),  // 8: pb.BatchGetCorpDetailRequest
	(*BatchGetCorpDetailResponse)(nil), // 9: pb.BatchGetCorpDetailResponse
	(*UserContext)(nil),                // 10: pb.UserContext
	(*Response)(nil),                   // 11: pb.Response
}
var file_official_listener_proto_depIdxs = []int32{
	10, // 0: pb.SendMessageRequest.Context:type_name -> pb.UserContext
	10, // 1: pb.SendCorpTempMsgRequest.Context:type_name -> pb.UserContext
	10, // 2: pb.GetUserCorpDetailRequest.Context:type_name -> pb.UserContext
	4,  // 3: pb.GetUserCorpDetailResponse.Details:type_name -> pb.UserCorpDetail
	10, // 4: pb.BatchGetCorpDetailRequest.Context:type_name -> pb.UserContext
	7,  // 5: pb.BatchGetCorpDetailResponse.Details:type_name -> pb.CorpDetail
	0,  // 6: pb.OfficialListener.SendMessage:input_type -> pb.SendMessageRequest
	2,  // 7: pb.OfficialListener.SendCorpTempMsg:input_type -> pb.SendCorpTempMsgRequest
	5,  // 8: pb.OfficialListener.GetUserCorpDetail:input_type -> pb.GetUserCorpDetailRequest
	8,  // 9: pb.OfficialListener.BatchGetCorpDetail:input_type -> pb.BatchGetCorpDetailRequest
	11, // 10: pb.OfficialListener.SendMessage:output_type -> pb.Response
	11, // 11: pb.OfficialListener.SendCorpTempMsg:output_type -> pb.Response
	11, // 12: pb.OfficialListener.GetUserCorpDetail:output_type -> pb.Response
	11, // 13: pb.OfficialListener.BatchGetCorpDetail:output_type -> pb.Response
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_official_listener_proto_init() }
func file_official_listener_proto_init() {
	if File_official_listener_proto != nil {
		return
	}
	file_grpc_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_official_listener_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCorpTempMsgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCorpTempMsgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCorpDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCorpDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCorpDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorpDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetCorpDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_official_listener_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetCorpDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_official_listener_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_official_listener_proto_goTypes,
		DependencyIndexes: file_official_listener_proto_depIdxs,
		MessageInfos:      file_official_listener_proto_msgTypes,
	}.Build()
	File_official_listener_proto = out.File
	file_official_listener_proto_rawDesc = nil
	file_official_listener_proto_goTypes = nil
	file_official_listener_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OfficialListenerClient is the client API for OfficialListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OfficialListenerClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Response, error)
	SendCorpTempMsg(ctx context.Context, in *SendCorpTempMsgRequest, opts ...grpc.CallOption) (*Response, error)
	GetUserCorpDetail(ctx context.Context, in *GetUserCorpDetailRequest, opts ...grpc.CallOption) (*Response, error)
	BatchGetCorpDetail(ctx context.Context, in *BatchGetCorpDetailRequest, opts ...grpc.CallOption) (*Response, error)
}

type officialListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficialListenerClient(cc grpc.ClientConnInterface) OfficialListenerClient {
	return &officialListenerClient{cc}
}

func (c *officialListenerClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.OfficialListener/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialListenerClient) SendCorpTempMsg(ctx context.Context, in *SendCorpTempMsgRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.OfficialListener/SendCorpTempMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialListenerClient) GetUserCorpDetail(ctx context.Context, in *GetUserCorpDetailRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.OfficialListener/GetUserCorpDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialListenerClient) BatchGetCorpDetail(ctx context.Context, in *BatchGetCorpDetailRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.OfficialListener/BatchGetCorpDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficialListenerServer is the server API for OfficialListener service.
type OfficialListenerServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*Response, error)
	SendCorpTempMsg(context.Context, *SendCorpTempMsgRequest) (*Response, error)
	GetUserCorpDetail(context.Context, *GetUserCorpDetailRequest) (*Response, error)
	BatchGetCorpDetail(context.Context, *BatchGetCorpDetailRequest) (*Response, error)
}

// UnimplementedOfficialListenerServer can be embedded to have forward compatible implementations.
type UnimplementedOfficialListenerServer struct {
}

func (*UnimplementedOfficialListenerServer) SendMessage(context.Context, *SendMessageRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedOfficialListenerServer) SendCorpTempMsg(context.Context, *SendCorpTempMsgRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCorpTempMsg not implemented")
}
func (*UnimplementedOfficialListenerServer) GetUserCorpDetail(context.Context, *GetUserCorpDetailRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCorpDetail not implemented")
}
func (*UnimplementedOfficialListenerServer) BatchGetCorpDetail(context.Context, *BatchGetCorpDetailRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetCorpDetail not implemented")
}

func RegisterOfficialListenerServer(s *grpc.Server, srv OfficialListenerServer) {
	s.RegisterService(&_OfficialListener_serviceDesc, srv)
}

func _OfficialListener_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialListenerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OfficialListener/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialListenerServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialListener_SendCorpTempMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCorpTempMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialListenerServer).SendCorpTempMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OfficialListener/SendCorpTempMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialListenerServer).SendCorpTempMsg(ctx, req.(*SendCorpTempMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialListener_GetUserCorpDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCorpDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialListenerServer).GetUserCorpDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OfficialListener/GetUserCorpDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialListenerServer).GetUserCorpDetail(ctx, req.(*GetUserCorpDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialListener_BatchGetCorpDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCorpDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialListenerServer).BatchGetCorpDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.OfficialListener/BatchGetCorpDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialListenerServer).BatchGetCorpDetail(ctx, req.(*BatchGetCorpDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OfficialListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.OfficialListener",
	HandlerType: (*OfficialListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _OfficialListener_SendMessage_Handler,
		},
		{
			MethodName: "SendCorpTempMsg",
			Handler:    _OfficialListener_SendCorpTempMsg_Handler,
		},
		{
			MethodName: "GetUserCorpDetail",
			Handler:    _OfficialListener_GetUserCorpDetail_Handler,
		},
		{
			MethodName: "BatchGetCorpDetail",
			Handler:    _OfficialListener_BatchGetCorpDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "official-listener.proto",
}
