// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package clouddisk

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	FileDetailHandler               func(ctx context.Context, req FileDetailRequest) grpcbase.Response
	AssociatedFilesHandler          func(ctx context.Context, req AssociatedFilesRequest) grpcbase.Response
	UploadFileHandler               func(ctx context.Context, req UploadFileRequest) grpcbase.Response
	GetFilesNameHandler             func(ctx context.Context, req GetFilesNameRequest) grpcbase.Response
	BatchUnbindFileHandler          func(ctx context.Context, req BatchUnbindFileRequest) grpcbase.Response
	BatchBindFileHandler            func(ctx context.Context, req BatchBindFileRequest) grpcbase.Response
	FileSyncHandler                 func(ctx context.Context, req FileSyncRequest) grpcbase.Response
	TaskFilesHandler                func(ctx context.Context, req TaskFilesRequest) grpcbase.Response
	GetBindLogWithAttachmentHandler func(ctx context.Context, req GetBindLogWithAttachmentRequest) grpcbase.Response
	GetFileAddrByFileIDHandler      func(ctx context.Context, req GetFileAddrByFileIDRequest) grpcbase.Response
	GetBindFileSizeHandler          func(ctx context.Context, req GetBindFileSizeRequest) grpcbase.Response
	GetFileByFileIDHandler          func(ctx context.Context, req GetFileByFileIDRequest) grpcbase.Response
	GetProjectFileTotalHandler      func(ctx context.Context, req GetProjectFileTotalRequest) grpcbase.Response
	GetFilesByFileIDsHandler        func(ctx context.Context, req GetFilesByFileIDsRequest) grpcbase.Response
	GetUsersFileUsedCapHandler      func(ctx context.Context, req GetUsersFileUsedCapRequest) grpcbase.Response
)

type Repository interface {
	FileDetail(ctx context.Context, request FileDetailRequest) grpcbase.Response
	AssociatedFiles(ctx context.Context, request AssociatedFilesRequest) grpcbase.Response
	UploadFile(ctx context.Context, request UploadFileRequest) grpcbase.Response
	GetFilesName(ctx context.Context, request GetFilesNameRequest) grpcbase.Response
	BatchUnbindFile(ctx context.Context, request BatchUnbindFileRequest) grpcbase.Response
	BatchBindFile(ctx context.Context, request BatchBindFileRequest) grpcbase.Response
	FileSync(ctx context.Context, request FileSyncRequest) grpcbase.Response
	TaskFiles(ctx context.Context, request TaskFilesRequest) grpcbase.Response
	GetBindLogWithAttachment(ctx context.Context, request GetBindLogWithAttachmentRequest) grpcbase.Response
	GetFileAddrByFileID(ctx context.Context, request GetFileAddrByFileIDRequest) grpcbase.Response
	GetBindFileSize(ctx context.Context, request GetBindFileSizeRequest) grpcbase.Response
	GetFileByFileID(ctx context.Context, request GetFileByFileIDRequest) grpcbase.Response
	GetProjectFileTotal(ctx context.Context, request GetProjectFileTotalRequest) grpcbase.Response
	GetFilesByFileIDs(ctx context.Context, request GetFilesByFileIDsRequest) grpcbase.Response
	GetUsersFileUsedCap(ctx context.Context, request GetUsersFileUsedCapRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type AssociatedFilesRequest struct {
	FlyeleID string       `json:"flyele_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s AssociatedFilesRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type AssociatedFilesResponse struct {
	Count int32 `json:"count,omitempty"`
}

func (s AssociatedFilesResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchBindFileRequest struct {
	FlyeleType         string               `json:"flyele_type,omitempty"`
	FlyeleID           string               `json:"flyele_id,omitempty"`
	CommentID          string               `json:"comment_id,omitempty"`
	Catalog            int32                `json:"catalog,omitempty"`
	Entry              string               `json:"entry,omitempty"`
	FileUpload         string               `json:"file_upload,omitempty"`
	FileSensorsConfigs []*FileSensorsConfig `json:"file_sensors_configs,omitempty"`
	Context            *UserContext         `json:"context,omitempty"`
}

func (s BatchBindFileRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchUnbindFileRequest struct {
	FlyeleID   string       `json:"flyele_id,omitempty"`
	FlyeleType string       `json:"flyele_type,omitempty"`
	CommentID  string       `json:"comment_id,omitempty"`
	FilesID    []string     `json:"files_id,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s BatchUnbindFileRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type FileDetail struct {
	FileID   string `json:"file_id,omitempty"`
	FileName string `json:"file_name,omitempty"`
}

func (s FileDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type FileDetailRequest struct {
	Files   []string     `json:"files,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s FileDetailRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type FileDetailResponse struct {
	Detail []*FileDetail `json:"detail,omitempty"`
}

func (s FileDetailResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type FileSensorsConfig struct {
	FileID string `json:"file_id,omitempty"`
	Origin string `json:"origin,omitempty"`
	Entry  string `json:"entry,omitempty"`
}

func (s FileSensorsConfig) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type FileSyncRequest struct {
	RequesterUID []string     `json:"requester_uid,omitempty"`
	FlyeleID     string       `json:"flyele_id,omitempty"`
	FlyeleType   string       `json:"flyele_type,omitempty"`
	Context      *UserContext `json:"context,omitempty"`
}

func (s FileSyncRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBindFileSizeRequest struct {
	FlyeleID   string       `json:"flyele_id,omitempty"`
	FlyeleType string       `json:"flyele_type,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s GetBindFileSizeRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBindFileSizeResponse struct {
	TotalSize int64 `json:"total_size,omitempty"`
}

func (s GetBindFileSizeResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBindLogWithAttachmentRequest struct {
	FileId     string       `json:"file_id,omitempty"`
	FlyeleId   string       `json:"flyele_id,omitempty"`
	FlyeleType string       `json:"flyele_type,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s GetBindLogWithAttachmentRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBindLogWithAttachmentResponse struct {
	FileId     string `json:"file_id,omitempty"`
	FlyeleId   string `json:"flyele_id,omitempty"`
	FlyeleType string `json:"flyele_type,omitempty"`
	BoundBy    string `json:"bound_by,omitempty"`
	CommentId  string `json:"comment_id,omitempty"`
	CreatorId  string `json:"creator_id,omitempty"`
}

func (s GetBindLogWithAttachmentResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFileAddrByFileIDRequest struct {
	FileId  string       `json:"file_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetFileAddrByFileIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFileAddrByFileIDResponse struct {
	FileAddr string `json:"file_addr,omitempty"`
}

func (s GetFileAddrByFileIDResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFileByFileIDRequest struct {
	FileId  string       `json:"file_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetFileByFileIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFileByFileIDResponse struct {
	Id         string `json:"id,omitempty"`
	FileName   string `json:"file_name,omitempty"`
	Resource   string `json:"resource,omitempty"`
	Length     int32  `json:"length,omitempty"`
	Md5        string `json:"md5,omitempty"`
	CreatorId  string `json:"creator_id,omitempty"`
	Extension  string `json:"extension,omitempty"`
	FlyeleType string `json:"flyele_type,omitempty"`
	FlyeleId   string `json:"flyele_id,omitempty"`
}

func (s GetFileByFileIDResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFilesByFileIDsRequest struct {
	FileId  []string     `json:"file_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetFilesByFileIDsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFilesByFileIDsResponse struct {
	Files []*GetFileByFileIDResponse `json:"files,omitempty"`
}

func (s GetFilesByFileIDsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFilesNameRequest struct {
	FlyeleID string       `json:"flyele_id,omitempty"`
	FilesID  []string     `json:"files_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetFilesNameRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetFilesNameResponse struct {
	Names map[string]string `json:"names,omitempty"`
}

func (s GetFilesNameResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectFileTotalRequest struct {
	ProjectID string       `json:"project_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetProjectFileTotalRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectFileTotalResponse struct {
	Total int32 `json:"total,omitempty"`
}

func (s GetProjectFileTotalResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersFileUsedCapRequest struct {
	UserID      []string     `json:"user_id,omitempty"`
	WorkspaceID []string     `json:"workspace_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetUsersFileUsedCapRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersFileUsedCapResponse struct {
	AllCap int64 `json:"all_cap,omitempty"`
}

func (s GetUsersFileUsedCapResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskFiles struct {
	FileID    string `json:"file_id,omitempty"`
	FileName  string `json:"file_name,omitempty"`
	Resources string `json:"resources,omitempty"`
	CreatorID string `json:"creator_id,omitempty"`
	CommentID string `json:"comment_id,omitempty"`
}

func (s TaskFiles) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskFilesRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s TaskFilesRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskFilesResponse struct {
	TaskFiles []*TaskFiles `json:"task_files,omitempty"`
}

func (s TaskFilesResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UploadFileRequest struct {
	FilePath      string       `json:"file_path,omitempty"`
	Content       []byte       `json:"content,omitempty"`
	OssBucketName string       `json:"oss_bucket_name,omitempty"`
	Context       *UserContext `json:"context,omitempty"`
}

func (s UploadFileRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建clouddisk的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) FileDetail(ctx context.Context, req FileDetailRequest) grpcbase.Response {
	if FileDetailHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/FileDetail", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return FileDetailHandler(ctx, req.(FileDetailRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) AssociatedFiles(ctx context.Context, req AssociatedFilesRequest) grpcbase.Response {
	if AssociatedFilesHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/AssociatedFiles", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return AssociatedFilesHandler(ctx, req.(AssociatedFilesRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UploadFile(ctx context.Context, req UploadFileRequest) grpcbase.Response {
	if UploadFileHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/UploadFile", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UploadFileHandler(ctx, req.(UploadFileRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetFilesName(ctx context.Context, req GetFilesNameRequest) grpcbase.Response {
	if GetFilesNameHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetFilesName", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetFilesNameHandler(ctx, req.(GetFilesNameRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchUnbindFile(ctx context.Context, req BatchUnbindFileRequest) grpcbase.Response {
	if BatchUnbindFileHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/BatchUnbindFile", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchUnbindFileHandler(ctx, req.(BatchUnbindFileRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchBindFile(ctx context.Context, req BatchBindFileRequest) grpcbase.Response {
	if BatchBindFileHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/BatchBindFile", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchBindFileHandler(ctx, req.(BatchBindFileRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) FileSync(ctx context.Context, req FileSyncRequest) grpcbase.Response {
	if FileSyncHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/FileSync", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return FileSyncHandler(ctx, req.(FileSyncRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) TaskFiles(ctx context.Context, req TaskFilesRequest) grpcbase.Response {
	if TaskFilesHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/TaskFiles", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return TaskFilesHandler(ctx, req.(TaskFilesRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetBindLogWithAttachment(ctx context.Context, req GetBindLogWithAttachmentRequest) grpcbase.Response {
	if GetBindLogWithAttachmentHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetBindLogWithAttachment", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetBindLogWithAttachmentHandler(ctx, req.(GetBindLogWithAttachmentRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetFileAddrByFileID(ctx context.Context, req GetFileAddrByFileIDRequest) grpcbase.Response {
	if GetFileAddrByFileIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetFileAddrByFileID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetFileAddrByFileIDHandler(ctx, req.(GetFileAddrByFileIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetBindFileSize(ctx context.Context, req GetBindFileSizeRequest) grpcbase.Response {
	if GetBindFileSizeHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetBindFileSize", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetBindFileSizeHandler(ctx, req.(GetBindFileSizeRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetFileByFileID(ctx context.Context, req GetFileByFileIDRequest) grpcbase.Response {
	if GetFileByFileIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetFileByFileID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetFileByFileIDHandler(ctx, req.(GetFileByFileIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetProjectFileTotal(ctx context.Context, req GetProjectFileTotalRequest) grpcbase.Response {
	if GetProjectFileTotalHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetProjectFileTotal", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetProjectFileTotalHandler(ctx, req.(GetProjectFileTotalRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetFilesByFileIDs(ctx context.Context, req GetFilesByFileIDsRequest) grpcbase.Response {
	if GetFilesByFileIDsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetFilesByFileIDs", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetFilesByFileIDsHandler(ctx, req.(GetFilesByFileIDsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUsersFileUsedCap(ctx context.Context, req GetUsersFileUsedCapRequest) grpcbase.Response {
	if GetUsersFileUsedCapHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.clouddisk/GetUsersFileUsedCap", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUsersFileUsedCapHandler(ctx, req.(GetUsersFileUsedCapRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
