// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package clouddisk

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeFileDetailRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(FileDetailRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.FileDetailRequest{
		Files:   r.Files,
		Context: xcontext,
	}, nil
}

func decodeFileDetailResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.FileDetailResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var detailArray = make([]*FileDetail, 0)
	for _, v := range pbresp.Detail {
		detailArray = append(detailArray, &FileDetail{
			//判断字段是否为复杂类型
			FileID: v.FileID,
			//判断字段是否为复杂类型
			FileName: v.FileName,
		})
	}

	return grpcbase.Response{
		Data: FileDetailResponse{
			Detail: detailArray,
		},
	}, nil
}
func encodeAssociatedFilesRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(AssociatedFilesRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.AssociatedFilesRequest{
		FlyeleID: r.FlyeleID,
		Context:  xcontext,
	}, nil
}

func decodeAssociatedFilesResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.AssociatedFilesResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: AssociatedFilesResponse{
			Count: pbresp.Count,
		},
	}, nil
}
func encodeUploadFileRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UploadFileRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UploadFileRequest{
		FilePath:      r.FilePath,
		Content:       r.Content,
		OssBucketName: r.OssBucketName,
		Context:       xcontext,
	}, nil
}

func decodeUploadFileResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetFilesNameRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetFilesNameRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetFilesNameRequest{
		FlyeleID: r.FlyeleID,
		FilesID:  r.FilesID,
		Context:  xcontext,
	}, nil
}

func decodeGetFilesNameResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetFilesNameResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetFilesNameResponse{
			Names: pbresp.Names,
		},
	}, nil
}
func encodeBatchUnbindFileRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchUnbindFileRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchUnbindFileRequest{
		FlyeleID:   r.FlyeleID,
		FlyeleType: r.FlyeleType,
		CommentID:  r.CommentID,
		FilesID:    r.FilesID,
		Context:    xcontext,
	}, nil
}

func decodeBatchUnbindFileResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeBatchBindFileRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchBindFileRequest)
	//是复杂类型的数组
	var xfileSensorsConfigs = make([]*pb.FileSensorsConfig, 0)

	for _, v := range r.FileSensorsConfigs {
		xfileSensorsConfigs = append(xfileSensorsConfigs, &pb.FileSensorsConfig{
			FileID: v.FileID,
			Origin: v.Origin,
			Entry:  v.Entry,
		})
	}
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchBindFileRequest{
		FlyeleType:         r.FlyeleType,
		FlyeleID:           r.FlyeleID,
		CommentID:          r.CommentID,
		Catalog:            r.Catalog,
		Entry:              r.Entry,
		FileUpload:         r.FileUpload,
		FileSensorsConfigs: xfileSensorsConfigs,
		Context:            xcontext,
	}, nil
}

func decodeBatchBindFileResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeFileSyncRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(FileSyncRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.FileSyncRequest{
		RequesterUID: r.RequesterUID,
		FlyeleID:     r.FlyeleID,
		FlyeleType:   r.FlyeleType,
		Context:      xcontext,
	}, nil
}

func decodeFileSyncResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeTaskFilesRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(TaskFilesRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.TaskFilesRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeTaskFilesResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.TaskFilesResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var taskfilesArray = make([]*TaskFiles, 0)
	for _, v := range pbresp.TaskFiles {
		taskfilesArray = append(taskfilesArray, &TaskFiles{
			//判断字段是否为复杂类型
			FileID: v.FileID,
			//判断字段是否为复杂类型
			FileName: v.FileName,
			//判断字段是否为复杂类型
			Resources: v.Resources,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			CommentID: v.CommentID,
		})
	}

	return grpcbase.Response{
		Data: TaskFilesResponse{
			TaskFiles: taskfilesArray,
		},
	}, nil
}
func encodeGetBindLogWithAttachmentRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetBindLogWithAttachmentRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetBindLogWithAttachmentRequest{
		FileId:     r.FileId,
		FlyeleId:   r.FlyeleId,
		FlyeleType: r.FlyeleType,
		Context:    xcontext,
	}, nil
}

func decodeGetBindLogWithAttachmentResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetBindLogWithAttachmentResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetBindLogWithAttachmentResponse{
			BoundBy:    pbresp.BoundBy,
			CommentId:  pbresp.CommentId,
			CreatorId:  pbresp.CreatorId,
			FileId:     pbresp.FileId,
			FlyeleId:   pbresp.FlyeleId,
			FlyeleType: pbresp.FlyeleType,
		},
	}, nil
}
func encodeGetFileAddrByFileIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetFileAddrByFileIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetFileAddrByFileIDRequest{
		FileId:  r.FileId,
		Context: xcontext,
	}, nil
}

func decodeGetFileAddrByFileIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetFileAddrByFileIDResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetFileAddrByFileIDResponse{
			FileAddr: pbresp.FileAddr,
		},
	}, nil
}
func encodeGetBindFileSizeRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetBindFileSizeRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetBindFileSizeRequest{
		FlyeleID:   r.FlyeleID,
		FlyeleType: r.FlyeleType,
		Context:    xcontext,
	}, nil
}

func decodeGetBindFileSizeResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetBindFileSizeResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetBindFileSizeResponse{
			TotalSize: pbresp.TotalSize,
		},
	}, nil
}
func encodeGetFileByFileIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetFileByFileIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetFileByFileIDRequest{
		FileId:  r.FileId,
		Context: xcontext,
	}, nil
}

func decodeGetFileByFileIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetFileByFileIDResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetFileByFileIDResponse{
			CreatorId:  pbresp.CreatorId,
			Extension:  pbresp.Extension,
			FileName:   pbresp.FileName,
			FlyeleId:   pbresp.FlyeleId,
			FlyeleType: pbresp.FlyeleType,
			Id:         pbresp.Id,
			Length:     pbresp.Length,
			Md5:        pbresp.Md5,
			Resource:   pbresp.Resource,
		},
	}, nil
}
func encodeGetProjectFileTotalRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetProjectFileTotalRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetProjectFileTotalRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func decodeGetProjectFileTotalResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetProjectFileTotalResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetProjectFileTotalResponse{
			Total: pbresp.Total,
		},
	}, nil
}
func encodeGetFilesByFileIDsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetFilesByFileIDsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetFilesByFileIDsRequest{
		FileId:  r.FileId,
		Context: xcontext,
	}, nil
}

func decodeGetFilesByFileIDsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetFilesByFileIDsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var filesArray = make([]*GetFileByFileIDResponse, 0)
	for _, v := range pbresp.Files {
		filesArray = append(filesArray, &GetFileByFileIDResponse{
			//判断字段是否为复杂类型
			Id: v.Id,
			//判断字段是否为复杂类型
			FileName: v.FileName,
			//判断字段是否为复杂类型
			Resource: v.Resource,
			//判断字段是否为复杂类型
			Length: v.Length,
			//判断字段是否为复杂类型
			Md5: v.Md5,
			//判断字段是否为复杂类型
			CreatorId: v.CreatorId,
			//判断字段是否为复杂类型
			Extension: v.Extension,
			//判断字段是否为复杂类型
			FlyeleType: v.FlyeleType,
			//判断字段是否为复杂类型
			FlyeleId: v.FlyeleId,
		})
	}

	return grpcbase.Response{
		Data: GetFilesByFileIDsResponse{
			Files: filesArray,
		},
	}, nil
}
func encodeGetUsersFileUsedCapRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUsersFileUsedCapRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUsersFileUsedCapRequest{
		UserID:      r.UserID,
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func decodeGetUsersFileUsedCapResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUsersFileUsedCapResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUsersFileUsedCapResponse{
			AllCap: pbresp.AllCap,
		},
	}, nil
}
