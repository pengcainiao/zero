// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package clouddisk

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"

	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient clouddisk GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.CloudDiskSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleFileDetail 客户端处理逻辑
func (c *GrpcClient) HandleFileDetail(ctx context.Context, req FileDetailRequest) *FileDetailResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/FileDetail", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.FileDetail(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 FileDetail 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(FileDetailResponse)
		return &m
	}
	return nil
}

// HandleAssociatedFiles 客户端处理逻辑
func (c *GrpcClient) HandleAssociatedFiles(ctx context.Context, req AssociatedFilesRequest) *AssociatedFilesResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/AssociatedFiles", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.AssociatedFiles(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 AssociatedFiles 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(AssociatedFilesResponse)
		return &m
	}
	return nil
}

// HandleUploadFile 客户端处理逻辑
func (c *GrpcClient) HandleUploadFile(ctx context.Context, req UploadFileRequest) error {
	resp := c.client.UploadFile(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetFilesName 客户端处理逻辑
func (c *GrpcClient) HandleGetFilesName(ctx context.Context, req GetFilesNameRequest) *GetFilesNameResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetFilesName", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetFilesName(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetFilesName 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetFilesNameResponse)
		return &m
	}
	return nil
}

// HandleBatchUnbindFile 客户端处理逻辑
func (c *GrpcClient) HandleBatchUnbindFile(ctx context.Context, req BatchUnbindFileRequest) error {
	resp := c.client.BatchUnbindFile(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleBatchBindFile 客户端处理逻辑
func (c *GrpcClient) HandleBatchBindFile(ctx context.Context, req BatchBindFileRequest) error {
	resp := c.client.BatchBindFile(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleFileSync 客户端处理逻辑
func (c *GrpcClient) HandleFileSync(ctx context.Context, req FileSyncRequest) error {
	resp := c.client.FileSync(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleTaskFiles 客户端处理逻辑
func (c *GrpcClient) HandleTaskFiles(ctx context.Context, req TaskFilesRequest) *TaskFilesResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/TaskFiles", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.TaskFiles(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 TaskFiles 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(TaskFilesResponse)
		return &m
	}
	return nil
}

// HandleGetBindLogWithAttachment 客户端处理逻辑
func (c *GrpcClient) HandleGetBindLogWithAttachment(ctx context.Context, req GetBindLogWithAttachmentRequest) *GetBindLogWithAttachmentResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetBindLogWithAttachment", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetBindLogWithAttachment(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetBindLogWithAttachment 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetBindLogWithAttachmentResponse)
		return &m
	}
	return nil
}

// HandleGetFileAddrByFileID 客户端处理逻辑
func (c *GrpcClient) HandleGetFileAddrByFileID(ctx context.Context, req GetFileAddrByFileIDRequest) *GetFileAddrByFileIDResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetFileAddrByFileID", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetFileAddrByFileID(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetFileAddrByFileID 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetFileAddrByFileIDResponse)
		return &m
	}
	return nil
}

// HandleGetBindFileSize 客户端处理逻辑
func (c *GrpcClient) HandleGetBindFileSize(ctx context.Context, req GetBindFileSizeRequest) *GetBindFileSizeResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetBindFileSize", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetBindFileSize(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetBindFileSize 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetBindFileSizeResponse)
		return &m
	}
	return nil
}

// HandleGetFileByFileID 客户端处理逻辑
func (c *GrpcClient) HandleGetFileByFileID(ctx context.Context, req GetFileByFileIDRequest) *GetFileByFileIDResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetFileByFileID", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetFileByFileID(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetFileByFileID 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetFileByFileIDResponse)
		return &m
	}
	return nil
}

// HandleGetProjectFileTotal 客户端处理逻辑
func (c *GrpcClient) HandleGetProjectFileTotal(ctx context.Context, req GetProjectFileTotalRequest) *GetProjectFileTotalResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetProjectFileTotal", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetProjectFileTotal(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetProjectFileTotal 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetProjectFileTotalResponse)
		return &m
	}
	return nil
}

// HandleGetFilesByFileIDs 客户端处理逻辑
func (c *GrpcClient) HandleGetFilesByFileIDs(ctx context.Context, req GetFilesByFileIDsRequest) *GetFilesByFileIDsResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetFilesByFileIDs", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetFilesByFileIDs(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetFilesByFileIDs 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetFilesByFileIDsResponse)
		return &m
	}
	return nil
}

// HandleGetUsersFileUsedCap 客户端处理逻辑
func (c *GrpcClient) HandleGetUsersFileUsedCap(ctx context.Context, req GetUsersFileUsedCapRequest) *GetUsersFileUsedCapResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.clouddisk/GetUsersFileUsedCap", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUsersFileUsedCap(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUsersFileUsedCap 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUsersFileUsedCapResponse)
		return &m
	}
	return nil
}
