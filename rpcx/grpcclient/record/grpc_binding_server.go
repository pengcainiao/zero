// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package record

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	getRecord                 grpctransport.Handler
	getRecordDetails          grpctransport.Handler
	getRelationRecordTotal    grpctransport.Handler
	getRecordTakers           grpctransport.Handler
	recordExists              grpctransport.Handler
	batchUnBindTask           grpctransport.Handler
	incrRecordCommentNum      grpctransport.Handler
	generateRecordForNewUsers grpctransport.Handler
}

func (b *serverBinding) GetRecord(ctx context.Context, req *pb.GetRecordRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecord receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getRecord.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetRecordDetails(ctx context.Context, req *pb.GetRecordDetailsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecordDetails receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getRecordDetails.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetRelationRecordTotal(ctx context.Context, req *pb.GetRelationRecordTotalRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRelationRecordTotal receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getRelationRecordTotal.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetRecordTakers(ctx context.Context, req *pb.GetRecordTakersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecordTakers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getRecordTakers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) RecordExists(ctx context.Context, req *pb.RecordExistsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecordExists receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.recordExists.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchUnBindTask(ctx context.Context, req *pb.BatchUnBindTaskRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchUnBindTask receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchUnBindTask.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) IncrRecordCommentNum(ctx context.Context, req *pb.IncrRecordCommentNumRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：IncrRecordCommentNum receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.incrRecordCommentNum.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GenerateRecordForNewUsers(ctx context.Context, req *pb.GenerateRecordForNewUsersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GenerateRecordForNewUsers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.generateRecordForNewUsers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterRecordServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"getRecord":                 b.getRecord,
		"getRecordDetails":          b.getRecordDetails,
		"getRelationRecordTotal":    b.getRelationRecordTotal,
		"getRecordTakers":           b.getRecordTakers,
		"recordExists":              b.recordExists,
		"batchUnBindTask":           b.batchUnBindTask,
		"incrRecordCommentNum":      b.incrRecordCommentNum,
		"generateRecordForNewUsers": b.generateRecordForNewUsers,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		getRecord: grpcbase.CreateGRPCServer(
			makeGetRecordEndpoint(svc),
			decodeGetRecordRequest,
			encodeGetRecordResponse,
		),
		getRecordDetails: grpcbase.CreateGRPCServer(
			makeGetRecordDetailsEndpoint(svc),
			decodeGetRecordDetailsRequest,
			encodeGetRecordDetailsResponse,
		),
		getRelationRecordTotal: grpcbase.CreateGRPCServer(
			makeGetRelationRecordTotalEndpoint(svc),
			decodeGetRelationRecordTotalRequest,
			encodeGetRelationRecordTotalResponse,
		),
		getRecordTakers: grpcbase.CreateGRPCServer(
			makeGetRecordTakersEndpoint(svc),
			decodeGetRecordTakersRequest,
			encodeGetRecordTakersResponse,
		),
		recordExists: grpcbase.CreateGRPCServer(
			makeRecordExistsEndpoint(svc),
			decodeRecordExistsRequest,
			encodeRecordExistsResponse,
		),
		batchUnBindTask: grpcbase.CreateGRPCServer(
			makeBatchUnBindTaskEndpoint(svc),
			decodeBatchUnBindTaskRequest,
			encodeBatchUnBindTaskResponse,
		),
		incrRecordCommentNum: grpcbase.CreateGRPCServer(
			makeIncrRecordCommentNumEndpoint(svc),
			decodeIncrRecordCommentNumRequest,
			encodeIncrRecordCommentNumResponse,
		),
		generateRecordForNewUsers: grpcbase.CreateGRPCServer(
			makeGenerateRecordForNewUsersEndpoint(svc),
			decodeGenerateRecordForNewUsersRequest,
			encodeGenerateRecordForNewUsersResponse,
		),
	}
}
