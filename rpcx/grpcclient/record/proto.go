// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package record

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	GetRecordHandler                 func(ctx context.Context, req GetRecordRequest) grpcbase.Response
	GetRecordDetailsHandler          func(ctx context.Context, req GetRecordDetailsRequest) grpcbase.Response
	GetRelationRecordTotalHandler    func(ctx context.Context, req GetRelationRecordTotalRequest) grpcbase.Response
	GetRecordTakersHandler           func(ctx context.Context, req GetRecordTakersRequest) grpcbase.Response
	RecordExistsHandler              func(ctx context.Context, req RecordExistsRequest) grpcbase.Response
	BatchUnBindTaskHandler           func(ctx context.Context, req BatchUnBindTaskRequest) grpcbase.Response
	IncrRecordCommentNumHandler      func(ctx context.Context, req IncrRecordCommentNumRequest) grpcbase.Response
	GenerateRecordForNewUsersHandler func(ctx context.Context, req GenerateRecordForNewUsersRequest) grpcbase.Response
)

type Repository interface {
	GetRecord(ctx context.Context, request GetRecordRequest) grpcbase.Response
	GetRecordDetails(ctx context.Context, request GetRecordDetailsRequest) grpcbase.Response
	GetRelationRecordTotal(ctx context.Context, request GetRelationRecordTotalRequest) grpcbase.Response
	GetRecordTakers(ctx context.Context, request GetRecordTakersRequest) grpcbase.Response
	RecordExists(ctx context.Context, request RecordExistsRequest) grpcbase.Response
	BatchUnBindTask(ctx context.Context, request BatchUnBindTaskRequest) grpcbase.Response
	IncrRecordCommentNum(ctx context.Context, request IncrRecordCommentNumRequest) grpcbase.Response
	GenerateRecordForNewUsers(ctx context.Context, request GenerateRecordForNewUsersRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchUnBindTaskRequest struct {
	IsClearedRecord int32        `json:"is_cleared_record,omitempty"`
	RefDispatchID   string       `json:"ref_dispatch_id,omitempty"`
	Context         *UserContext `json:"context,omitempty"`
}

func (s BatchUnBindTaskRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GenerateRecordForNewUsersRequest struct {
	UserID       string       `json:"user_id,omitempty"`
	SenderUserID string       `json:"sender_user_id,omitempty"`
	Context      *UserContext `json:"context,omitempty"`
}

func (s GenerateRecordForNewUsersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordDetailsRequest struct {
	RecordID string       `json:"record_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetRecordDetailsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordDetailsResponse struct {
	Data []*RecordDetail `json:"data,omitempty"`
}

func (s GetRecordDetailsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordRequest struct {
	RecordID string       `json:"record_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetRecordRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordResponse struct {
	RecordID     string   `json:"record_id,omitempty"`
	RecordType   int32    `json:"record_type,omitempty"`
	Title        string   `json:"title,omitempty"`
	ShareState   int32    `json:"share_state,omitempty"`
	CreatorID    string   `json:"creator_id,omitempty"`
	CreateAt     int64    `json:"create_at,omitempty"`
	RefTasks     []string `json:"ref_tasks,omitempty"`
	RemindUserId []string `json:"remind_user_id,omitempty"`
}

func (s GetRecordResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordTakersRequest struct {
	RecordID string       `json:"record_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetRecordTakersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRecordTakersResponse struct {
	TakersID []string `json:"takers_id,omitempty"`
}

func (s GetRecordTakersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRelationRecordTotalRequest struct {
	RefDispatchsID []string     `json:"ref_dispatchs_id,omitempty"`
	Context        *UserContext `json:"context,omitempty"`
}

func (s GetRelationRecordTotalRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetRelationRecordTotalResponse struct {
	Data []*RelationDetail `json:"data,omitempty"`
}

func (s GetRelationRecordTotalResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type IncrRecordCommentNumRequest struct {
	RecordID string       `json:"record_id,omitempty"`
	Num      int32        `json:"num,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s IncrRecordCommentNumRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecordDetail struct {
	RecordID   string `json:"record_id,omitempty"`
	Title      string `json:"title,omitempty"`
	ShareState int32  `json:"share_state,omitempty"`
	CreatorID  string `json:"creator_id,omitempty"`
}

func (s RecordDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecordExistsRequest struct {
	RecordID string       `json:"record_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s RecordExistsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecordExistsResponse struct {
	Exists bool `json:"exists,omitempty"`
}

func (s RecordExistsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RelationDetail struct {
	DispatchID  string `json:"dispatch_id,omitempty"`
	UserID      string `json:"user_id,omitempty"`
	Total       int64  `json:"total,omitempty"`
	NoteTotal   int64  `json:"note_total,omitempty"`
	RecordTotal int64  `json:"record_total,omitempty"`
}

func (s RelationDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建record的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) GetRecord(ctx context.Context, req GetRecordRequest) grpcbase.Response {
	if GetRecordHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/GetRecord", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetRecordHandler(ctx, req.(GetRecordRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetRecordDetails(ctx context.Context, req GetRecordDetailsRequest) grpcbase.Response {
	if GetRecordDetailsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/GetRecordDetails", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetRecordDetailsHandler(ctx, req.(GetRecordDetailsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetRelationRecordTotal(ctx context.Context, req GetRelationRecordTotalRequest) grpcbase.Response {
	if GetRelationRecordTotalHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/GetRelationRecordTotal", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetRelationRecordTotalHandler(ctx, req.(GetRelationRecordTotalRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetRecordTakers(ctx context.Context, req GetRecordTakersRequest) grpcbase.Response {
	if GetRecordTakersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/GetRecordTakers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetRecordTakersHandler(ctx, req.(GetRecordTakersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) RecordExists(ctx context.Context, req RecordExistsRequest) grpcbase.Response {
	if RecordExistsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/RecordExists", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return RecordExistsHandler(ctx, req.(RecordExistsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchUnBindTask(ctx context.Context, req BatchUnBindTaskRequest) grpcbase.Response {
	if BatchUnBindTaskHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/BatchUnBindTask", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchUnBindTaskHandler(ctx, req.(BatchUnBindTaskRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) IncrRecordCommentNum(ctx context.Context, req IncrRecordCommentNumRequest) grpcbase.Response {
	if IncrRecordCommentNumHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/IncrRecordCommentNum", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return IncrRecordCommentNumHandler(ctx, req.(IncrRecordCommentNumRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GenerateRecordForNewUsers(ctx context.Context, req GenerateRecordForNewUsersRequest) grpcbase.Response {
	if GenerateRecordForNewUsersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.record/GenerateRecordForNewUsers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GenerateRecordForNewUsersHandler(ctx, req.(GenerateRecordForNewUsersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
