// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package record

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeGetRecordEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetRecordRequest)
		v := svc.GetRecord(ctx, req)
		return v, nil
	}
}
func decodeGetRecordRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetRecordRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetRecordRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func encodeGetRecordResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetRecordResponse)
	pbresp := &pb.GetRecordResponse{
		CreateAt:     resp.CreateAt,
		CreatorID:    resp.CreatorID,
		RecordID:     resp.RecordID,
		RecordType:   resp.RecordType,
		RefTasks:     resp.RefTasks,
		RemindUserId: resp.RemindUserId,
		ShareState:   resp.ShareState,
		Title:        resp.Title,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetRecordDetailsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetRecordDetailsRequest)
		v := svc.GetRecordDetails(ctx, req)
		return v, nil
	}
}
func decodeGetRecordDetailsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetRecordDetailsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetRecordDetailsRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func encodeGetRecordDetailsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetRecordDetailsResponse)
	//是复杂类型的数组
	var dataArray = make([]*pb.RecordDetail, 0)

	for _, v := range resp.Data {
		dataArray = append(dataArray, &pb.RecordDetail{
			RecordID:   v.RecordID,
			Title:      v.Title,
			ShareState: v.ShareState,
			CreatorID:  v.CreatorID,
		})
	}
	pbresp := &pb.GetRecordDetailsResponse{
		Data: dataArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetRelationRecordTotalEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetRelationRecordTotalRequest)
		v := svc.GetRelationRecordTotal(ctx, req)
		return v, nil
	}
}
func decodeGetRelationRecordTotalRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetRelationRecordTotalRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetRelationRecordTotalRequest{
		RefDispatchsID: r.RefDispatchsID,
		Context:        xcontext,
	}, nil
}

func encodeGetRelationRecordTotalResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetRelationRecordTotalResponse)
	//是复杂类型的数组
	var dataArray = make([]*pb.RelationDetail, 0)

	for _, v := range resp.Data {
		dataArray = append(dataArray, &pb.RelationDetail{
			DispatchID:  v.DispatchID,
			UserID:      v.UserID,
			Total:       v.Total,
			NoteTotal:   v.NoteTotal,
			RecordTotal: v.RecordTotal,
		})
	}
	pbresp := &pb.GetRelationRecordTotalResponse{
		Data: dataArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetRecordTakersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetRecordTakersRequest)
		v := svc.GetRecordTakers(ctx, req)
		return v, nil
	}
}
func decodeGetRecordTakersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetRecordTakersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetRecordTakersRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func encodeGetRecordTakersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetRecordTakersResponse)
	pbresp := &pb.GetRecordTakersResponse{
		TakersID: resp.TakersID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeRecordExistsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(RecordExistsRequest)
		v := svc.RecordExists(ctx, req)
		return v, nil
	}
}
func decodeRecordExistsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.RecordExistsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return RecordExistsRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func encodeRecordExistsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(RecordExistsResponse)
	pbresp := &pb.RecordExistsResponse{
		Exists: resp.Exists,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchUnBindTaskEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchUnBindTaskRequest)
		v := svc.BatchUnBindTask(ctx, req)
		return v, nil
	}
}
func decodeBatchUnBindTaskRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchUnBindTaskRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchUnBindTaskRequest{
		IsClearedRecord: r.IsClearedRecord,
		RefDispatchID:   r.RefDispatchID,
		Context:         xcontext,
	}, nil
}

func encodeBatchUnBindTaskResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeIncrRecordCommentNumEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(IncrRecordCommentNumRequest)
		v := svc.IncrRecordCommentNum(ctx, req)
		return v, nil
	}
}
func decodeIncrRecordCommentNumRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.IncrRecordCommentNumRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return IncrRecordCommentNumRequest{
		RecordID: r.RecordID,
		Num:      r.Num,
		Context:  xcontext,
	}, nil
}

func encodeIncrRecordCommentNumResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGenerateRecordForNewUsersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GenerateRecordForNewUsersRequest)
		v := svc.GenerateRecordForNewUsers(ctx, req)
		return v, nil
	}
}
func decodeGenerateRecordForNewUsersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GenerateRecordForNewUsersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GenerateRecordForNewUsersRequest{
		UserID:       r.UserID,
		SenderUserID: r.SenderUserID,
		Context:      xcontext,
	}, nil
}

func encodeGenerateRecordForNewUsersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}
