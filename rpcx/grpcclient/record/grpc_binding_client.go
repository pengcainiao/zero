// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package record

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.RecordSVC), &clientBinding{})
}

type clientBinding struct {
	getRecord                 endpoint.Endpoint
	getRecordDetails          endpoint.Endpoint
	getRelationRecordTotal    endpoint.Endpoint
	getRecordTakers           endpoint.Endpoint
	recordExists              endpoint.Endpoint
	batchUnBindTask           endpoint.Endpoint
	incrRecordCommentNum      endpoint.Endpoint
	generateRecordForNewUsers endpoint.Endpoint
}

func (c *clientBinding) GetRecord(ctx context.Context, params GetRecordRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecord request context is nil，trace span将无法生效")
	}
	response, err := c.getRecord(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetRecordDetails(ctx context.Context, params GetRecordDetailsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecordDetails request context is nil，trace span将无法生效")
	}
	response, err := c.getRecordDetails(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetRelationRecordTotal(ctx context.Context, params GetRelationRecordTotalRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRelationRecordTotal request context is nil，trace span将无法生效")
	}
	response, err := c.getRelationRecordTotal(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetRecordTakers(ctx context.Context, params GetRecordTakersRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetRecordTakers request context is nil，trace span将无法生效")
	}
	response, err := c.getRecordTakers(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) RecordExists(ctx context.Context, params RecordExistsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecordExists request context is nil，trace span将无法生效")
	}
	response, err := c.recordExists(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchUnBindTask(ctx context.Context, params BatchUnBindTaskRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchUnBindTask request context is nil，trace span将无法生效")
	}
	response, err := c.batchUnBindTask(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) IncrRecordCommentNum(ctx context.Context, params IncrRecordCommentNumRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：IncrRecordCommentNum request context is nil，trace span将无法生效")
	}
	response, err := c.incrRecordCommentNum(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GenerateRecordForNewUsers(ctx context.Context, params GenerateRecordForNewUsersRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GenerateRecordForNewUsers request context is nil，trace span将无法生效")
	}
	response, err := c.generateRecordForNewUsers(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.getRecord = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"GetRecord",
		encodeGetRecordRequest,
		decodeGetRecordResponse)
	c.getRecordDetails = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"GetRecordDetails",
		encodeGetRecordDetailsRequest,
		decodeGetRecordDetailsResponse)
	c.getRelationRecordTotal = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"GetRelationRecordTotal",
		encodeGetRelationRecordTotalRequest,
		decodeGetRelationRecordTotalResponse)
	c.getRecordTakers = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"GetRecordTakers",
		encodeGetRecordTakersRequest,
		decodeGetRecordTakersResponse)
	c.recordExists = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"RecordExists",
		encodeRecordExistsRequest,
		decodeRecordExistsResponse)
	c.batchUnBindTask = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"BatchUnBindTask",
		encodeBatchUnBindTaskRequest,
		decodeBatchUnBindTaskResponse)
	c.incrRecordCommentNum = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"IncrRecordCommentNum",
		encodeIncrRecordCommentNumRequest,
		decodeIncrRecordCommentNumResponse)
	c.generateRecordForNewUsers = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Record",
		"GenerateRecordForNewUsers",
		encodeGenerateRecordForNewUsersRequest,
		decodeGenerateRecordForNewUsersResponse)
}
