// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package record

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeGetRecordRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetRecordRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetRecordRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func decodeGetRecordResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetRecordResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetRecordResponse{
			CreateAt:     pbresp.CreateAt,
			CreatorID:    pbresp.CreatorID,
			RecordID:     pbresp.RecordID,
			RecordType:   pbresp.RecordType,
			RefTasks:     pbresp.RefTasks,
			RemindUserId: pbresp.RemindUserId,
			ShareState:   pbresp.ShareState,
			Title:        pbresp.Title,
		},
	}, nil
}
func encodeGetRecordDetailsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetRecordDetailsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetRecordDetailsRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func decodeGetRecordDetailsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetRecordDetailsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var dataArray = make([]*RecordDetail, 0)
	for _, v := range pbresp.Data {
		dataArray = append(dataArray, &RecordDetail{
			//判断字段是否为复杂类型
			RecordID: v.RecordID,
			//判断字段是否为复杂类型
			Title: v.Title,
			//判断字段是否为复杂类型
			ShareState: v.ShareState,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
		})
	}

	return grpcbase.Response{
		Data: GetRecordDetailsResponse{
			Data: dataArray,
		},
	}, nil
}
func encodeGetRelationRecordTotalRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetRelationRecordTotalRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetRelationRecordTotalRequest{
		RefDispatchsID: r.RefDispatchsID,
		Context:        xcontext,
	}, nil
}

func decodeGetRelationRecordTotalResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetRelationRecordTotalResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var dataArray = make([]*RelationDetail, 0)
	for _, v := range pbresp.Data {
		dataArray = append(dataArray, &RelationDetail{
			//判断字段是否为复杂类型
			DispatchID: v.DispatchID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Total: v.Total,
			//判断字段是否为复杂类型
			NoteTotal: v.NoteTotal,
			//判断字段是否为复杂类型
			RecordTotal: v.RecordTotal,
		})
	}

	return grpcbase.Response{
		Data: GetRelationRecordTotalResponse{
			Data: dataArray,
		},
	}, nil
}
func encodeGetRecordTakersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetRecordTakersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetRecordTakersRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func decodeGetRecordTakersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetRecordTakersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetRecordTakersResponse{
			TakersID: pbresp.TakersID,
		},
	}, nil
}
func encodeRecordExistsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(RecordExistsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.RecordExistsRequest{
		RecordID: r.RecordID,
		Context:  xcontext,
	}, nil
}

func decodeRecordExistsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.RecordExistsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: RecordExistsResponse{
			Exists: pbresp.Exists,
		},
	}, nil
}
func encodeBatchUnBindTaskRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchUnBindTaskRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchUnBindTaskRequest{
		IsClearedRecord: r.IsClearedRecord,
		RefDispatchID:   r.RefDispatchID,
		Context:         xcontext,
	}, nil
}

func decodeBatchUnBindTaskResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeIncrRecordCommentNumRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(IncrRecordCommentNumRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.IncrRecordCommentNumRequest{
		RecordID: r.RecordID,
		Num:      r.Num,
		Context:  xcontext,
	}, nil
}

func decodeIncrRecordCommentNumResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGenerateRecordForNewUsersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GenerateRecordForNewUsersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GenerateRecordForNewUsersRequest{
		UserID:       r.UserID,
		SenderUserID: r.SenderUserID,
		Context:      xcontext,
	}, nil
}

func decodeGenerateRecordForNewUsersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
