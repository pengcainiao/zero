// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package usercenter

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeHelloRpcBalanceEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(HelloRpcBalanceRequest)
		v := svc.HelloRpcBalance(ctx, req)
		return v, nil
	}
}
func decodeHelloRpcBalanceRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.HelloRpcBalanceRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return HelloRpcBalanceRequest{
		Context: xcontext,
	}, nil
}

func encodeHelloRpcBalanceResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeBatchGetUserSettingsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetUserSettingsRequest)
		v := svc.BatchGetUserSettings(ctx, req)
		return v, nil
	}
}
func decodeBatchGetUserSettingsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetUserSettingsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetUserSettingsRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeBatchGetUserSettingsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetUserSettingsResponse)
	//是复杂类型的数组
	var responseArray = make([]*pb.GetUserSettingsResponse, 0)

	for _, v := range resp.Response {
		responseArray = append(responseArray, &pb.GetUserSettingsResponse{
			UserID: v.UserID,
			Data:   v.Data,
		})
	}
	pbresp := &pb.BatchGetUserSettingsResponse{
		Response: responseArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryUsersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryUsersRequest)
		v := svc.BatchQueryUsers(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryUsersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryUsersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryUsersRequest{
		UserID:   r.UserID,
		LoginUid: r.LoginUid,
		Context:  xcontext,
	}, nil
}

func encodeBatchQueryUsersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryUsersResponse)
	//是复杂类型的数组
	var responseArray = make([]*pb.SimpleUserInfo, 0)

	for _, v := range resp.Response {
		responseArray = append(responseArray, &pb.SimpleUserInfo{
			Avatar:       v.Avatar,
			NickName:     v.NickName,
			Sex:          v.Sex,
			UserID:       v.UserID,
			OriginalName: v.OriginalName,
			Pinyin:       v.Pinyin,
			Telephone:    v.Telephone,
			CreateAt:     v.CreateAt,
			UserType:     v.UserType,

			Member: &pb.Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}
	pbresp := &pb.BatchQueryUsersResponse{
		Response: responseArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeTryGrantAccessTokenEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(TryGrantAccessTokenRequest)
		v := svc.TryGrantAccessToken(ctx, req)
		return v, nil
	}
}
func decodeTryGrantAccessTokenRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.TryGrantAccessTokenRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return TryGrantAccessTokenRequest{
		UnionID: r.UnionID,
		Context: xcontext,
	}, nil
}

func encodeTryGrantAccessTokenResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(TryGrantAccessTokenResponse)
	pbresp := &pb.TryGrantAccessTokenResponse{
		Token:  resp.Token,
		UserID: resp.UserID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserSettingsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserSettingsRequest)
		v := svc.GetUserSettings(ctx, req)
		return v, nil
	}
}
func decodeGetUserSettingsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserSettingsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserSettingsRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUserSettingsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserSettingsResponse)
	pbresp := &pb.GetUserSettingsResponse{
		Data:   resp.Data,
		UserID: resp.UserID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCreateUserByOfficialAccountEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateUserByOfficialAccountRequest)
		v := svc.CreateUserByOfficialAccount(ctx, req)
		return v, nil
	}
}
func decodeCreateUserByOfficialAccountRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateUserByOfficialAccountRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateUserByOfficialAccountRequest{
		NickName:       r.NickName,
		OpenID:         r.OpenID,
		Sex:            r.Sex,
		City:           r.City,
		Province:       r.Province,
		Avatar:         r.Avatar,
		UnionID:        r.UnionID,
		SubscribeScene: r.SubscribeScene,
		Wxid:           r.Wxid,
		Country:        r.Country,
		ChannelSource:  r.ChannelSource,
		Context:        xcontext,
	}, nil
}

func encodeCreateUserByOfficialAccountResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CreateUserByOfficialAccountResponse)
	pbresp := &pb.CreateUserByOfficialAccountResponse{
		UserID: resp.UserID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateUserEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateUserRequest)
		v := svc.UpdateUser(ctx, req)
		return v, nil
	}
}
func decodeUpdateUserRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateUserRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateUserRequest{
		UnionID:        r.UnionID,
		Subscribed:     r.Subscribed,
		OfficialOpenID: r.OfficialOpenID,
		UserID:         r.UserID,
		WXID:           r.WXID,
		Context:        xcontext,
	}, nil
}

func encodeUpdateUserResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeWhoShouldSendScheduleRemindSMSEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(WhoShouldSendScheduleRemindSMSRequest)
		v := svc.WhoShouldSendScheduleRemindSMS(ctx, req)
		return v, nil
	}
}
func decodeWhoShouldSendScheduleRemindSMSRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.WhoShouldSendScheduleRemindSMSRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return WhoShouldSendScheduleRemindSMSRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeWhoShouldSendScheduleRemindSMSResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(WhoShouldSendScheduleRemindSMSResponse)
	pbresp := &pb.WhoShouldSendScheduleRemindSMSResponse{
		CanSend:     resp.CanSend,
		PhoneNumber: resp.PhoneNumber,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeRecentlyLoginAppOrDesktopEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(RecentlyLoginAppOrDesktopRequest)
		v := svc.RecentlyLoginAppOrDesktop(ctx, req)
		return v, nil
	}
}
func decodeRecentlyLoginAppOrDesktopRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.RecentlyLoginAppOrDesktopRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return RecentlyLoginAppOrDesktopRequest{
		UserID:         r.UserID,
		DefineRecently: r.DefineRecently,
		Parameters:     r.Parameters,
		Context:        xcontext,
	}, nil
}

func encodeRecentlyLoginAppOrDesktopResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(RecentlyLoginAppOrDesktopResponse)
	pbresp := &pb.RecentlyLoginAppOrDesktopResponse{
		Extra:       resp.Extra,
		PhoneNumber: resp.PhoneNumber,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserDeviceIDEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserDeviceIDRequest)
		v := svc.GetUserDeviceID(ctx, req)
		return v, nil
	}
}
func decodeGetUserDeviceIDRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserDeviceIDRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserDeviceIDRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUserDeviceIDResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserDeviceIDResponse)
	pbresp := &pb.GetUserDeviceIDResponse{
		Data: resp.Data,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeSetUserLoginStateEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SetUserLoginStateRequest)
		v := svc.SetUserLoginState(ctx, req)
		return v, nil
	}
}
func decodeSetUserLoginStateRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SetUserLoginStateRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SetUserLoginStateRequest{
		UserID:   r.UserID,
		DeviceID: r.DeviceID,
		Platform: r.Platform,
		Online:   r.Online,
		Context:  xcontext,
	}, nil
}

func encodeSetUserLoginStateResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetUserPhoneNumberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserPhoneNumberRequest)
		v := svc.GetUserPhoneNumber(ctx, req)
		return v, nil
	}
}
func decodeGetUserPhoneNumberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserPhoneNumberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserPhoneNumberRequest{
		UsersID: r.UsersID,
		Context: xcontext,
	}, nil
}

func encodeGetUserPhoneNumberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserPhoneNumberResponse)
	//是复杂类型的数组
	var responseArray = make([]*pb.SimpleUserInfo, 0)

	for _, v := range resp.Response {
		responseArray = append(responseArray, &pb.SimpleUserInfo{
			Avatar:       v.Avatar,
			NickName:     v.NickName,
			Sex:          v.Sex,
			UserID:       v.UserID,
			OriginalName: v.OriginalName,
			Pinyin:       v.Pinyin,
			Telephone:    v.Telephone,
			CreateAt:     v.CreateAt,
			UserType:     v.UserType,

			Member: &pb.Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}
	pbresp := &pb.GetUserPhoneNumberResponse{
		Response: responseArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserOnlineStateEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserOnlineStateRequest)
		v := svc.GetUserOnlineState(ctx, req)
		return v, nil
	}
}
func decodeGetUserOnlineStateRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserOnlineStateRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserOnlineStateRequest{
		UsersID: r.UsersID,
		Context: xcontext,
	}, nil
}

func encodeGetUserOnlineStateResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserOnlineStateResponse)
	pbresp := &pb.GetUserOnlineStateResponse{
		Data: resp.Data,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchSetUserSettingsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchSetUserSettingsRequest)
		v := svc.BatchSetUserSettings(ctx, req)
		return v, nil
	}
}
func decodeBatchSetUserSettingsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchSetUserSettingsRequest)
	//是复杂类型的数组
	var xsettings = make([]*SetUserSettingsRequest, 0)

	for _, v := range r.Settings {
		xsettings = append(xsettings, &SetUserSettingsRequest{
			UserID: v.UserID,
			Data:   v.Data,
		})
	}
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchSetUserSettingsRequest{
		Settings: xsettings,
		Context:  xcontext,
	}, nil
}

func encodeBatchSetUserSettingsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeBatchGetUserAccountEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetUserAccountRequest)
		v := svc.BatchGetUserAccount(ctx, req)
		return v, nil
	}
}
func decodeBatchGetUserAccountRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetUserAccountRequest)
	//是复杂类型的数组
	var xuserAccountInfoRequests = make([]*UserAccountInfoRequest, 0)

	for _, v := range r.UserAccountInfoRequests {
		xuserAccountInfoRequests = append(xuserAccountInfoRequests, &UserAccountInfoRequest{
			UserID:          v.UserID,
			Account:         v.Account,
			AccountProvider: v.AccountProvider,
			OfficialOpenID:  v.OfficialOpenID,
			UnionID:         v.UnionID,
			GetSubscribed:   v.GetSubscribed,
		})
	}
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetUserAccountRequest{
		UserAccountInfoRequests: xuserAccountInfoRequests,
		Context:                 xcontext,
	}, nil
}

func encodeBatchGetUserAccountResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetUserAccountResponse)
	//是复杂类型的数组
	var useraccountinforesponsesArray = make([]*pb.UserAccountInfoResponse, 0)

	for _, v := range resp.UserAccountInfoResponses {
		useraccountinforesponsesArray = append(useraccountinforesponsesArray, &pb.UserAccountInfoResponse{
			UserID:          v.UserID,
			Account:         v.Account,
			AccountProvider: v.AccountProvider,
			OfficialOpenID:  v.OfficialOpenID,
			UnionID:         v.UnionID,
			Subscribed:      v.Subscribed,
		})
	}
	pbresp := &pb.BatchGetUserAccountResponse{
		UserAccountInfoResponses: useraccountinforesponsesArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserListPageEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserListPageRequest)
		v := svc.GetUserListPage(ctx, req)
		return v, nil
	}
}
func decodeGetUserListPageRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserListPageRequest)
	var xpaging *Paging
	if r.Paging != nil {
		xpaging = &Paging{
			PageNumber: r.Paging.PageNumber,
			PageRecord: r.Paging.PageRecord,
		}
	}
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserListPageRequest{
		UserID:    r.UserID,
		NickName:  r.NickName,
		Telephone: r.Telephone,
		Paging:    xpaging,
		Context:   xcontext,
	}, nil
}

func encodeGetUserListPageResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserListPageResponse)
	//是复杂类型的数组
	var usersArray = make([]*pb.UserInfo, 0)

	for _, v := range resp.Users {
		usersArray = append(usersArray, &pb.UserInfo{
			Avatar:       v.Avatar,
			NickName:     v.NickName,
			Sex:          v.Sex,
			UserID:       v.UserID,
			Telephone:    v.Telephone,
			CreateAt:     v.CreateAt,
			VipLevel:     v.VipLevel,
			Status:       v.Status,
			IsPreProd:    v.IsPreProd,
			Blacklist:    v.Blacklist,
			Referrer:     v.Referrer,
			UserType:     v.UserType,
			Pinyin:       v.Pinyin,
			OriginalName: v.OriginalName,
		})
	}
	pbresp := &pb.GetUserListPageResponse{
		Total: resp.Total,
		Users: usersArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUserOfflineEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UserOfflineRequest)
		v := svc.UserOffline(ctx, req)
		return v, nil
	}
}
func decodeUserOfflineRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UserOfflineRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UserOfflineRequest{
		UserID:   r.UserID,
		Platform: r.Platform,
		Context:  xcontext,
	}, nil
}

func encodeUserOfflineResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetUsersOnlineClientEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUsersOnlineClientRequest)
		v := svc.GetUsersOnlineClient(ctx, req)
		return v, nil
	}
}
func decodeGetUsersOnlineClientRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUsersOnlineClientRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUsersOnlineClientRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUsersOnlineClientResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUsersOnlineClientResponse)
	//是复杂类型的数组
	var responseArray = make([]*pb.GetUserSettingsResponse, 0)

	for _, v := range resp.Response {
		responseArray = append(responseArray, &pb.GetUserSettingsResponse{
			UserID: v.UserID,
			Data:   v.Data,
		})
	}
	pbresp := &pb.GetUsersOnlineClientResponse{
		Response: responseArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUsersWechatFilterConditionEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUsersWechatFilterConditionRequest)
		v := svc.GetUsersWechatFilterCondition(ctx, req)
		return v, nil
	}
}
func decodeGetUsersWechatFilterConditionRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUsersWechatFilterConditionRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUsersWechatFilterConditionRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUsersWechatFilterConditionResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUsersWechatFilterConditionResponse)
	pbresp := &pb.GetUsersWechatFilterConditionResponse{
		Data: resp.Data,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCheckUserOperateAuthEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CheckUserOperateAuthRequest)
		v := svc.CheckUserOperateAuth(ctx, req)
		return v, nil
	}
}
func decodeCheckUserOperateAuthRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CheckUserOperateAuthRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CheckUserOperateAuthRequest{
		Resource:    r.Resource,
		OperateType: r.OperateType,
		Context:     xcontext,
	}, nil
}

func encodeCheckUserOperateAuthResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CheckUserOperateAuthResponse)
	pbresp := &pb.CheckUserOperateAuthResponse{
		IsAuth: resp.IsAuth,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCreateComboBindEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateComboBindRequest)
		v := svc.CreateComboBind(ctx, req)
		return v, nil
	}
}
func decodeCreateComboBindRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateComboBindRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateComboBindRequest{
		ObjID:        r.ObjID,
		ObjType:      r.ObjType,
		ComboType:    r.ComboType,
		ComboVersion: r.ComboVersion,
		Context:      xcontext,
	}, nil
}

func encodeCreateComboBindResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CreateComboBindResponse)
	pbresp := &pb.CreateComboBindResponse{
		BindID:  resp.BindID,
		ComboID: resp.ComboID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCheckUserIsMemberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CheckUserIsMemberRequest)
		v := svc.CheckUserIsMember(ctx, req)
		return v, nil
	}
}
func decodeCheckUserIsMemberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CheckUserIsMemberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CheckUserIsMemberRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeCheckUserIsMemberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CheckUserIsMemberResponse)
	pbresp := &pb.CheckUserIsMemberResponse{
		IsMember: resp.IsMember,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskEquityEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskEquityRequest)
		v := svc.GetTaskEquity(ctx, req)
		return v, nil
	}
}
func decodeGetTaskEquityRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskEquityRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskEquityRequest{
		ComboType:    r.ComboType,
		ComboVersion: r.ComboVersion,
		Context:      xcontext,
	}, nil
}

func encodeGetTaskEquityResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskEquityResponse)
	pbresp := &pb.GetTaskEquityResponse{
		ChildTasksNum:    resp.ChildTasksNum,
		CustomRemindTime: resp.CustomRemindTime,
		TaskTakersNum:    resp.TaskTakersNum,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetEquityByMemberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetEquityByMemberRequest)
		v := svc.GetEquityByMember(ctx, req)
		return v, nil
	}
}
func decodeGetEquityByMemberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetEquityByMemberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetEquityByMemberRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetEquityByMemberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetEquityByMemberResponse)
	pbresp := &pb.GetEquityByMemberResponse{
		BatchExport:          resp.BatchExport,
		CreateContextDiagram: resp.CreateContextDiagram,
		CustomViewNum:        resp.CustomViewNum,
		MonthView:            resp.MonthView,
		SelfProjectNum:       resp.SelfProjectNum,
		TagTasksNum:          resp.TagTasksNum,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserNickNameEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserNickNameRequest)
		v := svc.GetUserNickName(ctx, req)
		return v, nil
	}
}
func decodeGetUserNickNameRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserNickNameRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserNickNameRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUserNickNameResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserNickNameResponse)
	pbresp := &pb.GetUserNickNameResponse{
		NickName: resp.NickName,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetCorpUserLoginTokenEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetCorpUserLoginTokenRequest)
		v := svc.GetCorpUserLoginToken(ctx, req)
		return v, nil
	}
}
func decodeGetCorpUserLoginTokenRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetCorpUserLoginTokenRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetCorpUserLoginTokenRequest{
		Account:    r.Account,
		CorpID:     r.CorpID,
		CorpUserID: r.CorpUserID,
		NickName:   r.NickName,
		Avatar:     r.Avatar,
		Context:    xcontext,
	}, nil
}

func encodeGetCorpUserLoginTokenResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetCorpUserLoginTokenResponse)

	var infoStruct = &pb.UserInfo{
		Avatar:       resp.Info.Avatar,
		NickName:     resp.Info.NickName,
		Sex:          resp.Info.Sex,
		UserID:       resp.Info.UserID,
		Telephone:    resp.Info.Telephone,
		CreateAt:     resp.Info.CreateAt,
		VipLevel:     resp.Info.VipLevel,
		Status:       resp.Info.Status,
		IsPreProd:    resp.Info.IsPreProd,
		Blacklist:    resp.Info.Blacklist,
		Referrer:     resp.Info.Referrer,
		UserType:     resp.Info.UserType,
		Pinyin:       resp.Info.Pinyin,
		OriginalName: resp.Info.OriginalName,
	}
	pbresp := &pb.GetCorpUserLoginTokenResponse{
		Avatar:   resp.Avatar,
		Info:     infoStruct,
		NickName: resp.NickName,
		Phone:    resp.Phone,
		Token:    resp.Token,
		UserID:   resp.UserID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateUserInfoEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateUserInfoRequest)
		v := svc.UpdateUserInfo(ctx, req)
		return v, nil
	}
}
func decodeUpdateUserInfoRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateUserInfoRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateUserInfoRequest{
		NickName:       r.NickName,
		Avatar:         r.Avatar,
		Telephone:      r.Telephone,
		Sex:            r.Sex,
		Status:         r.Status,
		UserID:         r.UserID,
		IsRefreshToken: r.IsRefreshToken,
		Context:        xcontext,
	}, nil
}

func encodeUpdateUserInfoResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(UpdateUserInfoResponse)
	pbresp := &pb.UpdateUserInfoResponse{
		Code:  resp.Code,
		Token: resp.Token,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryIsOpenRemindEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryIsOpenRemindRequest)
		v := svc.BatchQueryIsOpenRemind(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryIsOpenRemindRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryIsOpenRemindRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryIsOpenRemindRequest{
		UserIDs: r.UserIDs,
		Context: xcontext,
	}, nil
}

func encodeBatchQueryIsOpenRemindResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryIsOpenRemindResponse)
	pbresp := &pb.BatchQueryIsOpenRemindResponse{
		RemindMap: resp.RemindMap,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryUserMemberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryUserMemberRequest)
		v := svc.BatchQueryUserMember(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryUserMemberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryUserMemberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryUserMemberRequest{
		UserIDs: r.UserIDs,
		Context: xcontext,
	}, nil
}

func encodeBatchQueryUserMemberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryUserMemberResponse)
	//是复杂类型的数组
	var membersArray = make([]*pb.Member, 0)

	for _, v := range resp.Members {
		membersArray = append(membersArray, &pb.Member{
			UserID:      v.UserID,
			EndTime:     v.EndTime,
			State:       v.State,
			NextEndTime: v.NextEndTime,
			CorpID:      v.CorpID,
			CorpName:    v.CorpName,
			CuStatus:    v.CuStatus,
			IsVisible:   v.IsVisible,
		})
	}
	pbresp := &pb.BatchQueryUserMemberResponse{
		Members:   membersArray,
		UserState: resp.UserState,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeAddMemberByGoodsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(AddMemberByGoodsRequest)
		v := svc.AddMemberByGoods(ctx, req)
		return v, nil
	}
}
func decodeAddMemberByGoodsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.AddMemberByGoodsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return AddMemberByGoodsRequest{
		UserIDs:     r.UserIDs,
		GoodsID:     r.GoodsID,
		Context:     xcontext,
		OrderID:     r.OrderID,
		CreatorID:   r.CreatorID,
		SendVipType: r.SendVipType,
		DayNum:      r.DayNum,
	}, nil
}

func encodeAddMemberByGoodsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(AddMemberByGoodsResponse)
	pbresp := &pb.AddMemberByGoodsResponse{
		FailUserID: resp.FailUserID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryUserInteractionEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryUserInteractionRequest)
		v := svc.BatchQueryUserInteraction(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryUserInteractionRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryUserInteractionRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryUserInteractionRequest{
		UserIDs:    r.UserIDs,
		IsInteract: r.IsInteract,
		Context:    xcontext,
	}, nil
}

func encodeBatchQueryUserInteractionResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryUserInteractionResponse)
	//是复杂类型的数组
	var interactsArray = make([]*pb.UserInteracts, 0)

	for _, v := range resp.Interacts {
		interactsArray = append(interactsArray, &pb.UserInteracts{
			UserID:     v.UserID,
			Remark:     v.Remark,
			Pinyin:     v.Pinyin,
			InteractID: v.InteractID,
		})
	}
	pbresp := &pb.BatchQueryUserInteractionResponse{
		Interacts: interactsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetUserSettingByKeyEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetUserSettingByKeyRequest)
		v := svc.BatchGetUserSettingByKey(ctx, req)
		return v, nil
	}
}
func decodeBatchGetUserSettingByKeyRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetUserSettingByKeyRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetUserSettingByKeyRequest{
		UserID:     r.UserID,
		SettingKey: r.SettingKey,
		Context:    xcontext,
	}, nil
}

func encodeBatchGetUserSettingByKeyResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetUserSettingByKeyResponse)
	pbresp := &pb.BatchGetUserSettingByKeyResponse{
		Values: resp.Values,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetUserInfoByTelephoneEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetUserInfoByTelephoneRequest)
		v := svc.BatchGetUserInfoByTelephone(ctx, req)
		return v, nil
	}
}
func decodeBatchGetUserInfoByTelephoneRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetUserInfoByTelephoneRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetUserInfoByTelephoneRequest{
		Telephone: r.Telephone,
		Context:   xcontext,
	}, nil
}

func encodeBatchGetUserInfoByTelephoneResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetUserInfoByTelephoneResponse)
	//是复杂类型的数组
	var responseArray = make([]*pb.SimpleUserInfo, 0)

	for _, v := range resp.Response {
		responseArray = append(responseArray, &pb.SimpleUserInfo{
			Avatar:       v.Avatar,
			NickName:     v.NickName,
			Sex:          v.Sex,
			UserID:       v.UserID,
			OriginalName: v.OriginalName,
			Pinyin:       v.Pinyin,
			Telephone:    v.Telephone,
			CreateAt:     v.CreateAt,
			UserType:     v.UserType,

			Member: &pb.Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}
	pbresp := &pb.BatchGetUserInfoByTelephoneResponse{
		Response: responseArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryMemberByPlaceOrderEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryMemberByPlaceOrderRequest)
		v := svc.BatchQueryMemberByPlaceOrder(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryMemberByPlaceOrderRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryMemberByPlaceOrderRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryMemberByPlaceOrderRequest{
		UserID:  r.UserID,
		VipType: r.VipType,
		Context: xcontext,
	}, nil
}

func encodeBatchQueryMemberByPlaceOrderResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryMemberByPlaceOrderResponse)
	pbresp := &pb.BatchQueryMemberByPlaceOrderResponse{
		MemberEndTime: resp.MemberEndTime,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
