// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package usercenter

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	HelloRpcBalanceHandler                func(ctx context.Context, req HelloRpcBalanceRequest) grpcbase.Response
	BatchGetUserSettingsHandler           func(ctx context.Context, req BatchGetUserSettingsRequest) grpcbase.Response
	BatchQueryUsersHandler                func(ctx context.Context, req BatchQueryUsersRequest) grpcbase.Response
	TryGrantAccessTokenHandler            func(ctx context.Context, req TryGrantAccessTokenRequest) grpcbase.Response
	GetUserSettingsHandler                func(ctx context.Context, req GetUserSettingsRequest) grpcbase.Response
	CreateUserByOfficialAccountHandler    func(ctx context.Context, req CreateUserByOfficialAccountRequest) grpcbase.Response
	UpdateUserHandler                     func(ctx context.Context, req UpdateUserRequest) grpcbase.Response
	WhoShouldSendScheduleRemindSMSHandler func(ctx context.Context, req WhoShouldSendScheduleRemindSMSRequest) grpcbase.Response
	RecentlyLoginAppOrDesktopHandler      func(ctx context.Context, req RecentlyLoginAppOrDesktopRequest) grpcbase.Response
	GetUserDeviceIDHandler                func(ctx context.Context, req GetUserDeviceIDRequest) grpcbase.Response
	SetUserLoginStateHandler              func(ctx context.Context, req SetUserLoginStateRequest) grpcbase.Response
	GetUserPhoneNumberHandler             func(ctx context.Context, req GetUserPhoneNumberRequest) grpcbase.Response
	GetUserOnlineStateHandler             func(ctx context.Context, req GetUserOnlineStateRequest) grpcbase.Response
	BatchSetUserSettingsHandler           func(ctx context.Context, req BatchSetUserSettingsRequest) grpcbase.Response
	BatchGetUserAccountHandler            func(ctx context.Context, req BatchGetUserAccountRequest) grpcbase.Response
	GetUserListPageHandler                func(ctx context.Context, req GetUserListPageRequest) grpcbase.Response
	UserOfflineHandler                    func(ctx context.Context, req UserOfflineRequest) grpcbase.Response
	GetUsersOnlineClientHandler           func(ctx context.Context, req GetUsersOnlineClientRequest) grpcbase.Response
	GetUsersWechatFilterConditionHandler  func(ctx context.Context, req GetUsersWechatFilterConditionRequest) grpcbase.Response
	CheckUserOperateAuthHandler           func(ctx context.Context, req CheckUserOperateAuthRequest) grpcbase.Response
	CreateComboBindHandler                func(ctx context.Context, req CreateComboBindRequest) grpcbase.Response
	CheckUserIsMemberHandler              func(ctx context.Context, req CheckUserIsMemberRequest) grpcbase.Response
	GetTaskEquityHandler                  func(ctx context.Context, req GetTaskEquityRequest) grpcbase.Response
	GetEquityByMemberHandler              func(ctx context.Context, req GetEquityByMemberRequest) grpcbase.Response
	GetUserNickNameHandler                func(ctx context.Context, req GetUserNickNameRequest) grpcbase.Response
	GetCorpUserLoginTokenHandler          func(ctx context.Context, req GetCorpUserLoginTokenRequest) grpcbase.Response
	UpdateUserInfoHandler                 func(ctx context.Context, req UpdateUserInfoRequest) grpcbase.Response
	BatchQueryIsOpenRemindHandler         func(ctx context.Context, req BatchQueryIsOpenRemindRequest) grpcbase.Response
	BatchQueryUserMemberHandler           func(ctx context.Context, req BatchQueryUserMemberRequest) grpcbase.Response
	AddMemberByGoodsHandler               func(ctx context.Context, req AddMemberByGoodsRequest) grpcbase.Response
	BatchQueryUserInteractionHandler      func(ctx context.Context, req BatchQueryUserInteractionRequest) grpcbase.Response
	BatchGetUserSettingByKeyHandler       func(ctx context.Context, req BatchGetUserSettingByKeyRequest) grpcbase.Response
	BatchGetUserInfoByTelephoneHandler    func(ctx context.Context, req BatchGetUserInfoByTelephoneRequest) grpcbase.Response
	BatchQueryMemberByPlaceOrderHandler   func(ctx context.Context, req BatchQueryMemberByPlaceOrderRequest) grpcbase.Response
)

type Repository interface {
	HelloRpcBalance(ctx context.Context, request HelloRpcBalanceRequest) grpcbase.Response
	BatchGetUserSettings(ctx context.Context, request BatchGetUserSettingsRequest) grpcbase.Response
	BatchQueryUsers(ctx context.Context, request BatchQueryUsersRequest) grpcbase.Response
	TryGrantAccessToken(ctx context.Context, request TryGrantAccessTokenRequest) grpcbase.Response
	GetUserSettings(ctx context.Context, request GetUserSettingsRequest) grpcbase.Response
	CreateUserByOfficialAccount(ctx context.Context, request CreateUserByOfficialAccountRequest) grpcbase.Response
	UpdateUser(ctx context.Context, request UpdateUserRequest) grpcbase.Response
	WhoShouldSendScheduleRemindSMS(ctx context.Context, request WhoShouldSendScheduleRemindSMSRequest) grpcbase.Response
	RecentlyLoginAppOrDesktop(ctx context.Context, request RecentlyLoginAppOrDesktopRequest) grpcbase.Response
	GetUserDeviceID(ctx context.Context, request GetUserDeviceIDRequest) grpcbase.Response
	SetUserLoginState(ctx context.Context, request SetUserLoginStateRequest) grpcbase.Response
	GetUserPhoneNumber(ctx context.Context, request GetUserPhoneNumberRequest) grpcbase.Response
	GetUserOnlineState(ctx context.Context, request GetUserOnlineStateRequest) grpcbase.Response
	BatchSetUserSettings(ctx context.Context, request BatchSetUserSettingsRequest) grpcbase.Response
	BatchGetUserAccount(ctx context.Context, request BatchGetUserAccountRequest) grpcbase.Response
	GetUserListPage(ctx context.Context, request GetUserListPageRequest) grpcbase.Response
	UserOffline(ctx context.Context, request UserOfflineRequest) grpcbase.Response
	GetUsersOnlineClient(ctx context.Context, request GetUsersOnlineClientRequest) grpcbase.Response
	GetUsersWechatFilterCondition(ctx context.Context, request GetUsersWechatFilterConditionRequest) grpcbase.Response
	CheckUserOperateAuth(ctx context.Context, request CheckUserOperateAuthRequest) grpcbase.Response
	CreateComboBind(ctx context.Context, request CreateComboBindRequest) grpcbase.Response
	CheckUserIsMember(ctx context.Context, request CheckUserIsMemberRequest) grpcbase.Response
	GetTaskEquity(ctx context.Context, request GetTaskEquityRequest) grpcbase.Response
	GetEquityByMember(ctx context.Context, request GetEquityByMemberRequest) grpcbase.Response
	GetUserNickName(ctx context.Context, request GetUserNickNameRequest) grpcbase.Response
	GetCorpUserLoginToken(ctx context.Context, request GetCorpUserLoginTokenRequest) grpcbase.Response
	UpdateUserInfo(ctx context.Context, request UpdateUserInfoRequest) grpcbase.Response
	BatchQueryIsOpenRemind(ctx context.Context, request BatchQueryIsOpenRemindRequest) grpcbase.Response
	BatchQueryUserMember(ctx context.Context, request BatchQueryUserMemberRequest) grpcbase.Response
	AddMemberByGoods(ctx context.Context, request AddMemberByGoodsRequest) grpcbase.Response
	BatchQueryUserInteraction(ctx context.Context, request BatchQueryUserInteractionRequest) grpcbase.Response
	BatchGetUserSettingByKey(ctx context.Context, request BatchGetUserSettingByKeyRequest) grpcbase.Response
	BatchGetUserInfoByTelephone(ctx context.Context, request BatchGetUserInfoByTelephoneRequest) grpcbase.Response
	BatchQueryMemberByPlaceOrder(ctx context.Context, request BatchQueryMemberByPlaceOrderRequest) grpcbase.Response
}

type AddMemberByGoodsRequest struct {
	UserIDs     []string     `json:"user_i_ds,omitempty"`
	GoodsID     int32        `json:"goods_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
	OrderID     string       `json:"order_id,omitempty"`
	CreatorID   string       `json:"creator_id,omitempty"`
	SendVipType int32        `json:"send_vip_type,omitempty"`
	DayNum      int64        `json:"day_num,omitempty"`
}

func (s AddMemberByGoodsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type AddMemberByGoodsResponse struct {
	FailUserID []string `json:"fail_user_id,omitempty"`
}

func (s AddMemberByGoodsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserAccountRequest struct {
	UserAccountInfoRequests []*UserAccountInfoRequest `json:"user_account_info_requests,omitempty"`
	Context                 *UserContext              `json:"context,omitempty"`
}

func (s BatchGetUserAccountRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserAccountResponse struct {
	UserAccountInfoResponses []*UserAccountInfoResponse `json:"user_account_info_responses,omitempty"`
}

func (s BatchGetUserAccountResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserInfoByTelephoneRequest struct {
	Telephone []string     `json:"telephone,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s BatchGetUserInfoByTelephoneRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserInfoByTelephoneResponse struct {
	Response []*SimpleUserInfo `json:"response,omitempty"`
}

func (s BatchGetUserInfoByTelephoneResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserSettingByKeyRequest struct {
	UserID     []string     `json:"user_id,omitempty"`
	SettingKey string       `json:"setting_key,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s BatchGetUserSettingByKeyRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserSettingByKeyResponse struct {
	Values map[string]string `json:"values,omitempty"`
}

func (s BatchGetUserSettingByKeyResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserSettingsRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s BatchGetUserSettingsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetUserSettingsResponse struct {
	Response []*GetUserSettingsResponse `json:"response,omitempty"`
}

func (s BatchGetUserSettingsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryIsOpenRemindRequest struct {
	UserIDs []string     `json:"user_i_ds,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s BatchQueryIsOpenRemindRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryIsOpenRemindResponse struct {
	RemindMap map[string]bool `json:"remind_map,omitempty"`
}

func (s BatchQueryIsOpenRemindResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryMemberByPlaceOrderRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	VipType int32        `json:"vip_type,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s BatchQueryMemberByPlaceOrderRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryMemberByPlaceOrderResponse struct {
	MemberEndTime map[string]int64 `json:"member_end_time,omitempty"`
}

func (s BatchQueryMemberByPlaceOrderResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUserInteractionRequest struct {
	UserIDs    []string     `json:"user_i_ds,omitempty"`
	IsInteract int32        `json:"is_interact,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s BatchQueryUserInteractionRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUserInteractionResponse struct {
	Interacts []*UserInteracts `json:"interacts,omitempty"`
}

func (s BatchQueryUserInteractionResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUserMemberRequest struct {
	UserIDs []string     `json:"user_i_ds,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s BatchQueryUserMemberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUserMemberResponse struct {
	UserState map[string]int32 `json:"user_state,omitempty"`
	Members   []*Member        `json:"members,omitempty"`
}

func (s BatchQueryUserMemberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUsersRequest struct {
	UserID   []string     `json:"user_id,omitempty"`
	LoginUid string       `json:"login_uid,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s BatchQueryUsersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryUsersResponse struct {
	Response []*SimpleUserInfo `json:"response,omitempty"`
}

func (s BatchQueryUsersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchSetUserSettingsRequest struct {
	Settings []*SetUserSettingsRequest `json:"settings,omitempty"`
	Context  *UserContext              `json:"context,omitempty"`
}

func (s BatchSetUserSettingsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CheckUserIsMemberRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s CheckUserIsMemberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CheckUserIsMemberResponse struct {
	IsMember bool `json:"is_member,omitempty"`
}

func (s CheckUserIsMemberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CheckUserOperateAuthRequest struct {
	Resource    map[string]string `json:"resource,omitempty"`
	OperateType int32             `json:"operate_type,omitempty"`
	Context     *UserContext      `json:"context,omitempty"`
}

func (s CheckUserOperateAuthRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CheckUserOperateAuthResponse struct {
	IsAuth bool `json:"is_auth,omitempty"`
}

func (s CheckUserOperateAuthResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateComboBindRequest struct {
	ObjID        string       `json:"obj_id,omitempty"`
	ObjType      int32        `json:"obj_type,omitempty"`
	ComboType    int32        `json:"combo_type,omitempty"`
	ComboVersion int32        `json:"combo_version,omitempty"`
	Context      *UserContext `json:"context,omitempty"`
}

func (s CreateComboBindRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateComboBindResponse struct {
	BindID  string `json:"bind_id,omitempty"`
	ComboID int32  `json:"combo_id,omitempty"`
}

func (s CreateComboBindResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateUserByOfficialAccountRequest struct {
	NickName       string       `json:"nick_name,omitempty"`
	OpenID         string       `json:"open_id,omitempty"`
	Sex            int32        `json:"sex,omitempty"`
	City           string       `json:"city,omitempty"`
	Province       string       `json:"province,omitempty"`
	Avatar         string       `json:"avatar,omitempty"`
	UnionID        string       `json:"union_id,omitempty"`
	SubscribeScene string       `json:"subscribe_scene,omitempty"`
	Wxid           string       `json:"wxid,omitempty"`
	Country        string       `json:"country,omitempty"`
	ChannelSource  string       `json:"channel_source,omitempty"`
	Context        *UserContext `json:"context,omitempty"`
}

func (s CreateUserByOfficialAccountRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateUserByOfficialAccountResponse struct {
	UserID string `json:"user_id,omitempty"`
}

func (s CreateUserByOfficialAccountResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetCorpUserLoginTokenRequest struct {
	Account    string       `json:"account,omitempty"`
	CorpID     string       `json:"corp_id,omitempty"`
	CorpUserID string       `json:"corp_user_id,omitempty"`
	NickName   string       `json:"nick_name,omitempty"`
	Avatar     string       `json:"avatar,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s GetCorpUserLoginTokenRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetCorpUserLoginTokenResponse struct {
	Token    string    `json:"token,omitempty"`
	UserID   string    `json:"user_id,omitempty"`
	Phone    string    `json:"phone,omitempty"`
	NickName string    `json:"nick_name,omitempty"`
	Avatar   string    `json:"avatar,omitempty"`
	Info     *UserInfo `json:"info,omitempty"`
}

func (s GetCorpUserLoginTokenResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetEquityByMemberRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetEquityByMemberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetEquityByMemberResponse struct {
	SelfProjectNum       int64 `json:"self_project_num,omitempty"`
	CustomViewNum        int64 `json:"custom_view_num,omitempty"`
	MonthView            bool  `json:"month_view,omitempty"`
	BatchExport          bool  `json:"batch_export,omitempty"`
	TagTasksNum          int64 `json:"tag_tasks_num,omitempty"`
	CreateContextDiagram bool  `json:"create_context_diagram,omitempty"`
}

func (s GetEquityByMemberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskEquityRequest struct {
	ComboType    int64        `json:"combo_type,omitempty"`
	ComboVersion int64        `json:"combo_version,omitempty"`
	Context      *UserContext `json:"context,omitempty"`
}

func (s GetTaskEquityRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskEquityResponse struct {
	TaskTakersNum    int64 `json:"task_takers_num,omitempty"`
	ChildTasksNum    int64 `json:"child_tasks_num,omitempty"`
	CustomRemindTime int64 `json:"custom_remind_time,omitempty"`
}

func (s GetTaskEquityResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserDeviceIDRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserDeviceIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserDeviceIDResponse struct {
	Data map[string]string `json:"data,omitempty"`
}

func (s GetUserDeviceIDResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserListPageRequest struct {
	UserID    string       `json:"user_id,omitempty"`
	NickName  string       `json:"nick_name,omitempty"`
	Telephone string       `json:"telephone,omitempty"`
	Paging    *Paging      `json:"paging,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetUserListPageRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserListPageResponse struct {
	Total int64       `json:"total,omitempty"`
	Users []*UserInfo `json:"users,omitempty"`
}

func (s GetUserListPageResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserNickNameRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserNickNameRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserNickNameResponse struct {
	NickName string `json:"nick_name,omitempty"`
}

func (s GetUserNickNameResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserOnlineStateRequest struct {
	UsersID []string     `json:"users_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserOnlineStateRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserOnlineStateResponse struct {
	Data map[string]string `json:"data,omitempty"`
}

func (s GetUserOnlineStateResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserPhoneNumberRequest struct {
	UsersID []string     `json:"users_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserPhoneNumberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserPhoneNumberResponse struct {
	Response []*SimpleUserInfo `json:"response,omitempty"`
}

func (s GetUserPhoneNumberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserSettingsRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserSettingsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserSettingsResponse struct {
	UserID string            `json:"user_id,omitempty"`
	Data   map[string]string `json:"data,omitempty"`
}

func (s GetUserSettingsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersOnlineClientRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUsersOnlineClientRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersOnlineClientResponse struct {
	Response []*GetUserSettingsResponse `json:"response,omitempty"`
}

func (s GetUsersOnlineClientResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersWechatFilterConditionRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUsersWechatFilterConditionRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersWechatFilterConditionResponse struct {
	Data map[string]int64 `json:"data,omitempty"`
}

func (s GetUsersWechatFilterConditionResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type HelloRpcBalanceRequest struct {
	Context *UserContext `json:"context,omitempty"`
}

func (s HelloRpcBalanceRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Member struct {
	UserID      string `json:"user_id,omitempty"`
	EndTime     int64  `json:"end_time,omitempty"`
	State       int32  `json:"state,omitempty"`
	NextEndTime int64  `json:"next_end_time,omitempty"`
	CorpID      string `json:"corp_id,omitempty"`
	CorpName    string `json:"corp_name,omitempty"`
	CuStatus    int32  `json:"cu_status,omitempty"`
	IsVisible   int32  `json:"is_visible,omitempty"`
}

func (s Member) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Paging struct {
	PageNumber int32 `json:"page_number,omitempty"`
	PageRecord int32 `json:"page_record,omitempty"`
}

func (s Paging) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecentlyLoginAppOrDesktopRequest struct {
	UserID         string            `json:"user_id,omitempty"`
	DefineRecently int32             `json:"define_recently,omitempty"`
	Parameters     map[string]string `json:"parameters,omitempty"`
	Context        *UserContext      `json:"context,omitempty"`
}

func (s RecentlyLoginAppOrDesktopRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecentlyLoginAppOrDesktopResponse struct {
	PhoneNumber string            `json:"phone_number,omitempty"`
	Extra       map[string]string `json:"extra,omitempty"`
}

func (s RecentlyLoginAppOrDesktopResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SetUserLoginStateRequest struct {
	UserID   string       `json:"user_id,omitempty"`
	DeviceID string       `json:"device_id,omitempty"`
	Platform string       `json:"platform,omitempty"`
	Online   int32        `json:"online,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s SetUserLoginStateRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SetUserSettingsRequest struct {
	UserID string            `json:"user_id,omitempty"`
	Data   map[string]string `json:"data,omitempty"`
}

func (s SetUserSettingsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SimpleUserInfo struct {
	Avatar       string  `json:"avatar,omitempty"`
	NickName     string  `json:"nick_name,omitempty"`
	Sex          string  `json:"sex,omitempty"`
	UserID       string  `json:"user_id,omitempty"`
	OriginalName string  `json:"original_name,omitempty"`
	Pinyin       string  `json:"pinyin,omitempty"`
	Telephone    string  `json:"telephone,omitempty"`
	CreateAt     int64   `json:"create_at,omitempty"`
	UserType     int64   `json:"user_type,omitempty"`
	Member       *Member `json:"member,omitempty"`
}

func (s SimpleUserInfo) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TryGrantAccessTokenRequest struct {
	UnionID string       `json:"union_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s TryGrantAccessTokenRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TryGrantAccessTokenResponse struct {
	UserID string `json:"user_id,omitempty"`
	Token  string `json:"token,omitempty"`
}

func (s TryGrantAccessTokenResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateUserInfoRequest struct {
	NickName       string       `json:"nick_name,omitempty"`
	Avatar         string       `json:"avatar,omitempty"`
	Telephone      string       `json:"telephone,omitempty"`
	Sex            int32        `json:"sex,omitempty"`
	Status         int32        `json:"status,omitempty"`
	UserID         string       `json:"user_id,omitempty"`
	IsRefreshToken bool         `json:"is_refresh_token,omitempty"`
	Context        *UserContext `json:"context,omitempty"`
}

func (s UpdateUserInfoRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateUserInfoResponse struct {
	Code  int64  `json:"code,omitempty"`
	Token string `json:"token,omitempty"`
}

func (s UpdateUserInfoResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateUserRequest struct {
	UnionID        string       `json:"union_id,omitempty"`
	Subscribed     bool         `json:"subscribed,omitempty"`
	OfficialOpenID string       `json:"official_open_id,omitempty"`
	UserID         string       `json:"user_id,omitempty"`
	WXID           string       `json:"wxid,omitempty"`
	Context        *UserContext `json:"context,omitempty"`
}

func (s UpdateUserRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserAccountInfoRequest struct {
	UserID          string `json:"user_id,omitempty"`
	Account         string `json:"account,omitempty"`
	AccountProvider string `json:"account_provider,omitempty"`
	OfficialOpenID  string `json:"official_open_id,omitempty"`
	UnionID         string `json:"union_id,omitempty"`
	GetSubscribed   bool   `json:"get_subscribed,omitempty"`
}

func (s UserAccountInfoRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserAccountInfoResponse struct {
	UserID          string `json:"user_id,omitempty"`
	Account         string `json:"account,omitempty"`
	AccountProvider string `json:"account_provider,omitempty"`
	OfficialOpenID  string `json:"official_open_id,omitempty"`
	UnionID         string `json:"union_id,omitempty"`
	Subscribed      int32  `json:"subscribed,omitempty"`
}

func (s UserAccountInfoResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserInfo struct {
	Avatar       string `json:"avatar,omitempty"`
	NickName     string `json:"nick_name,omitempty"`
	Sex          string `json:"sex,omitempty"`
	UserID       string `json:"user_id,omitempty"`
	Telephone    string `json:"telephone,omitempty"`
	CreateAt     int64  `json:"create_at,omitempty"`
	VipLevel     int32  `json:"vip_level,omitempty"`
	Status       int32  `json:"status,omitempty"`
	IsPreProd    int32  `json:"is_pre_prod,omitempty"`
	Blacklist    int32  `json:"blacklist,omitempty"`
	Referrer     int64  `json:"referrer,omitempty"`
	UserType     int32  `json:"user_type,omitempty"`
	Pinyin       string `json:"pinyin,omitempty"`
	OriginalName string `json:"original_name,omitempty"`
}

func (s UserInfo) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserInteracts struct {
	UserID     string `json:"user_id,omitempty"`
	Remark     string `json:"remark,omitempty"`
	Pinyin     string `json:"pinyin,omitempty"`
	InteractID string `json:"interact_id,omitempty"`
}

func (s UserInteracts) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserOfflineRequest struct {
	UserID   string       `json:"user_id,omitempty"`
	Platform string       `json:"platform,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s UserOfflineRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type WhoShouldSendScheduleRemindSMSRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s WhoShouldSendScheduleRemindSMSRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type WhoShouldSendScheduleRemindSMSResponse struct {
	CanSend     bool   `json:"can_send,omitempty"`
	PhoneNumber string `json:"phone_number,omitempty"`
}

func (s WhoShouldSendScheduleRemindSMSResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建usercenter的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) HelloRpcBalance(ctx context.Context, req HelloRpcBalanceRequest) grpcbase.Response {
	if HelloRpcBalanceHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/HelloRpcBalance", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return HelloRpcBalanceHandler(ctx, req.(HelloRpcBalanceRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetUserSettings(ctx context.Context, req BatchGetUserSettingsRequest) grpcbase.Response {
	if BatchGetUserSettingsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchGetUserSettings", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetUserSettingsHandler(ctx, req.(BatchGetUserSettingsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryUsers(ctx context.Context, req BatchQueryUsersRequest) grpcbase.Response {
	if BatchQueryUsersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchQueryUsers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryUsersHandler(ctx, req.(BatchQueryUsersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) TryGrantAccessToken(ctx context.Context, req TryGrantAccessTokenRequest) grpcbase.Response {
	if TryGrantAccessTokenHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/TryGrantAccessToken", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return TryGrantAccessTokenHandler(ctx, req.(TryGrantAccessTokenRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserSettings(ctx context.Context, req GetUserSettingsRequest) grpcbase.Response {
	if GetUserSettingsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserSettings", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserSettingsHandler(ctx, req.(GetUserSettingsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateUserByOfficialAccount(ctx context.Context, req CreateUserByOfficialAccountRequest) grpcbase.Response {
	if CreateUserByOfficialAccountHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/CreateUserByOfficialAccount", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateUserByOfficialAccountHandler(ctx, req.(CreateUserByOfficialAccountRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateUser(ctx context.Context, req UpdateUserRequest) grpcbase.Response {
	if UpdateUserHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/UpdateUser", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateUserHandler(ctx, req.(UpdateUserRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) WhoShouldSendScheduleRemindSMS(ctx context.Context, req WhoShouldSendScheduleRemindSMSRequest) grpcbase.Response {
	if WhoShouldSendScheduleRemindSMSHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/WhoShouldSendScheduleRemindSMS", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return WhoShouldSendScheduleRemindSMSHandler(ctx, req.(WhoShouldSendScheduleRemindSMSRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) RecentlyLoginAppOrDesktop(ctx context.Context, req RecentlyLoginAppOrDesktopRequest) grpcbase.Response {
	if RecentlyLoginAppOrDesktopHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/RecentlyLoginAppOrDesktop", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return RecentlyLoginAppOrDesktopHandler(ctx, req.(RecentlyLoginAppOrDesktopRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserDeviceID(ctx context.Context, req GetUserDeviceIDRequest) grpcbase.Response {
	if GetUserDeviceIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserDeviceID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserDeviceIDHandler(ctx, req.(GetUserDeviceIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) SetUserLoginState(ctx context.Context, req SetUserLoginStateRequest) grpcbase.Response {
	if SetUserLoginStateHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/SetUserLoginState", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return SetUserLoginStateHandler(ctx, req.(SetUserLoginStateRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserPhoneNumber(ctx context.Context, req GetUserPhoneNumberRequest) grpcbase.Response {
	if GetUserPhoneNumberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserPhoneNumber", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserPhoneNumberHandler(ctx, req.(GetUserPhoneNumberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserOnlineState(ctx context.Context, req GetUserOnlineStateRequest) grpcbase.Response {
	if GetUserOnlineStateHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserOnlineState", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserOnlineStateHandler(ctx, req.(GetUserOnlineStateRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchSetUserSettings(ctx context.Context, req BatchSetUserSettingsRequest) grpcbase.Response {
	if BatchSetUserSettingsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchSetUserSettings", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchSetUserSettingsHandler(ctx, req.(BatchSetUserSettingsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetUserAccount(ctx context.Context, req BatchGetUserAccountRequest) grpcbase.Response {
	if BatchGetUserAccountHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchGetUserAccount", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetUserAccountHandler(ctx, req.(BatchGetUserAccountRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserListPage(ctx context.Context, req GetUserListPageRequest) grpcbase.Response {
	if GetUserListPageHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserListPage", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserListPageHandler(ctx, req.(GetUserListPageRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UserOffline(ctx context.Context, req UserOfflineRequest) grpcbase.Response {
	if UserOfflineHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/UserOffline", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UserOfflineHandler(ctx, req.(UserOfflineRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUsersOnlineClient(ctx context.Context, req GetUsersOnlineClientRequest) grpcbase.Response {
	if GetUsersOnlineClientHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUsersOnlineClient", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUsersOnlineClientHandler(ctx, req.(GetUsersOnlineClientRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUsersWechatFilterCondition(ctx context.Context, req GetUsersWechatFilterConditionRequest) grpcbase.Response {
	if GetUsersWechatFilterConditionHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUsersWechatFilterCondition", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUsersWechatFilterConditionHandler(ctx, req.(GetUsersWechatFilterConditionRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CheckUserOperateAuth(ctx context.Context, req CheckUserOperateAuthRequest) grpcbase.Response {
	if CheckUserOperateAuthHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/CheckUserOperateAuth", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CheckUserOperateAuthHandler(ctx, req.(CheckUserOperateAuthRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateComboBind(ctx context.Context, req CreateComboBindRequest) grpcbase.Response {
	if CreateComboBindHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/CreateComboBind", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateComboBindHandler(ctx, req.(CreateComboBindRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CheckUserIsMember(ctx context.Context, req CheckUserIsMemberRequest) grpcbase.Response {
	if CheckUserIsMemberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/CheckUserIsMember", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CheckUserIsMemberHandler(ctx, req.(CheckUserIsMemberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskEquity(ctx context.Context, req GetTaskEquityRequest) grpcbase.Response {
	if GetTaskEquityHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetTaskEquity", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskEquityHandler(ctx, req.(GetTaskEquityRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetEquityByMember(ctx context.Context, req GetEquityByMemberRequest) grpcbase.Response {
	if GetEquityByMemberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetEquityByMember", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetEquityByMemberHandler(ctx, req.(GetEquityByMemberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserNickName(ctx context.Context, req GetUserNickNameRequest) grpcbase.Response {
	if GetUserNickNameHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetUserNickName", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserNickNameHandler(ctx, req.(GetUserNickNameRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetCorpUserLoginToken(ctx context.Context, req GetCorpUserLoginTokenRequest) grpcbase.Response {
	if GetCorpUserLoginTokenHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/GetCorpUserLoginToken", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetCorpUserLoginTokenHandler(ctx, req.(GetCorpUserLoginTokenRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateUserInfo(ctx context.Context, req UpdateUserInfoRequest) grpcbase.Response {
	if UpdateUserInfoHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/UpdateUserInfo", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateUserInfoHandler(ctx, req.(UpdateUserInfoRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryIsOpenRemind(ctx context.Context, req BatchQueryIsOpenRemindRequest) grpcbase.Response {
	if BatchQueryIsOpenRemindHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchQueryIsOpenRemind", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryIsOpenRemindHandler(ctx, req.(BatchQueryIsOpenRemindRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryUserMember(ctx context.Context, req BatchQueryUserMemberRequest) grpcbase.Response {
	if BatchQueryUserMemberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchQueryUserMember", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryUserMemberHandler(ctx, req.(BatchQueryUserMemberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) AddMemberByGoods(ctx context.Context, req AddMemberByGoodsRequest) grpcbase.Response {
	if AddMemberByGoodsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/AddMemberByGoods", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return AddMemberByGoodsHandler(ctx, req.(AddMemberByGoodsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryUserInteraction(ctx context.Context, req BatchQueryUserInteractionRequest) grpcbase.Response {
	if BatchQueryUserInteractionHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchQueryUserInteraction", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryUserInteractionHandler(ctx, req.(BatchQueryUserInteractionRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetUserSettingByKey(ctx context.Context, req BatchGetUserSettingByKeyRequest) grpcbase.Response {
	if BatchGetUserSettingByKeyHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchGetUserSettingByKey", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetUserSettingByKeyHandler(ctx, req.(BatchGetUserSettingByKeyRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetUserInfoByTelephone(ctx context.Context, req BatchGetUserInfoByTelephoneRequest) grpcbase.Response {
	if BatchGetUserInfoByTelephoneHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchGetUserInfoByTelephone", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetUserInfoByTelephoneHandler(ctx, req.(BatchGetUserInfoByTelephoneRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryMemberByPlaceOrder(ctx context.Context, req BatchQueryMemberByPlaceOrderRequest) grpcbase.Response {
	if BatchQueryMemberByPlaceOrderHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.usercenter/BatchQueryMemberByPlaceOrder", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryMemberByPlaceOrderHandler(ctx, req.(BatchQueryMemberByPlaceOrderRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
