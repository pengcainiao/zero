// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package usercenter

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	helloRpcBalance                grpctransport.Handler
	batchGetUserSettings           grpctransport.Handler
	batchQueryUsers                grpctransport.Handler
	tryGrantAccessToken            grpctransport.Handler
	getUserSettings                grpctransport.Handler
	createUserByOfficialAccount    grpctransport.Handler
	updateUser                     grpctransport.Handler
	whoShouldSendScheduleRemindSMS grpctransport.Handler
	recentlyLoginAppOrDesktop      grpctransport.Handler
	getUserDeviceID                grpctransport.Handler
	setUserLoginState              grpctransport.Handler
	getUserPhoneNumber             grpctransport.Handler
	getUserOnlineState             grpctransport.Handler
	batchSetUserSettings           grpctransport.Handler
	batchGetUserAccount            grpctransport.Handler
	getUserListPage                grpctransport.Handler
	userOffline                    grpctransport.Handler
	getUsersOnlineClient           grpctransport.Handler
	getUsersWechatFilterCondition  grpctransport.Handler
	checkUserOperateAuth           grpctransport.Handler
	createComboBind                grpctransport.Handler
	checkUserIsMember              grpctransport.Handler
	getTaskEquity                  grpctransport.Handler
	getEquityByMember              grpctransport.Handler
	getUserNickName                grpctransport.Handler
	getCorpUserLoginToken          grpctransport.Handler
	updateUserInfo                 grpctransport.Handler
	batchQueryIsOpenRemind         grpctransport.Handler
	batchQueryUserMember           grpctransport.Handler
	addMemberByGoods               grpctransport.Handler
	batchQueryUserInteraction      grpctransport.Handler
	batchGetUserSettingByKey       grpctransport.Handler
	batchGetUserInfoByTelephone    grpctransport.Handler
	batchQueryMemberByPlaceOrder   grpctransport.Handler
}

func (b *serverBinding) HelloRpcBalance(ctx context.Context, req *pb.HelloRpcBalanceRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：HelloRpcBalance receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.helloRpcBalance.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetUserSettings(ctx context.Context, req *pb.BatchGetUserSettingsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserSettings receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetUserSettings.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryUsers(ctx context.Context, req *pb.BatchQueryUsersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUsers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryUsers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) TryGrantAccessToken(ctx context.Context, req *pb.TryGrantAccessTokenRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TryGrantAccessToken receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.tryGrantAccessToken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserSettings(ctx context.Context, req *pb.GetUserSettingsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserSettings receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserSettings.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateUserByOfficialAccount(ctx context.Context, req *pb.CreateUserByOfficialAccountRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateUserByOfficialAccount receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createUserByOfficialAccount.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateUser(ctx context.Context, req *pb.UpdateUserRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUser receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateUser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) WhoShouldSendScheduleRemindSMS(ctx context.Context, req *pb.WhoShouldSendScheduleRemindSMSRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：WhoShouldSendScheduleRemindSMS receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.whoShouldSendScheduleRemindSMS.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) RecentlyLoginAppOrDesktop(ctx context.Context, req *pb.RecentlyLoginAppOrDesktopRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecentlyLoginAppOrDesktop receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.recentlyLoginAppOrDesktop.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserDeviceID(ctx context.Context, req *pb.GetUserDeviceIDRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserDeviceID receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserDeviceID.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) SetUserLoginState(ctx context.Context, req *pb.SetUserLoginStateRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SetUserLoginState receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.setUserLoginState.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserPhoneNumber(ctx context.Context, req *pb.GetUserPhoneNumberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserPhoneNumber receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserPhoneNumber.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserOnlineState(ctx context.Context, req *pb.GetUserOnlineStateRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserOnlineState receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserOnlineState.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchSetUserSettings(ctx context.Context, req *pb.BatchSetUserSettingsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchSetUserSettings receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchSetUserSettings.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetUserAccount(ctx context.Context, req *pb.BatchGetUserAccountRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserAccount receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetUserAccount.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserListPage(ctx context.Context, req *pb.GetUserListPageRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserListPage receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserListPage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UserOffline(ctx context.Context, req *pb.UserOfflineRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UserOffline receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.userOffline.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUsersOnlineClient(ctx context.Context, req *pb.GetUsersOnlineClientRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUsersOnlineClient receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUsersOnlineClient.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUsersWechatFilterCondition(ctx context.Context, req *pb.GetUsersWechatFilterConditionRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUsersWechatFilterCondition receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUsersWechatFilterCondition.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CheckUserOperateAuth(ctx context.Context, req *pb.CheckUserOperateAuthRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CheckUserOperateAuth receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.checkUserOperateAuth.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateComboBind(ctx context.Context, req *pb.CreateComboBindRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateComboBind receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createComboBind.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CheckUserIsMember(ctx context.Context, req *pb.CheckUserIsMemberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CheckUserIsMember receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.checkUserIsMember.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskEquity(ctx context.Context, req *pb.GetTaskEquityRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskEquity receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskEquity.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetEquityByMember(ctx context.Context, req *pb.GetEquityByMemberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetEquityByMember receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getEquityByMember.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserNickName(ctx context.Context, req *pb.GetUserNickNameRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserNickName receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserNickName.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetCorpUserLoginToken(ctx context.Context, req *pb.GetCorpUserLoginTokenRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetCorpUserLoginToken receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getCorpUserLoginToken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateUserInfo(ctx context.Context, req *pb.UpdateUserInfoRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUserInfo receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateUserInfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryIsOpenRemind(ctx context.Context, req *pb.BatchQueryIsOpenRemindRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryIsOpenRemind receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryIsOpenRemind.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryUserMember(ctx context.Context, req *pb.BatchQueryUserMemberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUserMember receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryUserMember.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) AddMemberByGoods(ctx context.Context, req *pb.AddMemberByGoodsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：AddMemberByGoods receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.addMemberByGoods.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryUserInteraction(ctx context.Context, req *pb.BatchQueryUserInteractionRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUserInteraction receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryUserInteraction.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetUserSettingByKey(ctx context.Context, req *pb.BatchGetUserSettingByKeyRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserSettingByKey receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetUserSettingByKey.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetUserInfoByTelephone(ctx context.Context, req *pb.BatchGetUserInfoByTelephoneRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserInfoByTelephone receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetUserInfoByTelephone.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryMemberByPlaceOrder(ctx context.Context, req *pb.BatchQueryMemberByPlaceOrderRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryMemberByPlaceOrder receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryMemberByPlaceOrder.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterUserCenterServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"helloRpcBalance":                b.helloRpcBalance,
		"batchGetUserSettings":           b.batchGetUserSettings,
		"batchQueryUsers":                b.batchQueryUsers,
		"tryGrantAccessToken":            b.tryGrantAccessToken,
		"getUserSettings":                b.getUserSettings,
		"createUserByOfficialAccount":    b.createUserByOfficialAccount,
		"updateUser":                     b.updateUser,
		"whoShouldSendScheduleRemindSMS": b.whoShouldSendScheduleRemindSMS,
		"recentlyLoginAppOrDesktop":      b.recentlyLoginAppOrDesktop,
		"getUserDeviceID":                b.getUserDeviceID,
		"setUserLoginState":              b.setUserLoginState,
		"getUserPhoneNumber":             b.getUserPhoneNumber,
		"getUserOnlineState":             b.getUserOnlineState,
		"batchSetUserSettings":           b.batchSetUserSettings,
		"batchGetUserAccount":            b.batchGetUserAccount,
		"getUserListPage":                b.getUserListPage,
		"userOffline":                    b.userOffline,
		"getUsersOnlineClient":           b.getUsersOnlineClient,
		"getUsersWechatFilterCondition":  b.getUsersWechatFilterCondition,
		"checkUserOperateAuth":           b.checkUserOperateAuth,
		"createComboBind":                b.createComboBind,
		"checkUserIsMember":              b.checkUserIsMember,
		"getTaskEquity":                  b.getTaskEquity,
		"getEquityByMember":              b.getEquityByMember,
		"getUserNickName":                b.getUserNickName,
		"getCorpUserLoginToken":          b.getCorpUserLoginToken,
		"updateUserInfo":                 b.updateUserInfo,
		"batchQueryIsOpenRemind":         b.batchQueryIsOpenRemind,
		"batchQueryUserMember":           b.batchQueryUserMember,
		"addMemberByGoods":               b.addMemberByGoods,
		"batchQueryUserInteraction":      b.batchQueryUserInteraction,
		"batchGetUserSettingByKey":       b.batchGetUserSettingByKey,
		"batchGetUserInfoByTelephone":    b.batchGetUserInfoByTelephone,
		"batchQueryMemberByPlaceOrder":   b.batchQueryMemberByPlaceOrder,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		helloRpcBalance: grpcbase.CreateGRPCServer(
			makeHelloRpcBalanceEndpoint(svc),
			decodeHelloRpcBalanceRequest,
			encodeHelloRpcBalanceResponse,
		),
		batchGetUserSettings: grpcbase.CreateGRPCServer(
			makeBatchGetUserSettingsEndpoint(svc),
			decodeBatchGetUserSettingsRequest,
			encodeBatchGetUserSettingsResponse,
		),
		batchQueryUsers: grpcbase.CreateGRPCServer(
			makeBatchQueryUsersEndpoint(svc),
			decodeBatchQueryUsersRequest,
			encodeBatchQueryUsersResponse,
		),
		tryGrantAccessToken: grpcbase.CreateGRPCServer(
			makeTryGrantAccessTokenEndpoint(svc),
			decodeTryGrantAccessTokenRequest,
			encodeTryGrantAccessTokenResponse,
		),
		getUserSettings: grpcbase.CreateGRPCServer(
			makeGetUserSettingsEndpoint(svc),
			decodeGetUserSettingsRequest,
			encodeGetUserSettingsResponse,
		),
		createUserByOfficialAccount: grpcbase.CreateGRPCServer(
			makeCreateUserByOfficialAccountEndpoint(svc),
			decodeCreateUserByOfficialAccountRequest,
			encodeCreateUserByOfficialAccountResponse,
		),
		updateUser: grpcbase.CreateGRPCServer(
			makeUpdateUserEndpoint(svc),
			decodeUpdateUserRequest,
			encodeUpdateUserResponse,
		),
		whoShouldSendScheduleRemindSMS: grpcbase.CreateGRPCServer(
			makeWhoShouldSendScheduleRemindSMSEndpoint(svc),
			decodeWhoShouldSendScheduleRemindSMSRequest,
			encodeWhoShouldSendScheduleRemindSMSResponse,
		),
		recentlyLoginAppOrDesktop: grpcbase.CreateGRPCServer(
			makeRecentlyLoginAppOrDesktopEndpoint(svc),
			decodeRecentlyLoginAppOrDesktopRequest,
			encodeRecentlyLoginAppOrDesktopResponse,
		),
		getUserDeviceID: grpcbase.CreateGRPCServer(
			makeGetUserDeviceIDEndpoint(svc),
			decodeGetUserDeviceIDRequest,
			encodeGetUserDeviceIDResponse,
		),
		setUserLoginState: grpcbase.CreateGRPCServer(
			makeSetUserLoginStateEndpoint(svc),
			decodeSetUserLoginStateRequest,
			encodeSetUserLoginStateResponse,
		),
		getUserPhoneNumber: grpcbase.CreateGRPCServer(
			makeGetUserPhoneNumberEndpoint(svc),
			decodeGetUserPhoneNumberRequest,
			encodeGetUserPhoneNumberResponse,
		),
		getUserOnlineState: grpcbase.CreateGRPCServer(
			makeGetUserOnlineStateEndpoint(svc),
			decodeGetUserOnlineStateRequest,
			encodeGetUserOnlineStateResponse,
		),
		batchSetUserSettings: grpcbase.CreateGRPCServer(
			makeBatchSetUserSettingsEndpoint(svc),
			decodeBatchSetUserSettingsRequest,
			encodeBatchSetUserSettingsResponse,
		),
		batchGetUserAccount: grpcbase.CreateGRPCServer(
			makeBatchGetUserAccountEndpoint(svc),
			decodeBatchGetUserAccountRequest,
			encodeBatchGetUserAccountResponse,
		),
		getUserListPage: grpcbase.CreateGRPCServer(
			makeGetUserListPageEndpoint(svc),
			decodeGetUserListPageRequest,
			encodeGetUserListPageResponse,
		),
		userOffline: grpcbase.CreateGRPCServer(
			makeUserOfflineEndpoint(svc),
			decodeUserOfflineRequest,
			encodeUserOfflineResponse,
		),
		getUsersOnlineClient: grpcbase.CreateGRPCServer(
			makeGetUsersOnlineClientEndpoint(svc),
			decodeGetUsersOnlineClientRequest,
			encodeGetUsersOnlineClientResponse,
		),
		getUsersWechatFilterCondition: grpcbase.CreateGRPCServer(
			makeGetUsersWechatFilterConditionEndpoint(svc),
			decodeGetUsersWechatFilterConditionRequest,
			encodeGetUsersWechatFilterConditionResponse,
		),
		checkUserOperateAuth: grpcbase.CreateGRPCServer(
			makeCheckUserOperateAuthEndpoint(svc),
			decodeCheckUserOperateAuthRequest,
			encodeCheckUserOperateAuthResponse,
		),
		createComboBind: grpcbase.CreateGRPCServer(
			makeCreateComboBindEndpoint(svc),
			decodeCreateComboBindRequest,
			encodeCreateComboBindResponse,
		),
		checkUserIsMember: grpcbase.CreateGRPCServer(
			makeCheckUserIsMemberEndpoint(svc),
			decodeCheckUserIsMemberRequest,
			encodeCheckUserIsMemberResponse,
		),
		getTaskEquity: grpcbase.CreateGRPCServer(
			makeGetTaskEquityEndpoint(svc),
			decodeGetTaskEquityRequest,
			encodeGetTaskEquityResponse,
		),
		getEquityByMember: grpcbase.CreateGRPCServer(
			makeGetEquityByMemberEndpoint(svc),
			decodeGetEquityByMemberRequest,
			encodeGetEquityByMemberResponse,
		),
		getUserNickName: grpcbase.CreateGRPCServer(
			makeGetUserNickNameEndpoint(svc),
			decodeGetUserNickNameRequest,
			encodeGetUserNickNameResponse,
		),
		getCorpUserLoginToken: grpcbase.CreateGRPCServer(
			makeGetCorpUserLoginTokenEndpoint(svc),
			decodeGetCorpUserLoginTokenRequest,
			encodeGetCorpUserLoginTokenResponse,
		),
		updateUserInfo: grpcbase.CreateGRPCServer(
			makeUpdateUserInfoEndpoint(svc),
			decodeUpdateUserInfoRequest,
			encodeUpdateUserInfoResponse,
		),
		batchQueryIsOpenRemind: grpcbase.CreateGRPCServer(
			makeBatchQueryIsOpenRemindEndpoint(svc),
			decodeBatchQueryIsOpenRemindRequest,
			encodeBatchQueryIsOpenRemindResponse,
		),
		batchQueryUserMember: grpcbase.CreateGRPCServer(
			makeBatchQueryUserMemberEndpoint(svc),
			decodeBatchQueryUserMemberRequest,
			encodeBatchQueryUserMemberResponse,
		),
		addMemberByGoods: grpcbase.CreateGRPCServer(
			makeAddMemberByGoodsEndpoint(svc),
			decodeAddMemberByGoodsRequest,
			encodeAddMemberByGoodsResponse,
		),
		batchQueryUserInteraction: grpcbase.CreateGRPCServer(
			makeBatchQueryUserInteractionEndpoint(svc),
			decodeBatchQueryUserInteractionRequest,
			encodeBatchQueryUserInteractionResponse,
		),
		batchGetUserSettingByKey: grpcbase.CreateGRPCServer(
			makeBatchGetUserSettingByKeyEndpoint(svc),
			decodeBatchGetUserSettingByKeyRequest,
			encodeBatchGetUserSettingByKeyResponse,
		),
		batchGetUserInfoByTelephone: grpcbase.CreateGRPCServer(
			makeBatchGetUserInfoByTelephoneEndpoint(svc),
			decodeBatchGetUserInfoByTelephoneRequest,
			encodeBatchGetUserInfoByTelephoneResponse,
		),
		batchQueryMemberByPlaceOrder: grpcbase.CreateGRPCServer(
			makeBatchQueryMemberByPlaceOrderEndpoint(svc),
			decodeBatchQueryMemberByPlaceOrderRequest,
			encodeBatchQueryMemberByPlaceOrderResponse,
		),
	}
}
