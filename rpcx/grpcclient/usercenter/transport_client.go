// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package usercenter

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeHelloRpcBalanceRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(HelloRpcBalanceRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.HelloRpcBalanceRequest{
		Context: xcontext,
	}, nil
}

func decodeHelloRpcBalanceResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeBatchGetUserSettingsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetUserSettingsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetUserSettingsRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeBatchGetUserSettingsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetUserSettingsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var responseArray = make([]*GetUserSettingsResponse, 0)
	for _, v := range pbresp.Response {
		responseArray = append(responseArray, &GetUserSettingsResponse{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Data: v.Data,
		})
	}

	return grpcbase.Response{
		Data: BatchGetUserSettingsResponse{
			Response: responseArray,
		},
	}, nil
}
func encodeBatchQueryUsersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryUsersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryUsersRequest{
		UserID:   r.UserID,
		LoginUid: r.LoginUid,
		Context:  xcontext,
	}, nil
}

func decodeBatchQueryUsersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryUsersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var responseArray = make([]*SimpleUserInfo, 0)
	for _, v := range pbresp.Response {
		responseArray = append(responseArray, &SimpleUserInfo{
			//判断字段是否为复杂类型
			Avatar: v.Avatar,
			//判断字段是否为复杂类型
			NickName: v.NickName,
			//判断字段是否为复杂类型
			Sex: v.Sex,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			OriginalName: v.OriginalName,
			//判断字段是否为复杂类型
			Pinyin: v.Pinyin,
			//判断字段是否为复杂类型
			Telephone: v.Telephone,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UserType: v.UserType,
			//判断字段是否为复杂类型

			Member: &Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}

	return grpcbase.Response{
		Data: BatchQueryUsersResponse{
			Response: responseArray,
		},
	}, nil
}
func encodeTryGrantAccessTokenRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(TryGrantAccessTokenRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.TryGrantAccessTokenRequest{
		UnionID: r.UnionID,
		Context: xcontext,
	}, nil
}

func decodeTryGrantAccessTokenResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.TryGrantAccessTokenResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: TryGrantAccessTokenResponse{
			Token:  pbresp.Token,
			UserID: pbresp.UserID,
		},
	}, nil
}
func encodeGetUserSettingsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserSettingsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserSettingsRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUserSettingsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserSettingsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUserSettingsResponse{
			Data:   pbresp.Data,
			UserID: pbresp.UserID,
		},
	}, nil
}
func encodeCreateUserByOfficialAccountRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateUserByOfficialAccountRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateUserByOfficialAccountRequest{
		NickName:       r.NickName,
		OpenID:         r.OpenID,
		Sex:            r.Sex,
		City:           r.City,
		Province:       r.Province,
		Avatar:         r.Avatar,
		UnionID:        r.UnionID,
		SubscribeScene: r.SubscribeScene,
		Wxid:           r.Wxid,
		Country:        r.Country,
		ChannelSource:  r.ChannelSource,
		Context:        xcontext,
	}, nil
}

func decodeCreateUserByOfficialAccountResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CreateUserByOfficialAccountResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CreateUserByOfficialAccountResponse{
			UserID: pbresp.UserID,
		},
	}, nil
}
func encodeUpdateUserRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateUserRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateUserRequest{
		UnionID:        r.UnionID,
		Subscribed:     r.Subscribed,
		OfficialOpenID: r.OfficialOpenID,
		UserID:         r.UserID,
		WXID:           r.WXID,
		Context:        xcontext,
	}, nil
}

func decodeUpdateUserResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeWhoShouldSendScheduleRemindSMSRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(WhoShouldSendScheduleRemindSMSRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.WhoShouldSendScheduleRemindSMSRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeWhoShouldSendScheduleRemindSMSResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.WhoShouldSendScheduleRemindSMSResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: WhoShouldSendScheduleRemindSMSResponse{
			CanSend:     pbresp.CanSend,
			PhoneNumber: pbresp.PhoneNumber,
		},
	}, nil
}
func encodeRecentlyLoginAppOrDesktopRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(RecentlyLoginAppOrDesktopRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.RecentlyLoginAppOrDesktopRequest{
		UserID:         r.UserID,
		DefineRecently: r.DefineRecently,
		Parameters:     r.Parameters,
		Context:        xcontext,
	}, nil
}

func decodeRecentlyLoginAppOrDesktopResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.RecentlyLoginAppOrDesktopResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: RecentlyLoginAppOrDesktopResponse{
			Extra:       pbresp.Extra,
			PhoneNumber: pbresp.PhoneNumber,
		},
	}, nil
}
func encodeGetUserDeviceIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserDeviceIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserDeviceIDRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUserDeviceIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserDeviceIDResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUserDeviceIDResponse{
			Data: pbresp.Data,
		},
	}, nil
}
func encodeSetUserLoginStateRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(SetUserLoginStateRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.SetUserLoginStateRequest{
		UserID:   r.UserID,
		DeviceID: r.DeviceID,
		Platform: r.Platform,
		Online:   r.Online,
		Context:  xcontext,
	}, nil
}

func decodeSetUserLoginStateResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetUserPhoneNumberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserPhoneNumberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserPhoneNumberRequest{
		UsersID: r.UsersID,
		Context: xcontext,
	}, nil
}

func decodeGetUserPhoneNumberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserPhoneNumberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var responseArray = make([]*SimpleUserInfo, 0)
	for _, v := range pbresp.Response {
		responseArray = append(responseArray, &SimpleUserInfo{
			//判断字段是否为复杂类型
			Avatar: v.Avatar,
			//判断字段是否为复杂类型
			NickName: v.NickName,
			//判断字段是否为复杂类型
			Sex: v.Sex,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			OriginalName: v.OriginalName,
			//判断字段是否为复杂类型
			Pinyin: v.Pinyin,
			//判断字段是否为复杂类型
			Telephone: v.Telephone,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UserType: v.UserType,
			//判断字段是否为复杂类型

			Member: &Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}

	return grpcbase.Response{
		Data: GetUserPhoneNumberResponse{
			Response: responseArray,
		},
	}, nil
}
func encodeGetUserOnlineStateRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserOnlineStateRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserOnlineStateRequest{
		UsersID: r.UsersID,
		Context: xcontext,
	}, nil
}

func decodeGetUserOnlineStateResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserOnlineStateResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUserOnlineStateResponse{
			Data: pbresp.Data,
		},
	}, nil
}
func encodeBatchSetUserSettingsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchSetUserSettingsRequest)
	//是复杂类型的数组
	var xsettings = make([]*pb.SetUserSettingsRequest, 0)

	for _, v := range r.Settings {
		xsettings = append(xsettings, &pb.SetUserSettingsRequest{
			UserID: v.UserID,
			Data:   v.Data,
		})
	}
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchSetUserSettingsRequest{
		Settings: xsettings,
		Context:  xcontext,
	}, nil
}

func decodeBatchSetUserSettingsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeBatchGetUserAccountRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetUserAccountRequest)
	//是复杂类型的数组
	var xuserAccountInfoRequests = make([]*pb.UserAccountInfoRequest, 0)

	for _, v := range r.UserAccountInfoRequests {
		xuserAccountInfoRequests = append(xuserAccountInfoRequests, &pb.UserAccountInfoRequest{
			UserID:          v.UserID,
			Account:         v.Account,
			AccountProvider: v.AccountProvider,
			OfficialOpenID:  v.OfficialOpenID,
			UnionID:         v.UnionID,
			GetSubscribed:   v.GetSubscribed,
		})
	}
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetUserAccountRequest{
		UserAccountInfoRequests: xuserAccountInfoRequests,
		Context:                 xcontext,
	}, nil
}

func decodeBatchGetUserAccountResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetUserAccountResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var useraccountinforesponsesArray = make([]*UserAccountInfoResponse, 0)
	for _, v := range pbresp.UserAccountInfoResponses {
		useraccountinforesponsesArray = append(useraccountinforesponsesArray, &UserAccountInfoResponse{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Account: v.Account,
			//判断字段是否为复杂类型
			AccountProvider: v.AccountProvider,
			//判断字段是否为复杂类型
			OfficialOpenID: v.OfficialOpenID,
			//判断字段是否为复杂类型
			UnionID: v.UnionID,
			//判断字段是否为复杂类型
			Subscribed: v.Subscribed,
		})
	}

	return grpcbase.Response{
		Data: BatchGetUserAccountResponse{
			UserAccountInfoResponses: useraccountinforesponsesArray,
		},
	}, nil
}
func encodeGetUserListPageRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserListPageRequest)
	var xpaging *pb.Paging
	if r.Paging != nil {
		xpaging = &pb.Paging{
			PageNumber: r.Paging.PageNumber,
			PageRecord: r.Paging.PageRecord,
		}
	}
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserListPageRequest{
		UserID:    r.UserID,
		NickName:  r.NickName,
		Telephone: r.Telephone,
		Paging:    xpaging,
		Context:   xcontext,
	}, nil
}

func decodeGetUserListPageResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserListPageResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var usersArray = make([]*UserInfo, 0)
	for _, v := range pbresp.Users {
		usersArray = append(usersArray, &UserInfo{
			//判断字段是否为复杂类型
			Avatar: v.Avatar,
			//判断字段是否为复杂类型
			NickName: v.NickName,
			//判断字段是否为复杂类型
			Sex: v.Sex,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Telephone: v.Telephone,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			VipLevel: v.VipLevel,
			//判断字段是否为复杂类型
			Status: v.Status,
			//判断字段是否为复杂类型
			IsPreProd: v.IsPreProd,
			//判断字段是否为复杂类型
			Blacklist: v.Blacklist,
			//判断字段是否为复杂类型
			Referrer: v.Referrer,
			//判断字段是否为复杂类型
			UserType: v.UserType,
			//判断字段是否为复杂类型
			Pinyin: v.Pinyin,
			//判断字段是否为复杂类型
			OriginalName: v.OriginalName,
		})
	}

	return grpcbase.Response{
		Data: GetUserListPageResponse{
			Total: pbresp.Total,
			Users: usersArray,
		},
	}, nil
}
func encodeUserOfflineRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UserOfflineRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UserOfflineRequest{
		UserID:   r.UserID,
		Platform: r.Platform,
		Context:  xcontext,
	}, nil
}

func decodeUserOfflineResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetUsersOnlineClientRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUsersOnlineClientRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUsersOnlineClientRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUsersOnlineClientResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUsersOnlineClientResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var responseArray = make([]*GetUserSettingsResponse, 0)
	for _, v := range pbresp.Response {
		responseArray = append(responseArray, &GetUserSettingsResponse{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Data: v.Data,
		})
	}

	return grpcbase.Response{
		Data: GetUsersOnlineClientResponse{
			Response: responseArray,
		},
	}, nil
}
func encodeGetUsersWechatFilterConditionRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUsersWechatFilterConditionRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUsersWechatFilterConditionRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUsersWechatFilterConditionResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUsersWechatFilterConditionResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUsersWechatFilterConditionResponse{
			Data: pbresp.Data,
		},
	}, nil
}
func encodeCheckUserOperateAuthRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CheckUserOperateAuthRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CheckUserOperateAuthRequest{
		Resource:    r.Resource,
		OperateType: r.OperateType,
		Context:     xcontext,
	}, nil
}

func decodeCheckUserOperateAuthResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CheckUserOperateAuthResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CheckUserOperateAuthResponse{
			IsAuth: pbresp.IsAuth,
		},
	}, nil
}
func encodeCreateComboBindRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateComboBindRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateComboBindRequest{
		ObjID:        r.ObjID,
		ObjType:      r.ObjType,
		ComboType:    r.ComboType,
		ComboVersion: r.ComboVersion,
		Context:      xcontext,
	}, nil
}

func decodeCreateComboBindResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CreateComboBindResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CreateComboBindResponse{
			BindID:  pbresp.BindID,
			ComboID: pbresp.ComboID,
		},
	}, nil
}
func encodeCheckUserIsMemberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CheckUserIsMemberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CheckUserIsMemberRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeCheckUserIsMemberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CheckUserIsMemberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CheckUserIsMemberResponse{
			IsMember: pbresp.IsMember,
		},
	}, nil
}
func encodeGetTaskEquityRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskEquityRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskEquityRequest{
		ComboType:    r.ComboType,
		ComboVersion: r.ComboVersion,
		Context:      xcontext,
	}, nil
}

func decodeGetTaskEquityResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskEquityResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetTaskEquityResponse{
			ChildTasksNum:    pbresp.ChildTasksNum,
			CustomRemindTime: pbresp.CustomRemindTime,
			TaskTakersNum:    pbresp.TaskTakersNum,
		},
	}, nil
}
func encodeGetEquityByMemberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetEquityByMemberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetEquityByMemberRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetEquityByMemberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetEquityByMemberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetEquityByMemberResponse{
			BatchExport:          pbresp.BatchExport,
			CreateContextDiagram: pbresp.CreateContextDiagram,
			CustomViewNum:        pbresp.CustomViewNum,
			MonthView:            pbresp.MonthView,
			SelfProjectNum:       pbresp.SelfProjectNum,
			TagTasksNum:          pbresp.TagTasksNum,
		},
	}, nil
}
func encodeGetUserNickNameRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserNickNameRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserNickNameRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUserNickNameResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserNickNameResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUserNickNameResponse{
			NickName: pbresp.NickName,
		},
	}, nil
}
func encodeGetCorpUserLoginTokenRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetCorpUserLoginTokenRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetCorpUserLoginTokenRequest{
		Account:    r.Account,
		CorpID:     r.CorpID,
		CorpUserID: r.CorpUserID,
		NickName:   r.NickName,
		Avatar:     r.Avatar,
		Context:    xcontext,
	}, nil
}

func decodeGetCorpUserLoginTokenResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetCorpUserLoginTokenResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	var infoStruct = &UserInfo{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Avatar: pbresp.Info.Avatar,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		NickName: pbresp.Info.NickName,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Sex: pbresp.Info.Sex,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		UserID: pbresp.Info.UserID,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Telephone: pbresp.Info.Telephone,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		CreateAt: pbresp.Info.CreateAt,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		VipLevel: pbresp.Info.VipLevel,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Status: pbresp.Info.Status,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		IsPreProd: pbresp.Info.IsPreProd,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Blacklist: pbresp.Info.Blacklist,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Referrer: pbresp.Info.Referrer,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		UserType: pbresp.Info.UserType,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Pinyin: pbresp.Info.Pinyin,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		OriginalName: pbresp.Info.OriginalName,
	}

	return grpcbase.Response{
		Data: GetCorpUserLoginTokenResponse{
			Avatar:   pbresp.Avatar,
			Info:     infoStruct,
			NickName: pbresp.NickName,
			Phone:    pbresp.Phone,
			Token:    pbresp.Token,
			UserID:   pbresp.UserID,
		},
	}, nil
}
func encodeUpdateUserInfoRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateUserInfoRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateUserInfoRequest{
		NickName:       r.NickName,
		Avatar:         r.Avatar,
		Telephone:      r.Telephone,
		Sex:            r.Sex,
		Status:         r.Status,
		UserID:         r.UserID,
		IsRefreshToken: r.IsRefreshToken,
		Context:        xcontext,
	}, nil
}

func decodeUpdateUserInfoResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.UpdateUserInfoResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: UpdateUserInfoResponse{
			Code:  pbresp.Code,
			Token: pbresp.Token,
		},
	}, nil
}
func encodeBatchQueryIsOpenRemindRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryIsOpenRemindRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryIsOpenRemindRequest{
		UserIDs: r.UserIDs,
		Context: xcontext,
	}, nil
}

func decodeBatchQueryIsOpenRemindResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryIsOpenRemindResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: BatchQueryIsOpenRemindResponse{
			RemindMap: pbresp.RemindMap,
		},
	}, nil
}
func encodeBatchQueryUserMemberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryUserMemberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryUserMemberRequest{
		UserIDs: r.UserIDs,
		Context: xcontext,
	}, nil
}

func decodeBatchQueryUserMemberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryUserMemberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var membersArray = make([]*Member, 0)
	for _, v := range pbresp.Members {
		membersArray = append(membersArray, &Member{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			EndTime: v.EndTime,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			NextEndTime: v.NextEndTime,
			//判断字段是否为复杂类型
			CorpID: v.CorpID,
			//判断字段是否为复杂类型
			CorpName: v.CorpName,
			//判断字段是否为复杂类型
			CuStatus: v.CuStatus,
			//判断字段是否为复杂类型
			IsVisible: v.IsVisible,
		})
	}

	return grpcbase.Response{
		Data: BatchQueryUserMemberResponse{
			Members:   membersArray,
			UserState: pbresp.UserState,
		},
	}, nil
}
func encodeAddMemberByGoodsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(AddMemberByGoodsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.AddMemberByGoodsRequest{
		UserIDs:     r.UserIDs,
		GoodsID:     r.GoodsID,
		Context:     xcontext,
		OrderID:     r.OrderID,
		CreatorID:   r.CreatorID,
		SendVipType: r.SendVipType,
		DayNum:      r.DayNum,
	}, nil
}

func decodeAddMemberByGoodsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.AddMemberByGoodsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: AddMemberByGoodsResponse{
			FailUserID: pbresp.FailUserID,
		},
	}, nil
}
func encodeBatchQueryUserInteractionRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryUserInteractionRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryUserInteractionRequest{
		UserIDs:    r.UserIDs,
		IsInteract: r.IsInteract,
		Context:    xcontext,
	}, nil
}

func decodeBatchQueryUserInteractionResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryUserInteractionResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var interactsArray = make([]*UserInteracts, 0)
	for _, v := range pbresp.Interacts {
		interactsArray = append(interactsArray, &UserInteracts{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Remark: v.Remark,
			//判断字段是否为复杂类型
			Pinyin: v.Pinyin,
			//判断字段是否为复杂类型
			InteractID: v.InteractID,
		})
	}

	return grpcbase.Response{
		Data: BatchQueryUserInteractionResponse{
			Interacts: interactsArray,
		},
	}, nil
}
func encodeBatchGetUserSettingByKeyRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetUserSettingByKeyRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetUserSettingByKeyRequest{
		UserID:     r.UserID,
		SettingKey: r.SettingKey,
		Context:    xcontext,
	}, nil
}

func decodeBatchGetUserSettingByKeyResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetUserSettingByKeyResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: BatchGetUserSettingByKeyResponse{
			Values: pbresp.Values,
		},
	}, nil
}
func encodeBatchGetUserInfoByTelephoneRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetUserInfoByTelephoneRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetUserInfoByTelephoneRequest{
		Telephone: r.Telephone,
		Context:   xcontext,
	}, nil
}

func decodeBatchGetUserInfoByTelephoneResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetUserInfoByTelephoneResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var responseArray = make([]*SimpleUserInfo, 0)
	for _, v := range pbresp.Response {
		responseArray = append(responseArray, &SimpleUserInfo{
			//判断字段是否为复杂类型
			Avatar: v.Avatar,
			//判断字段是否为复杂类型
			NickName: v.NickName,
			//判断字段是否为复杂类型
			Sex: v.Sex,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			OriginalName: v.OriginalName,
			//判断字段是否为复杂类型
			Pinyin: v.Pinyin,
			//判断字段是否为复杂类型
			Telephone: v.Telephone,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UserType: v.UserType,
			//判断字段是否为复杂类型

			Member: &Member{
				UserID:      v.Member.UserID,
				EndTime:     v.Member.EndTime,
				State:       v.Member.State,
				NextEndTime: v.Member.NextEndTime,
				CorpID:      v.Member.CorpID,
				CorpName:    v.Member.CorpName,
				CuStatus:    v.Member.CuStatus,
				IsVisible:   v.Member.IsVisible,
			},
		})
	}

	return grpcbase.Response{
		Data: BatchGetUserInfoByTelephoneResponse{
			Response: responseArray,
		},
	}, nil
}
func encodeBatchQueryMemberByPlaceOrderRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryMemberByPlaceOrderRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryMemberByPlaceOrderRequest{
		UserID:  r.UserID,
		VipType: r.VipType,
		Context: xcontext,
	}, nil
}

func decodeBatchQueryMemberByPlaceOrderResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryMemberByPlaceOrderResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: BatchQueryMemberByPlaceOrderResponse{
			MemberEndTime: pbresp.MemberEndTime,
		},
	}, nil
}
