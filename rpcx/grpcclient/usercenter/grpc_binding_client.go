// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package usercenter

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.UserCenterSVC), &clientBinding{})
}

type clientBinding struct {
	helloRpcBalance                endpoint.Endpoint
	batchGetUserSettings           endpoint.Endpoint
	batchQueryUsers                endpoint.Endpoint
	tryGrantAccessToken            endpoint.Endpoint
	getUserSettings                endpoint.Endpoint
	createUserByOfficialAccount    endpoint.Endpoint
	updateUser                     endpoint.Endpoint
	whoShouldSendScheduleRemindSMS endpoint.Endpoint
	recentlyLoginAppOrDesktop      endpoint.Endpoint
	getUserDeviceID                endpoint.Endpoint
	setUserLoginState              endpoint.Endpoint
	getUserPhoneNumber             endpoint.Endpoint
	getUserOnlineState             endpoint.Endpoint
	batchSetUserSettings           endpoint.Endpoint
	batchGetUserAccount            endpoint.Endpoint
	getUserListPage                endpoint.Endpoint
	userOffline                    endpoint.Endpoint
	getUsersOnlineClient           endpoint.Endpoint
	getUsersWechatFilterCondition  endpoint.Endpoint
	checkUserOperateAuth           endpoint.Endpoint
	createComboBind                endpoint.Endpoint
	checkUserIsMember              endpoint.Endpoint
	getTaskEquity                  endpoint.Endpoint
	getEquityByMember              endpoint.Endpoint
	getUserNickName                endpoint.Endpoint
	getCorpUserLoginToken          endpoint.Endpoint
	updateUserInfo                 endpoint.Endpoint
	batchQueryIsOpenRemind         endpoint.Endpoint
	batchQueryUserMember           endpoint.Endpoint
	addMemberByGoods               endpoint.Endpoint
	batchQueryUserInteraction      endpoint.Endpoint
	batchGetUserSettingByKey       endpoint.Endpoint
	batchGetUserInfoByTelephone    endpoint.Endpoint
	batchQueryMemberByPlaceOrder   endpoint.Endpoint
}

func (c *clientBinding) HelloRpcBalance(ctx context.Context, params HelloRpcBalanceRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：HelloRpcBalance request context is nil，trace span将无法生效")
	}
	response, err := c.helloRpcBalance(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetUserSettings(ctx context.Context, params BatchGetUserSettingsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserSettings request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetUserSettings(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryUsers(ctx context.Context, params BatchQueryUsersRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUsers request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryUsers(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) TryGrantAccessToken(ctx context.Context, params TryGrantAccessTokenRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TryGrantAccessToken request context is nil，trace span将无法生效")
	}
	response, err := c.tryGrantAccessToken(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserSettings(ctx context.Context, params GetUserSettingsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserSettings request context is nil，trace span将无法生效")
	}
	response, err := c.getUserSettings(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) CreateUserByOfficialAccount(ctx context.Context, params CreateUserByOfficialAccountRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateUserByOfficialAccount request context is nil，trace span将无法生效")
	}
	response, err := c.createUserByOfficialAccount(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) UpdateUser(ctx context.Context, params UpdateUserRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUser request context is nil，trace span将无法生效")
	}
	response, err := c.updateUser(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) WhoShouldSendScheduleRemindSMS(ctx context.Context, params WhoShouldSendScheduleRemindSMSRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：WhoShouldSendScheduleRemindSMS request context is nil，trace span将无法生效")
	}
	response, err := c.whoShouldSendScheduleRemindSMS(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) RecentlyLoginAppOrDesktop(ctx context.Context, params RecentlyLoginAppOrDesktopRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecentlyLoginAppOrDesktop request context is nil，trace span将无法生效")
	}
	response, err := c.recentlyLoginAppOrDesktop(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserDeviceID(ctx context.Context, params GetUserDeviceIDRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserDeviceID request context is nil，trace span将无法生效")
	}
	response, err := c.getUserDeviceID(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) SetUserLoginState(ctx context.Context, params SetUserLoginStateRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SetUserLoginState request context is nil，trace span将无法生效")
	}
	response, err := c.setUserLoginState(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserPhoneNumber(ctx context.Context, params GetUserPhoneNumberRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserPhoneNumber request context is nil，trace span将无法生效")
	}
	response, err := c.getUserPhoneNumber(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserOnlineState(ctx context.Context, params GetUserOnlineStateRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserOnlineState request context is nil，trace span将无法生效")
	}
	response, err := c.getUserOnlineState(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchSetUserSettings(ctx context.Context, params BatchSetUserSettingsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchSetUserSettings request context is nil，trace span将无法生效")
	}
	response, err := c.batchSetUserSettings(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetUserAccount(ctx context.Context, params BatchGetUserAccountRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserAccount request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetUserAccount(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserListPage(ctx context.Context, params GetUserListPageRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserListPage request context is nil，trace span将无法生效")
	}
	response, err := c.getUserListPage(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) UserOffline(ctx context.Context, params UserOfflineRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UserOffline request context is nil，trace span将无法生效")
	}
	response, err := c.userOffline(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUsersOnlineClient(ctx context.Context, params GetUsersOnlineClientRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUsersOnlineClient request context is nil，trace span将无法生效")
	}
	response, err := c.getUsersOnlineClient(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUsersWechatFilterCondition(ctx context.Context, params GetUsersWechatFilterConditionRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUsersWechatFilterCondition request context is nil，trace span将无法生效")
	}
	response, err := c.getUsersWechatFilterCondition(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) CheckUserOperateAuth(ctx context.Context, params CheckUserOperateAuthRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CheckUserOperateAuth request context is nil，trace span将无法生效")
	}
	response, err := c.checkUserOperateAuth(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) CreateComboBind(ctx context.Context, params CreateComboBindRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateComboBind request context is nil，trace span将无法生效")
	}
	response, err := c.createComboBind(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) CheckUserIsMember(ctx context.Context, params CheckUserIsMemberRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CheckUserIsMember request context is nil，trace span将无法生效")
	}
	response, err := c.checkUserIsMember(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetTaskEquity(ctx context.Context, params GetTaskEquityRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskEquity request context is nil，trace span将无法生效")
	}
	response, err := c.getTaskEquity(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetEquityByMember(ctx context.Context, params GetEquityByMemberRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetEquityByMember request context is nil，trace span将无法生效")
	}
	response, err := c.getEquityByMember(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserNickName(ctx context.Context, params GetUserNickNameRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserNickName request context is nil，trace span将无法生效")
	}
	response, err := c.getUserNickName(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetCorpUserLoginToken(ctx context.Context, params GetCorpUserLoginTokenRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetCorpUserLoginToken request context is nil，trace span将无法生效")
	}
	response, err := c.getCorpUserLoginToken(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) UpdateUserInfo(ctx context.Context, params UpdateUserInfoRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUserInfo request context is nil，trace span将无法生效")
	}
	response, err := c.updateUserInfo(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryIsOpenRemind(ctx context.Context, params BatchQueryIsOpenRemindRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryIsOpenRemind request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryIsOpenRemind(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryUserMember(ctx context.Context, params BatchQueryUserMemberRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUserMember request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryUserMember(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) AddMemberByGoods(ctx context.Context, params AddMemberByGoodsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：AddMemberByGoods request context is nil，trace span将无法生效")
	}
	response, err := c.addMemberByGoods(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryUserInteraction(ctx context.Context, params BatchQueryUserInteractionRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryUserInteraction request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryUserInteraction(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetUserSettingByKey(ctx context.Context, params BatchGetUserSettingByKeyRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserSettingByKey request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetUserSettingByKey(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetUserInfoByTelephone(ctx context.Context, params BatchGetUserInfoByTelephoneRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetUserInfoByTelephone request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetUserInfoByTelephone(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryMemberByPlaceOrder(ctx context.Context, params BatchQueryMemberByPlaceOrderRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryMemberByPlaceOrder request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryMemberByPlaceOrder(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.helloRpcBalance = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"HelloRpcBalance",
		encodeHelloRpcBalanceRequest,
		decodeHelloRpcBalanceResponse)
	c.batchGetUserSettings = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchGetUserSettings",
		encodeBatchGetUserSettingsRequest,
		decodeBatchGetUserSettingsResponse)
	c.batchQueryUsers = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchQueryUsers",
		encodeBatchQueryUsersRequest,
		decodeBatchQueryUsersResponse)
	c.tryGrantAccessToken = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"TryGrantAccessToken",
		encodeTryGrantAccessTokenRequest,
		decodeTryGrantAccessTokenResponse)
	c.getUserSettings = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserSettings",
		encodeGetUserSettingsRequest,
		decodeGetUserSettingsResponse)
	c.createUserByOfficialAccount = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"CreateUserByOfficialAccount",
		encodeCreateUserByOfficialAccountRequest,
		decodeCreateUserByOfficialAccountResponse)
	c.updateUser = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"UpdateUser",
		encodeUpdateUserRequest,
		decodeUpdateUserResponse)
	c.whoShouldSendScheduleRemindSMS = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"WhoShouldSendScheduleRemindSMS",
		encodeWhoShouldSendScheduleRemindSMSRequest,
		decodeWhoShouldSendScheduleRemindSMSResponse)
	c.recentlyLoginAppOrDesktop = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"RecentlyLoginAppOrDesktop",
		encodeRecentlyLoginAppOrDesktopRequest,
		decodeRecentlyLoginAppOrDesktopResponse)
	c.getUserDeviceID = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserDeviceID",
		encodeGetUserDeviceIDRequest,
		decodeGetUserDeviceIDResponse)
	c.setUserLoginState = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"SetUserLoginState",
		encodeSetUserLoginStateRequest,
		decodeSetUserLoginStateResponse)
	c.getUserPhoneNumber = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserPhoneNumber",
		encodeGetUserPhoneNumberRequest,
		decodeGetUserPhoneNumberResponse)
	c.getUserOnlineState = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserOnlineState",
		encodeGetUserOnlineStateRequest,
		decodeGetUserOnlineStateResponse)
	c.batchSetUserSettings = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchSetUserSettings",
		encodeBatchSetUserSettingsRequest,
		decodeBatchSetUserSettingsResponse)
	c.batchGetUserAccount = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchGetUserAccount",
		encodeBatchGetUserAccountRequest,
		decodeBatchGetUserAccountResponse)
	c.getUserListPage = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserListPage",
		encodeGetUserListPageRequest,
		decodeGetUserListPageResponse)
	c.userOffline = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"UserOffline",
		encodeUserOfflineRequest,
		decodeUserOfflineResponse)
	c.getUsersOnlineClient = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUsersOnlineClient",
		encodeGetUsersOnlineClientRequest,
		decodeGetUsersOnlineClientResponse)
	c.getUsersWechatFilterCondition = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUsersWechatFilterCondition",
		encodeGetUsersWechatFilterConditionRequest,
		decodeGetUsersWechatFilterConditionResponse)
	c.checkUserOperateAuth = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"CheckUserOperateAuth",
		encodeCheckUserOperateAuthRequest,
		decodeCheckUserOperateAuthResponse)
	c.createComboBind = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"CreateComboBind",
		encodeCreateComboBindRequest,
		decodeCreateComboBindResponse)
	c.checkUserIsMember = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"CheckUserIsMember",
		encodeCheckUserIsMemberRequest,
		decodeCheckUserIsMemberResponse)
	c.getTaskEquity = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetTaskEquity",
		encodeGetTaskEquityRequest,
		decodeGetTaskEquityResponse)
	c.getEquityByMember = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetEquityByMember",
		encodeGetEquityByMemberRequest,
		decodeGetEquityByMemberResponse)
	c.getUserNickName = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetUserNickName",
		encodeGetUserNickNameRequest,
		decodeGetUserNickNameResponse)
	c.getCorpUserLoginToken = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"GetCorpUserLoginToken",
		encodeGetCorpUserLoginTokenRequest,
		decodeGetCorpUserLoginTokenResponse)
	c.updateUserInfo = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"UpdateUserInfo",
		encodeUpdateUserInfoRequest,
		decodeUpdateUserInfoResponse)
	c.batchQueryIsOpenRemind = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchQueryIsOpenRemind",
		encodeBatchQueryIsOpenRemindRequest,
		decodeBatchQueryIsOpenRemindResponse)
	c.batchQueryUserMember = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchQueryUserMember",
		encodeBatchQueryUserMemberRequest,
		decodeBatchQueryUserMemberResponse)
	c.addMemberByGoods = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"AddMemberByGoods",
		encodeAddMemberByGoodsRequest,
		decodeAddMemberByGoodsResponse)
	c.batchQueryUserInteraction = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchQueryUserInteraction",
		encodeBatchQueryUserInteractionRequest,
		decodeBatchQueryUserInteractionResponse)
	c.batchGetUserSettingByKey = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchGetUserSettingByKey",
		encodeBatchGetUserSettingByKeyRequest,
		decodeBatchGetUserSettingByKeyResponse)
	c.batchGetUserInfoByTelephone = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchGetUserInfoByTelephone",
		encodeBatchGetUserInfoByTelephoneRequest,
		decodeBatchGetUserInfoByTelephoneResponse)
	c.batchQueryMemberByPlaceOrder = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserCenter",
		"BatchQueryMemberByPlaceOrder",
		encodeBatchQueryMemberByPlaceOrderRequest,
		decodeBatchQueryMemberByPlaceOrderResponse)
}
