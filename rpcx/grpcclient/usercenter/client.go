// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package usercenter

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"

	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient usercenter GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.UserCenterSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleHelloRpcBalance 客户端处理逻辑
func (c *GrpcClient) HandleHelloRpcBalance(ctx context.Context, req HelloRpcBalanceRequest) error {
	resp := c.client.HelloRpcBalance(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleBatchGetUserSettings 客户端处理逻辑
func (c *GrpcClient) HandleBatchGetUserSettings(ctx context.Context, req BatchGetUserSettingsRequest) *BatchGetUserSettingsResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchGetUserSettings", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchGetUserSettings(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchGetUserSettings 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchGetUserSettingsResponse)
		return &m
	}
	return nil
}

// HandleBatchQueryUsers 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryUsers(ctx context.Context, req BatchQueryUsersRequest) *BatchQueryUsersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchQueryUsers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryUsers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryUsers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryUsersResponse)
		return &m
	}
	return nil
}

// HandleTryGrantAccessToken 客户端处理逻辑
func (c *GrpcClient) HandleTryGrantAccessToken(ctx context.Context, req TryGrantAccessTokenRequest) *TryGrantAccessTokenResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/TryGrantAccessToken", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.TryGrantAccessToken(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 TryGrantAccessToken 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(TryGrantAccessTokenResponse)
		return &m
	}
	return nil
}

// HandleGetUserSettings 客户端处理逻辑
func (c *GrpcClient) HandleGetUserSettings(ctx context.Context, req GetUserSettingsRequest) *GetUserSettingsResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserSettings", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserSettings(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserSettings 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserSettingsResponse)
		return &m
	}
	return nil
}

// HandleCreateUserByOfficialAccount 客户端处理逻辑
func (c *GrpcClient) HandleCreateUserByOfficialAccount(ctx context.Context, req CreateUserByOfficialAccountRequest) *CreateUserByOfficialAccountResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/CreateUserByOfficialAccount", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.CreateUserByOfficialAccount(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 CreateUserByOfficialAccount 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(CreateUserByOfficialAccountResponse)
		return &m
	}
	return nil
}

// HandleUpdateUser 客户端处理逻辑
func (c *GrpcClient) HandleUpdateUser(ctx context.Context, req UpdateUserRequest) error {
	resp := c.client.UpdateUser(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleWhoShouldSendScheduleRemindSMS 客户端处理逻辑
func (c *GrpcClient) HandleWhoShouldSendScheduleRemindSMS(ctx context.Context, req WhoShouldSendScheduleRemindSMSRequest) *WhoShouldSendScheduleRemindSMSResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/WhoShouldSendScheduleRemindSMS", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.WhoShouldSendScheduleRemindSMS(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 WhoShouldSendScheduleRemindSMS 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(WhoShouldSendScheduleRemindSMSResponse)
		return &m
	}
	return nil
}

// HandleRecentlyLoginAppOrDesktop 客户端处理逻辑
func (c *GrpcClient) HandleRecentlyLoginAppOrDesktop(ctx context.Context, req RecentlyLoginAppOrDesktopRequest) *RecentlyLoginAppOrDesktopResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/RecentlyLoginAppOrDesktop", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.RecentlyLoginAppOrDesktop(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 RecentlyLoginAppOrDesktop 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(RecentlyLoginAppOrDesktopResponse)
		return &m
	}
	return nil
}

// HandleGetUserDeviceID 客户端处理逻辑
func (c *GrpcClient) HandleGetUserDeviceID(ctx context.Context, req GetUserDeviceIDRequest) *GetUserDeviceIDResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserDeviceID", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserDeviceID(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserDeviceID 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserDeviceIDResponse)
		return &m
	}
	return nil
}

// HandleSetUserLoginState 客户端处理逻辑
func (c *GrpcClient) HandleSetUserLoginState(ctx context.Context, req SetUserLoginStateRequest) error {
	resp := c.client.SetUserLoginState(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetUserPhoneNumber 客户端处理逻辑
func (c *GrpcClient) HandleGetUserPhoneNumber(ctx context.Context, req GetUserPhoneNumberRequest) *GetUserPhoneNumberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserPhoneNumber", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserPhoneNumber(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserPhoneNumber 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserPhoneNumberResponse)
		return &m
	}
	return nil
}

// HandleGetUserOnlineState 客户端处理逻辑
func (c *GrpcClient) HandleGetUserOnlineState(ctx context.Context, req GetUserOnlineStateRequest) *GetUserOnlineStateResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserOnlineState", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserOnlineState(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserOnlineState 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserOnlineStateResponse)
		return &m
	}
	return nil
}

// HandleBatchSetUserSettings 客户端处理逻辑
func (c *GrpcClient) HandleBatchSetUserSettings(ctx context.Context, req BatchSetUserSettingsRequest) error {
	resp := c.client.BatchSetUserSettings(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleBatchGetUserAccount 客户端处理逻辑
func (c *GrpcClient) HandleBatchGetUserAccount(ctx context.Context, req BatchGetUserAccountRequest) *BatchGetUserAccountResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchGetUserAccount", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchGetUserAccount(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchGetUserAccount 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchGetUserAccountResponse)
		return &m
	}
	return nil
}

// HandleGetUserListPage 客户端处理逻辑
func (c *GrpcClient) HandleGetUserListPage(ctx context.Context, req GetUserListPageRequest) *GetUserListPageResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserListPage", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserListPage(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserListPage 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserListPageResponse)
		return &m
	}
	return nil
}

// HandleUserOffline 客户端处理逻辑
func (c *GrpcClient) HandleUserOffline(ctx context.Context, req UserOfflineRequest) error {
	resp := c.client.UserOffline(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetUsersOnlineClient 客户端处理逻辑
func (c *GrpcClient) HandleGetUsersOnlineClient(ctx context.Context, req GetUsersOnlineClientRequest) *GetUsersOnlineClientResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUsersOnlineClient", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUsersOnlineClient(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUsersOnlineClient 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUsersOnlineClientResponse)
		return &m
	}
	return nil
}

// HandleGetUsersWechatFilterCondition 客户端处理逻辑
func (c *GrpcClient) HandleGetUsersWechatFilterCondition(ctx context.Context, req GetUsersWechatFilterConditionRequest) *GetUsersWechatFilterConditionResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUsersWechatFilterCondition", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUsersWechatFilterCondition(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUsersWechatFilterCondition 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUsersWechatFilterConditionResponse)
		return &m
	}
	return nil
}

// HandleCheckUserOperateAuth 客户端处理逻辑
func (c *GrpcClient) HandleCheckUserOperateAuth(ctx context.Context, req CheckUserOperateAuthRequest) *CheckUserOperateAuthResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/CheckUserOperateAuth", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.CheckUserOperateAuth(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 CheckUserOperateAuth 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(CheckUserOperateAuthResponse)
		return &m
	}
	return nil
}

// HandleCreateComboBind 客户端处理逻辑
func (c *GrpcClient) HandleCreateComboBind(ctx context.Context, req CreateComboBindRequest) *CreateComboBindResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/CreateComboBind", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.CreateComboBind(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 CreateComboBind 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(CreateComboBindResponse)
		return &m
	}
	return nil
}

// HandleCheckUserIsMember 客户端处理逻辑
func (c *GrpcClient) HandleCheckUserIsMember(ctx context.Context, req CheckUserIsMemberRequest) *CheckUserIsMemberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/CheckUserIsMember", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.CheckUserIsMember(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 CheckUserIsMember 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(CheckUserIsMemberResponse)
		return &m
	}
	return nil
}

// HandleGetTaskEquity 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskEquity(ctx context.Context, req GetTaskEquityRequest) *GetTaskEquityResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetTaskEquity", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskEquity(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskEquity 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskEquityResponse)
		return &m
	}
	return nil
}

// HandleGetEquityByMember 客户端处理逻辑
func (c *GrpcClient) HandleGetEquityByMember(ctx context.Context, req GetEquityByMemberRequest) *GetEquityByMemberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetEquityByMember", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetEquityByMember(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetEquityByMember 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetEquityByMemberResponse)
		return &m
	}
	return nil
}

// HandleGetUserNickName 客户端处理逻辑
func (c *GrpcClient) HandleGetUserNickName(ctx context.Context, req GetUserNickNameRequest) *GetUserNickNameResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetUserNickName", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUserNickName(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUserNickName 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUserNickNameResponse)
		return &m
	}
	return nil
}

// HandleGetCorpUserLoginToken 客户端处理逻辑
func (c *GrpcClient) HandleGetCorpUserLoginToken(ctx context.Context, req GetCorpUserLoginTokenRequest) *GetCorpUserLoginTokenResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/GetCorpUserLoginToken", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetCorpUserLoginToken(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetCorpUserLoginToken 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetCorpUserLoginTokenResponse)
		return &m
	}
	return nil
}

// HandleUpdateUserInfo 客户端处理逻辑
func (c *GrpcClient) HandleUpdateUserInfo(ctx context.Context, req UpdateUserInfoRequest) *UpdateUserInfoResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/UpdateUserInfo", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.UpdateUserInfo(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 UpdateUserInfo 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(UpdateUserInfoResponse)
		return &m
	}
	return nil
}

// HandleBatchQueryIsOpenRemind 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryIsOpenRemind(ctx context.Context, req BatchQueryIsOpenRemindRequest) *BatchQueryIsOpenRemindResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchQueryIsOpenRemind", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryIsOpenRemind(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryIsOpenRemind 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryIsOpenRemindResponse)
		return &m
	}
	return nil
}

// HandleBatchQueryUserMember 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryUserMember(ctx context.Context, req BatchQueryUserMemberRequest) *BatchQueryUserMemberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchQueryUserMember", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryUserMember(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryUserMember 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryUserMemberResponse)
		return &m
	}
	return nil
}

// HandleAddMemberByGoods 客户端处理逻辑
func (c *GrpcClient) HandleAddMemberByGoods(ctx context.Context, req AddMemberByGoodsRequest) *AddMemberByGoodsResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/AddMemberByGoods", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.AddMemberByGoods(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 AddMemberByGoods 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(AddMemberByGoodsResponse)
		return &m
	}
	return nil
}

// HandleBatchQueryUserInteraction 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryUserInteraction(ctx context.Context, req BatchQueryUserInteractionRequest) *BatchQueryUserInteractionResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchQueryUserInteraction", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryUserInteraction(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryUserInteraction 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryUserInteractionResponse)
		return &m
	}
	return nil
}

// HandleBatchGetUserSettingByKey 客户端处理逻辑
func (c *GrpcClient) HandleBatchGetUserSettingByKey(ctx context.Context, req BatchGetUserSettingByKeyRequest) *BatchGetUserSettingByKeyResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchGetUserSettingByKey", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchGetUserSettingByKey(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchGetUserSettingByKey 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchGetUserSettingByKeyResponse)
		return &m
	}
	return nil
}

// HandleBatchGetUserInfoByTelephone 客户端处理逻辑
func (c *GrpcClient) HandleBatchGetUserInfoByTelephone(ctx context.Context, req BatchGetUserInfoByTelephoneRequest) *BatchGetUserInfoByTelephoneResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.usercenter/BatchGetUserInfoByTelephone", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchGetUserInfoByTelephone(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchGetUserInfoByTelephone 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchGetUserInfoByTelephoneResponse)
		return &m
	}
	return nil
}
