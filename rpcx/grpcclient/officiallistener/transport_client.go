// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package officiallistener

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeSendMessageRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(SendMessageRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.SendMessageRequest{
		MessageType:    r.MessageType,
		UserID:         r.UserID,
		MsgContent:     r.MsgContent,
		Href:           r.Href,
		Title:          r.Title,
		Desc:           r.Desc,
		AcceptedUserID: r.AcceptedUserID,
		Context:        xcontext,
	}, nil
}

func decodeSendMessageResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.SendMessageResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: SendMessageResponse{
			Code: pbresp.Code,
		},
	}, nil
}
func encodeSendCorpTempMsgRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(SendCorpTempMsgRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.SendCorpTempMsgRequest{
		FirstTitle:       r.FirstTitle,
		FirstTitleDetail: r.FirstTitleDetail,
		Content:          r.Content,
		CreateAt:         r.CreateAt,
		CreatorID:        r.CreatorID,
		Url:              r.Url,
		MsgType:          r.MsgType,
		NotifyUserID:     r.NotifyUserID,
		TaskID:           r.TaskID,
		WorkspaceID:      r.WorkspaceID,
		ProjectID:        r.ProjectID,
		Context:          xcontext,
	}, nil
}

func decodeSendCorpTempMsgResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.SendCorpTempMsgResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: SendCorpTempMsgResponse{
			Code: pbresp.Code,
			Msg:  pbresp.Msg,
		},
	}, nil
}
func encodeGetUserCorpDetailRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserCorpDetailRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserCorpDetailRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetUserCorpDetailResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserCorpDetailResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var detailsArray = make([]*UserCorpDetail, 0)
	for _, v := range pbresp.Details {
		detailsArray = append(detailsArray, &UserCorpDetail{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			CorpID: v.CorpID,
			//判断字段是否为复杂类型
			CorpName: v.CorpName,
			//判断字段是否为复杂类型
			Version: v.Version,
			//判断字段是否为复杂类型
			AppStatus: v.AppStatus,
			//判断字段是否为复杂类型
			UserLimit: v.UserLimit,
			//判断字段是否为复杂类型
			IsVisible: v.IsVisible,
			//判断字段是否为复杂类型
			UserStatus: v.UserStatus,
		})
	}

	return grpcbase.Response{
		Data: GetUserCorpDetailResponse{
			Details: detailsArray,
		},
	}, nil
}
func encodeBatchGetCorpDetailRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetCorpDetailRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetCorpDetailRequest{
		CorpIDs: r.CorpIDs,
		Context: xcontext,
	}, nil
}

func decodeBatchGetCorpDetailResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetCorpDetailResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var detailsArray = make([]*CorpDetail, 0)
	for _, v := range pbresp.Details {
		detailsArray = append(detailsArray, &CorpDetail{
			//判断字段是否为复杂类型
			CorpID: v.CorpID,
			//判断字段是否为复杂类型
			CorpName: v.CorpName,
			//判断字段是否为复杂类型
			ExpiredTime: v.ExpiredTime,
			//判断字段是否为复杂类型
			Version: v.Version,
			//判断字段是否为复杂类型
			AppStatus: v.AppStatus,
			//判断字段是否为复杂类型
			UserLimit: v.UserLimit,
		})
	}

	return grpcbase.Response{
		Data: BatchGetCorpDetailResponse{
			Details: detailsArray,
		},
	}, nil
}
