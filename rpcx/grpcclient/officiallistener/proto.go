// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package officiallistener

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	SendMessageHandler        func(ctx context.Context, req SendMessageRequest) grpcbase.Response
	SendCorpTempMsgHandler    func(ctx context.Context, req SendCorpTempMsgRequest) grpcbase.Response
	GetUserCorpDetailHandler  func(ctx context.Context, req GetUserCorpDetailRequest) grpcbase.Response
	BatchGetCorpDetailHandler func(ctx context.Context, req BatchGetCorpDetailRequest) grpcbase.Response
)

type Repository interface {
	SendMessage(ctx context.Context, request SendMessageRequest) grpcbase.Response
	SendCorpTempMsg(ctx context.Context, request SendCorpTempMsgRequest) grpcbase.Response
	GetUserCorpDetail(ctx context.Context, request GetUserCorpDetailRequest) grpcbase.Response
	BatchGetCorpDetail(ctx context.Context, request BatchGetCorpDetailRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetCorpDetailRequest struct {
	CorpIDs []string     `json:"corp_i_ds,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s BatchGetCorpDetailRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetCorpDetailResponse struct {
	Details []*CorpDetail `json:"details,omitempty"`
}

func (s BatchGetCorpDetailResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CorpDetail struct {
	CorpID      string `json:"corp_id,omitempty"`
	CorpName    string `json:"corp_name,omitempty"`
	ExpiredTime int64  `json:"expired_time,omitempty"`
	Version     string `json:"version,omitempty"`
	AppStatus   int32  `json:"app_status,omitempty"`
	UserLimit   int64  `json:"user_limit,omitempty"`
}

func (s CorpDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserCorpDetailRequest struct {
	UserID  []string     `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserCorpDetailRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserCorpDetailResponse struct {
	Details []*UserCorpDetail `json:"details,omitempty"`
}

func (s GetUserCorpDetailResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendCorpTempMsgRequest struct {
	FirstTitle       string       `json:"first_title,omitempty"`
	FirstTitleDetail string       `json:"first_title_detail,omitempty"`
	Content          string       `json:"content,omitempty"`
	CreateAt         int64        `json:"create_at,omitempty"`
	CreatorID        string       `json:"creator_id,omitempty"`
	Url              string       `json:"url,omitempty"`
	MsgType          string       `json:"msg_type,omitempty"`
	NotifyUserID     []string     `json:"notify_user_id,omitempty"`
	TaskID           string       `json:"task_id,omitempty"`
	WorkspaceID      string       `json:"workspace_id,omitempty"`
	ProjectID        string       `json:"project_id,omitempty"`
	Context          *UserContext `json:"context,omitempty"`
}

func (s SendCorpTempMsgRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendCorpTempMsgResponse struct {
	Code int32  `json:"code,omitempty"`
	Msg  string `json:"msg,omitempty"`
}

func (s SendCorpTempMsgResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendMessageRequest struct {
	MessageType    int32        `json:"message_type,omitempty"`
	UserID         []string     `json:"user_id,omitempty"`
	MsgContent     string       `json:"msg_content,omitempty"`
	Href           string       `json:"href,omitempty"`
	Title          string       `json:"title,omitempty"`
	Desc           string       `json:"desc,omitempty"`
	AcceptedUserID []string     `json:"accepted_user_id,omitempty"`
	Context        *UserContext `json:"context,omitempty"`
}

func (s SendMessageRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendMessageResponse struct {
	Code int32 `json:"code,omitempty"`
}

func (s SendMessageResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserCorpDetail struct {
	UserID     string `json:"user_id,omitempty"`
	CorpID     string `json:"corp_id,omitempty"`
	CorpName   string `json:"corp_name,omitempty"`
	Version    string `json:"version,omitempty"`
	AppStatus  int32  `json:"app_status,omitempty"`
	UserLimit  int64  `json:"user_limit,omitempty"`
	IsVisible  int32  `json:"is_visible,omitempty"`
	UserStatus int32  `json:"user_status,omitempty"`
}

func (s UserCorpDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建officiallistener的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) SendMessage(ctx context.Context, req SendMessageRequest) grpcbase.Response {
	if SendMessageHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.officiallistener/SendMessage", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return SendMessageHandler(ctx, req.(SendMessageRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) SendCorpTempMsg(ctx context.Context, req SendCorpTempMsgRequest) grpcbase.Response {
	if SendCorpTempMsgHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.officiallistener/SendCorpTempMsg", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return SendCorpTempMsgHandler(ctx, req.(SendCorpTempMsgRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserCorpDetail(ctx context.Context, req GetUserCorpDetailRequest) grpcbase.Response {
	if GetUserCorpDetailHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.officiallistener/GetUserCorpDetail", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserCorpDetailHandler(ctx, req.(GetUserCorpDetailRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetCorpDetail(ctx context.Context, req BatchGetCorpDetailRequest) grpcbase.Response {
	if BatchGetCorpDetailHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.officiallistener/BatchGetCorpDetail", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetCorpDetailHandler(ctx, req.(BatchGetCorpDetailRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
