// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package officiallistener

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeSendMessageEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SendMessageRequest)
		v := svc.SendMessage(ctx, req)
		return v, nil
	}
}
func decodeSendMessageRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SendMessageRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SendMessageRequest{
		MessageType:    r.MessageType,
		UserID:         r.UserID,
		MsgContent:     r.MsgContent,
		Href:           r.Href,
		Title:          r.Title,
		Desc:           r.Desc,
		AcceptedUserID: r.AcceptedUserID,
		Context:        xcontext,
	}, nil
}

func encodeSendMessageResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(SendMessageResponse)
	pbresp := &pb.SendMessageResponse{
		Code: resp.Code,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeSendCorpTempMsgEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SendCorpTempMsgRequest)
		v := svc.SendCorpTempMsg(ctx, req)
		return v, nil
	}
}
func decodeSendCorpTempMsgRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SendCorpTempMsgRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SendCorpTempMsgRequest{
		FirstTitle:       r.FirstTitle,
		FirstTitleDetail: r.FirstTitleDetail,
		Content:          r.Content,
		CreateAt:         r.CreateAt,
		CreatorID:        r.CreatorID,
		Url:              r.Url,
		MsgType:          r.MsgType,
		NotifyUserID:     r.NotifyUserID,
		TaskID:           r.TaskID,
		WorkspaceID:      r.WorkspaceID,
		ProjectID:        r.ProjectID,
		Context:          xcontext,
	}, nil
}

func encodeSendCorpTempMsgResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(SendCorpTempMsgResponse)
	pbresp := &pb.SendCorpTempMsgResponse{
		Code: resp.Code,
		Msg:  resp.Msg,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserCorpDetailEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserCorpDetailRequest)
		v := svc.GetUserCorpDetail(ctx, req)
		return v, nil
	}
}
func decodeGetUserCorpDetailRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserCorpDetailRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserCorpDetailRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetUserCorpDetailResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserCorpDetailResponse)
	//是复杂类型的数组
	var detailsArray = make([]*pb.UserCorpDetail, 0)

	for _, v := range resp.Details {
		detailsArray = append(detailsArray, &pb.UserCorpDetail{
			UserID:     v.UserID,
			CorpID:     v.CorpID,
			CorpName:   v.CorpName,
			Version:    v.Version,
			AppStatus:  v.AppStatus,
			UserLimit:  v.UserLimit,
			IsVisible:  v.IsVisible,
			UserStatus: v.UserStatus,
		})
	}
	pbresp := &pb.GetUserCorpDetailResponse{
		Details: detailsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetCorpDetailEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetCorpDetailRequest)
		v := svc.BatchGetCorpDetail(ctx, req)
		return v, nil
	}
}
func decodeBatchGetCorpDetailRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetCorpDetailRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetCorpDetailRequest{
		CorpIDs: r.CorpIDs,
		Context: xcontext,
	}, nil
}

func encodeBatchGetCorpDetailResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetCorpDetailResponse)
	//是复杂类型的数组
	var detailsArray = make([]*pb.CorpDetail, 0)

	for _, v := range resp.Details {
		detailsArray = append(detailsArray, &pb.CorpDetail{
			CorpID:      v.CorpID,
			CorpName:    v.CorpName,
			ExpiredTime: v.ExpiredTime,
			Version:     v.Version,
			AppStatus:   v.AppStatus,
			UserLimit:   v.UserLimit,
		})
	}
	pbresp := &pb.BatchGetCorpDetailResponse{
		Details: detailsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
