// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package officiallistener

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.OfficialListenerSVC), &clientBinding{})
}

type clientBinding struct {
	sendMessage        endpoint.Endpoint
	sendCorpTempMsg    endpoint.Endpoint
	getUserCorpDetail  endpoint.Endpoint
	batchGetCorpDetail endpoint.Endpoint
}

func (c *clientBinding) SendMessage(ctx context.Context, params SendMessageRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendMessage request context is nil，trace span将无法生效")
	}
	response, err := c.sendMessage(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) SendCorpTempMsg(ctx context.Context, params SendCorpTempMsgRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendCorpTempMsg request context is nil，trace span将无法生效")
	}
	response, err := c.sendCorpTempMsg(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserCorpDetail(ctx context.Context, params GetUserCorpDetailRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserCorpDetail request context is nil，trace span将无法生效")
	}
	response, err := c.getUserCorpDetail(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetCorpDetail(ctx context.Context, params BatchGetCorpDetailRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetCorpDetail request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetCorpDetail(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.sendMessage = grpcbase.CreateGRPCClientEndpoint(cc, "pb.OfficialListener",
		"SendMessage",
		encodeSendMessageRequest,
		decodeSendMessageResponse)
	c.sendCorpTempMsg = grpcbase.CreateGRPCClientEndpoint(cc, "pb.OfficialListener",
		"SendCorpTempMsg",
		encodeSendCorpTempMsgRequest,
		decodeSendCorpTempMsgResponse)
	c.getUserCorpDetail = grpcbase.CreateGRPCClientEndpoint(cc, "pb.OfficialListener",
		"GetUserCorpDetail",
		encodeGetUserCorpDetailRequest,
		decodeGetUserCorpDetailResponse)
	c.batchGetCorpDetail = grpcbase.CreateGRPCClientEndpoint(cc, "pb.OfficialListener",
		"BatchGetCorpDetail",
		encodeBatchGetCorpDetailRequest,
		decodeBatchGetCorpDetailResponse)
}
