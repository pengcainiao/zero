// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package officiallistener

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	sendMessage        grpctransport.Handler
	sendCorpTempMsg    grpctransport.Handler
	getUserCorpDetail  grpctransport.Handler
	batchGetCorpDetail grpctransport.Handler
}

func (b *serverBinding) SendMessage(ctx context.Context, req *pb.SendMessageRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendMessage receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.sendMessage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) SendCorpTempMsg(ctx context.Context, req *pb.SendCorpTempMsgRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendCorpTempMsg receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.sendCorpTempMsg.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserCorpDetail(ctx context.Context, req *pb.GetUserCorpDetailRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserCorpDetail receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserCorpDetail.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetCorpDetail(ctx context.Context, req *pb.BatchGetCorpDetailRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetCorpDetail receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetCorpDetail.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterOfficialListenerServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"sendMessage":        b.sendMessage,
		"sendCorpTempMsg":    b.sendCorpTempMsg,
		"getUserCorpDetail":  b.getUserCorpDetail,
		"batchGetCorpDetail": b.batchGetCorpDetail,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		sendMessage: grpcbase.CreateGRPCServer(
			makeSendMessageEndpoint(svc),
			decodeSendMessageRequest,
			encodeSendMessageResponse,
		),
		sendCorpTempMsg: grpcbase.CreateGRPCServer(
			makeSendCorpTempMsgEndpoint(svc),
			decodeSendCorpTempMsgRequest,
			encodeSendCorpTempMsgResponse,
		),
		getUserCorpDetail: grpcbase.CreateGRPCServer(
			makeGetUserCorpDetailEndpoint(svc),
			decodeGetUserCorpDetailRequest,
			encodeGetUserCorpDetailResponse,
		),
		batchGetCorpDetail: grpcbase.CreateGRPCServer(
			makeBatchGetCorpDetailEndpoint(svc),
			decodeBatchGetCorpDetailRequest,
			encodeBatchGetCorpDetailResponse,
		),
	}
}
