// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package label

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	GetLabelBindHandler      func(ctx context.Context, req GetLabelBindRequest) grpcbase.Response
	GetUserBindTagHandler    func(ctx context.Context, req GetUserBindTagRequest) grpcbase.Response
	GetViewBindNumHandler    func(ctx context.Context, req GetViewBindNumRequest) grpcbase.Response
	GetLabelByIDHandler      func(ctx context.Context, req GetLabelByIDRequest) grpcbase.Response
	BatchGetLabelByIDHandler func(ctx context.Context, req BatchGetLabelByIDRequest) grpcbase.Response
	BatchGetTagBindsHandler  func(ctx context.Context, req BatchGetTagBindsRequest) grpcbase.Response
)

type Repository interface {
	GetLabelBind(ctx context.Context, request GetLabelBindRequest) grpcbase.Response
	GetUserBindTag(ctx context.Context, request GetUserBindTagRequest) grpcbase.Response
	GetViewBindNum(ctx context.Context, request GetViewBindNumRequest) grpcbase.Response
	GetLabelByID(ctx context.Context, request GetLabelByIDRequest) grpcbase.Response
	BatchGetLabelByID(ctx context.Context, request BatchGetLabelByIDRequest) grpcbase.Response
	BatchGetTagBinds(ctx context.Context, request BatchGetTagBindsRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetLabelByIDRequest struct {
	LabelsID []string     `json:"labels_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s BatchGetLabelByIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetLabelByIDResponse struct {
	Labels []*GetLabelByIDResponse `json:"labels,omitempty"`
}

func (s BatchGetLabelByIDResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetTagBindsRequest struct {
	Context *UserContext `json:"context,omitempty"`
	ObjID   string       `json:"obj_id,omitempty"`
}

func (s BatchGetTagBindsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetTagBindsResponse struct {
	Labels []*TagBindResp `json:"labels,omitempty"`
}

func (s BatchGetTagBindsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetLabelBindRequest struct {
	ObjectID string       `json:"object_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetLabelBindRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetLabelBindResponse struct {
	TagBinds []*TagBindResp `json:"tag_binds,omitempty"`
}

func (s GetLabelBindResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetLabelByIDRequest struct {
	LabelID string       `json:"label_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetLabelByIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetLabelByIDResponse struct {
	ID        string `json:"id,omitempty"`
	Name      string `json:"name,omitempty"`
	CreatorID string `json:"creator_id,omitempty"`
	Color     string `json:"color,omitempty"`
	Type      int32  `json:"type,omitempty"`
	State     int32  `json:"state,omitempty"`
	CreateAt  int64  `json:"create_at,omitempty"`
	UpdateAt  int64  `json:"update_at,omitempty"`
}

func (s GetLabelByIDResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserBindTagRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	TagID   string       `json:"tag_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUserBindTagRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUserBindTagResponse struct {
	TagBinds []*TagBindResp `json:"tag_binds,omitempty"`
}

func (s GetUserBindTagResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetViewBindNumRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetViewBindNumRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetViewBindNumResponse struct {
	Num int64 `json:"num,omitempty"`
}

func (s GetViewBindNumResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TagBindResp struct {
	ID       string `json:"id,omitempty"`
	TagID    string `json:"tag_id,omitempty"`
	UserID   string `json:"user_id,omitempty"`
	ObjectID string `json:"object_id,omitempty"`
	Name     string `json:"name,omitempty"`
	Color    string `json:"color,omitempty"`
}

func (s TagBindResp) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建label的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) GetLabelBind(ctx context.Context, req GetLabelBindRequest) grpcbase.Response {
	if GetLabelBindHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/GetLabelBind", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetLabelBindHandler(ctx, req.(GetLabelBindRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUserBindTag(ctx context.Context, req GetUserBindTagRequest) grpcbase.Response {
	if GetUserBindTagHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/GetUserBindTag", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUserBindTagHandler(ctx, req.(GetUserBindTagRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetViewBindNum(ctx context.Context, req GetViewBindNumRequest) grpcbase.Response {
	if GetViewBindNumHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/GetViewBindNum", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetViewBindNumHandler(ctx, req.(GetViewBindNumRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetLabelByID(ctx context.Context, req GetLabelByIDRequest) grpcbase.Response {
	if GetLabelByIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/GetLabelByID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetLabelByIDHandler(ctx, req.(GetLabelByIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetLabelByID(ctx context.Context, req BatchGetLabelByIDRequest) grpcbase.Response {
	if BatchGetLabelByIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/BatchGetLabelByID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetLabelByIDHandler(ctx, req.(BatchGetLabelByIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetTagBinds(ctx context.Context, req BatchGetTagBindsRequest) grpcbase.Response {
	if BatchGetTagBindsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.label/BatchGetTagBinds", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetTagBindsHandler(ctx, req.(BatchGetTagBindsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
