// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package label

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	getLabelBind      grpctransport.Handler
	getUserBindTag    grpctransport.Handler
	getViewBindNum    grpctransport.Handler
	getLabelByID      grpctransport.Handler
	batchGetLabelByID grpctransport.Handler
	batchGetTagBinds  grpctransport.Handler
}

func (b *serverBinding) GetLabelBind(ctx context.Context, req *pb.GetLabelBindRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetLabelBind receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getLabelBind.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUserBindTag(ctx context.Context, req *pb.GetUserBindTagRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserBindTag receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUserBindTag.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetViewBindNum(ctx context.Context, req *pb.GetViewBindNumRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetViewBindNum receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getViewBindNum.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetLabelByID(ctx context.Context, req *pb.GetLabelByIDRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetLabelByID receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getLabelByID.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetLabelByID(ctx context.Context, req *pb.BatchGetLabelByIDRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetLabelByID receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetLabelByID.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetTagBinds(ctx context.Context, req *pb.BatchGetTagBindsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetTagBinds receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetTagBinds.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterLabelServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"getLabelBind":      b.getLabelBind,
		"getUserBindTag":    b.getUserBindTag,
		"getViewBindNum":    b.getViewBindNum,
		"getLabelByID":      b.getLabelByID,
		"batchGetLabelByID": b.batchGetLabelByID,
		"batchGetTagBinds":  b.batchGetTagBinds,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		getLabelBind: grpcbase.CreateGRPCServer(
			makeGetLabelBindEndpoint(svc),
			decodeGetLabelBindRequest,
			encodeGetLabelBindResponse,
		),
		getUserBindTag: grpcbase.CreateGRPCServer(
			makeGetUserBindTagEndpoint(svc),
			decodeGetUserBindTagRequest,
			encodeGetUserBindTagResponse,
		),
		getViewBindNum: grpcbase.CreateGRPCServer(
			makeGetViewBindNumEndpoint(svc),
			decodeGetViewBindNumRequest,
			encodeGetViewBindNumResponse,
		),
		getLabelByID: grpcbase.CreateGRPCServer(
			makeGetLabelByIDEndpoint(svc),
			decodeGetLabelByIDRequest,
			encodeGetLabelByIDResponse,
		),
		batchGetLabelByID: grpcbase.CreateGRPCServer(
			makeBatchGetLabelByIDEndpoint(svc),
			decodeBatchGetLabelByIDRequest,
			encodeBatchGetLabelByIDResponse,
		),
		batchGetTagBinds: grpcbase.CreateGRPCServer(
			makeBatchGetTagBindsEndpoint(svc),
			decodeBatchGetTagBindsRequest,
			encodeBatchGetTagBindsResponse,
		),
	}
}
