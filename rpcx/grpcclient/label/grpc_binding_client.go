// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package label

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.LabelSVC), &clientBinding{})
}

type clientBinding struct {
	getLabelBind      endpoint.Endpoint
	getUserBindTag    endpoint.Endpoint
	getViewBindNum    endpoint.Endpoint
	getLabelByID      endpoint.Endpoint
	batchGetLabelByID endpoint.Endpoint
	batchGetTagBinds  endpoint.Endpoint
}

func (c *clientBinding) GetLabelBind(ctx context.Context, params GetLabelBindRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetLabelBind request context is nil，trace span将无法生效")
	}
	response, err := c.getLabelBind(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetUserBindTag(ctx context.Context, params GetUserBindTagRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUserBindTag request context is nil，trace span将无法生效")
	}
	response, err := c.getUserBindTag(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetViewBindNum(ctx context.Context, params GetViewBindNumRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetViewBindNum request context is nil，trace span将无法生效")
	}
	response, err := c.getViewBindNum(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetLabelByID(ctx context.Context, params GetLabelByIDRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetLabelByID request context is nil，trace span将无法生效")
	}
	response, err := c.getLabelByID(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetLabelByID(ctx context.Context, params BatchGetLabelByIDRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetLabelByID request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetLabelByID(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchGetTagBinds(ctx context.Context, params BatchGetTagBindsRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetTagBinds request context is nil，trace span将无法生效")
	}
	response, err := c.batchGetTagBinds(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.getLabelBind = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"GetLabelBind",
		encodeGetLabelBindRequest,
		decodeGetLabelBindResponse)
	c.getUserBindTag = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"GetUserBindTag",
		encodeGetUserBindTagRequest,
		decodeGetUserBindTagResponse)
	c.getViewBindNum = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"GetViewBindNum",
		encodeGetViewBindNumRequest,
		decodeGetViewBindNumResponse)
	c.getLabelByID = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"GetLabelByID",
		encodeGetLabelByIDRequest,
		decodeGetLabelByIDResponse)
	c.batchGetLabelByID = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"BatchGetLabelByID",
		encodeBatchGetLabelByIDRequest,
		decodeBatchGetLabelByIDResponse)
	c.batchGetTagBinds = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Label",
		"BatchGetTagBinds",
		encodeBatchGetTagBindsRequest,
		decodeBatchGetTagBindsResponse)
}
