// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package label

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeGetLabelBindEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetLabelBindRequest)
		v := svc.GetLabelBind(ctx, req)
		return v, nil
	}
}
func decodeGetLabelBindRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetLabelBindRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetLabelBindRequest{
		ObjectID: r.ObjectID,
		Context:  xcontext,
	}, nil
}

func encodeGetLabelBindResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetLabelBindResponse)
	//是复杂类型的数组
	var tagbindsArray = make([]*pb.TagBindResp, 0)

	for _, v := range resp.TagBinds {
		tagbindsArray = append(tagbindsArray, &pb.TagBindResp{
			ID:       v.ID,
			TagID:    v.TagID,
			UserID:   v.UserID,
			ObjectID: v.ObjectID,
			Name:     v.Name,
			Color:    v.Color,
		})
	}
	pbresp := &pb.GetLabelBindResponse{
		TagBinds: tagbindsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUserBindTagEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUserBindTagRequest)
		v := svc.GetUserBindTag(ctx, req)
		return v, nil
	}
}
func decodeGetUserBindTagRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUserBindTagRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUserBindTagRequest{
		UserID:  r.UserID,
		TagID:   r.TagID,
		Context: xcontext,
	}, nil
}

func encodeGetUserBindTagResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUserBindTagResponse)
	//是复杂类型的数组
	var tagbindsArray = make([]*pb.TagBindResp, 0)

	for _, v := range resp.TagBinds {
		tagbindsArray = append(tagbindsArray, &pb.TagBindResp{
			ID:       v.ID,
			TagID:    v.TagID,
			UserID:   v.UserID,
			ObjectID: v.ObjectID,
			Name:     v.Name,
			Color:    v.Color,
		})
	}
	pbresp := &pb.GetUserBindTagResponse{
		TagBinds: tagbindsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetViewBindNumEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetViewBindNumRequest)
		v := svc.GetViewBindNum(ctx, req)
		return v, nil
	}
}
func decodeGetViewBindNumRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetViewBindNumRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetViewBindNumRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeGetViewBindNumResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetViewBindNumResponse)
	pbresp := &pb.GetViewBindNumResponse{
		Num: resp.Num,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetLabelByIDEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetLabelByIDRequest)
		v := svc.GetLabelByID(ctx, req)
		return v, nil
	}
}
func decodeGetLabelByIDRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetLabelByIDRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetLabelByIDRequest{
		LabelID: r.LabelID,
		Context: xcontext,
	}, nil
}

func encodeGetLabelByIDResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetLabelByIDResponse)
	pbresp := &pb.GetLabelByIDResponse{
		Color:     resp.Color,
		CreateAt:  resp.CreateAt,
		CreatorID: resp.CreatorID,
		ID:        resp.ID,
		Name:      resp.Name,
		State:     resp.State,
		Type:      resp.Type,
		UpdateAt:  resp.UpdateAt,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetLabelByIDEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetLabelByIDRequest)
		v := svc.BatchGetLabelByID(ctx, req)
		return v, nil
	}
}
func decodeBatchGetLabelByIDRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetLabelByIDRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetLabelByIDRequest{
		LabelsID: r.LabelsID,
		Context:  xcontext,
	}, nil
}

func encodeBatchGetLabelByIDResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetLabelByIDResponse)
	//是复杂类型的数组
	var labelsArray = make([]*pb.GetLabelByIDResponse, 0)

	for _, v := range resp.Labels {
		labelsArray = append(labelsArray, &pb.GetLabelByIDResponse{
			ID:        v.ID,
			Name:      v.Name,
			CreatorID: v.CreatorID,
			Color:     v.Color,
			Type:      v.Type,
			State:     v.State,
			CreateAt:  v.CreateAt,
			UpdateAt:  v.UpdateAt,
		})
	}
	pbresp := &pb.BatchGetLabelByIDResponse{
		Labels: labelsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetTagBindsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetTagBindsRequest)
		v := svc.BatchGetTagBinds(ctx, req)
		return v, nil
	}
}
func decodeBatchGetTagBindsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetTagBindsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetTagBindsRequest{
		Context: xcontext,
		ObjID:   r.ObjID,
	}, nil
}

func encodeBatchGetTagBindsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetTagBindsResponse)
	//是复杂类型的数组
	var labelsArray = make([]*pb.TagBindResp, 0)

	for _, v := range resp.Labels {
		labelsArray = append(labelsArray, &pb.TagBindResp{
			ID:       v.ID,
			TagID:    v.TagID,
			UserID:   v.UserID,
			ObjectID: v.ObjectID,
			Name:     v.Name,
			Color:    v.Color,
		})
	}
	pbresp := &pb.BatchGetTagBindsResponse{
		Labels: labelsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
