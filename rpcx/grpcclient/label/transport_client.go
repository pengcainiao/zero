// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package label

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeGetLabelBindRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetLabelBindRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetLabelBindRequest{
		ObjectID: r.ObjectID,
		Context:  xcontext,
	}, nil
}

func decodeGetLabelBindResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetLabelBindResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var tagbindsArray = make([]*TagBindResp, 0)
	for _, v := range pbresp.TagBinds {
		tagbindsArray = append(tagbindsArray, &TagBindResp{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			TagID: v.TagID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			ObjectID: v.ObjectID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			Color: v.Color,
		})
	}

	return grpcbase.Response{
		Data: GetLabelBindResponse{
			TagBinds: tagbindsArray,
		},
	}, nil
}
func encodeGetUserBindTagRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserBindTagRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserBindTagRequest{
		UserID:  r.UserID,
		TagID:   r.TagID,
		Context: xcontext,
	}, nil
}

func decodeGetUserBindTagResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserBindTagResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var tagbindsArray = make([]*TagBindResp, 0)
	for _, v := range pbresp.TagBinds {
		tagbindsArray = append(tagbindsArray, &TagBindResp{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			TagID: v.TagID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			ObjectID: v.ObjectID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			Color: v.Color,
		})
	}

	return grpcbase.Response{
		Data: GetUserBindTagResponse{
			TagBinds: tagbindsArray,
		},
	}, nil
}
func encodeGetViewBindNumRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetViewBindNumRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetViewBindNumRequest{
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeGetViewBindNumResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetViewBindNumResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetViewBindNumResponse{
			Num: pbresp.Num,
		},
	}, nil
}
func encodeGetLabelByIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetLabelByIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetLabelByIDRequest{
		LabelID: r.LabelID,
		Context: xcontext,
	}, nil
}

func decodeGetLabelByIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetLabelByIDResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetLabelByIDResponse{
			Color:     pbresp.Color,
			CreateAt:  pbresp.CreateAt,
			CreatorID: pbresp.CreatorID,
			ID:        pbresp.ID,
			Name:      pbresp.Name,
			State:     pbresp.State,
			Type:      pbresp.Type,
			UpdateAt:  pbresp.UpdateAt,
		},
	}, nil
}
func encodeBatchGetLabelByIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetLabelByIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetLabelByIDRequest{
		LabelsID: r.LabelsID,
		Context:  xcontext,
	}, nil
}

func decodeBatchGetLabelByIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetLabelByIDResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var labelsArray = make([]*GetLabelByIDResponse, 0)
	for _, v := range pbresp.Labels {
		labelsArray = append(labelsArray, &GetLabelByIDResponse{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			Color: v.Color,
			//判断字段是否为复杂类型
			Type: v.Type,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UpdateAt: v.UpdateAt,
		})
	}

	return grpcbase.Response{
		Data: BatchGetLabelByIDResponse{
			Labels: labelsArray,
		},
	}, nil
}
func encodeBatchGetTagBindsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetTagBindsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetTagBindsRequest{
		Context: xcontext,
		ObjID:   r.ObjID,
	}, nil
}

func decodeBatchGetTagBindsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetTagBindsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var labelsArray = make([]*TagBindResp, 0)
	for _, v := range pbresp.Labels {
		labelsArray = append(labelsArray, &TagBindResp{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			TagID: v.TagID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			ObjectID: v.ObjectID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			Color: v.Color,
		})
	}

	return grpcbase.Response{
		Data: BatchGetTagBindsResponse{
			Labels: labelsArray,
		},
	}, nil
}
