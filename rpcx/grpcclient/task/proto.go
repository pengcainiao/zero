// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package task

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	GetTaskHandler                          func(ctx context.Context, req GetTaskRequest) grpcbase.Response
	GetTasksNameHandler                     func(ctx context.Context, req GetTasksNameRequest) grpcbase.Response
	GetTaskDispatchHandler                  func(ctx context.Context, req GetTaskDispatchRequest) grpcbase.Response
	GetTaskTakersHandler                    func(ctx context.Context, req GetTaskTakersRequest) grpcbase.Response
	GetPureTaskTakersHandler                func(ctx context.Context, req GetPureTaskTakersRequest) grpcbase.Response
	TaskExistsHandler                       func(ctx context.Context, req TaskExistsRequest) grpcbase.Response
	CreateGuideTaskHandler                  func(ctx context.Context, req CreateGuideTaskRequest) grpcbase.Response
	BatchQueryTaskHandler                   func(ctx context.Context, req BatchQueryTaskRequest) grpcbase.Response
	GetTaskRelevantTakersHandler            func(ctx context.Context, req GetTaskRelevantTakersRequest) grpcbase.Response
	UpdateTaskRelationHandler               func(ctx context.Context, req UpdateTaskRelationRequest) grpcbase.Response
	GetTaskShareHandler                     func(ctx context.Context, req GetTaskShareRequest) grpcbase.Response
	CreateUserInteractHandler               func(ctx context.Context, req CreateUserInteractRequest) grpcbase.Response
	UpdateUserInteractHandler               func(ctx context.Context, req UpdateUserInteractRequest) grpcbase.Response
	CreateTaskActiveDetailHandler           func(ctx context.Context, req CreateTaskActiveDetailRequest) grpcbase.Response
	UpdateProjectRelationHandler            func(ctx context.Context, req UpdateProjectRelationRequest) grpcbase.Response
	GetProjectMembersHandler                func(ctx context.Context, req GetProjectMembersRequest) grpcbase.Response
	GetProjectsNameHandler                  func(ctx context.Context, req GetProjectsNameRequest) grpcbase.Response
	GetUsersMorningAndEveningProgramHandler func(ctx context.Context, req GetUsersMorningAndEveningProgramRequest) grpcbase.Response
	GetTaskWithParentHandler                func(ctx context.Context, req GetTaskWithParentRequest) grpcbase.Response
	GetProjectHandler                       func(ctx context.Context, req GetProjectRequest) grpcbase.Response
	GetWorkspaceHandler                     func(ctx context.Context, req GetWorkspaceRequest) grpcbase.Response
	GetWorkspaceMembersHandler              func(ctx context.Context, req GetWorkspaceMembersRequest) grpcbase.Response
	GetWorkspaceListHandler                 func(ctx context.Context, req GetWorkspaceListRequest) grpcbase.Response
	GetTaskChildrenHandler                  func(ctx context.Context, req GetTaskChildrenRequest) grpcbase.Response
	GetWorkspaceFileSpaceHandler            func(ctx context.Context, req GetWorkspaceFileSpaceRequest) grpcbase.Response
	GetWorkspaceBindProjectHandler          func(ctx context.Context, req GetWorkspaceBindProjectRequest) grpcbase.Response
	GetWorkspaceExternalMemberHandler       func(ctx context.Context, req GetWorkspaceExternalMemberRequest) grpcbase.Response
	ExpireEquityUpdateHandler               func(ctx context.Context, req ExpireEquityUpdateRequest) grpcbase.Response
	UpdateWorkspaceLevelHandler             func(ctx context.Context, req UpdateWorkspaceLevelRequest) grpcbase.Response
	GetTaskWorkspaceHandler                 func(ctx context.Context, req GetTaskWorkspaceRequest) grpcbase.Response
	GetProjectWorkspaceHandler              func(ctx context.Context, req GetProjectWorkspaceRequest) grpcbase.Response
	AddMemberEquityUpdateHandler            func(ctx context.Context, req AddMemberEquityUpdateRequest) grpcbase.Response
	BatchGetWorkspaceDirectoryHandler       func(ctx context.Context, req BatchGetWorkspaceDirectoryRequest) grpcbase.Response
	GetWorkspaceMembersOfTaskHandler        func(ctx context.Context, req GetWorkspaceMembersOfTaskRequest) grpcbase.Response
	GetBatchWorkspaceInfoHandler            func(ctx context.Context, req GetBatchWorkspaceInfoRequest) grpcbase.Response
	CreateNewInviteHandler                  func(ctx context.Context, req CreateNewInviteRequest) grpcbase.Response
	GetObjectiveMemberHandler               func(ctx context.Context, req GetObjectiveMemberRequest) grpcbase.Response
	GetObjectiveHandler                     func(ctx context.Context, req GetObjectiveRequest) grpcbase.Response
	GetScreenHandler                        func(ctx context.Context, req GetScreenRequest) grpcbase.Response
	GetScreenMembersHandler                 func(ctx context.Context, req GetScreenMembersRequest) grpcbase.Response
	GetScreensByCardTypeHandler             func(ctx context.Context, req GetScreensByCardTypeRequest) grpcbase.Response
)

type Repository interface {
	GetTask(ctx context.Context, request GetTaskRequest) grpcbase.Response
	GetTasksName(ctx context.Context, request GetTasksNameRequest) grpcbase.Response
	GetTaskDispatch(ctx context.Context, request GetTaskDispatchRequest) grpcbase.Response
	GetTaskTakers(ctx context.Context, request GetTaskTakersRequest) grpcbase.Response
	GetPureTaskTakers(ctx context.Context, request GetPureTaskTakersRequest) grpcbase.Response
	TaskExists(ctx context.Context, request TaskExistsRequest) grpcbase.Response
	CreateGuideTask(ctx context.Context, request CreateGuideTaskRequest) grpcbase.Response
	BatchQueryTask(ctx context.Context, request BatchQueryTaskRequest) grpcbase.Response
	GetTaskRelevantTakers(ctx context.Context, request GetTaskRelevantTakersRequest) grpcbase.Response
	UpdateTaskRelation(ctx context.Context, request UpdateTaskRelationRequest) grpcbase.Response
	GetTaskShare(ctx context.Context, request GetTaskShareRequest) grpcbase.Response
	CreateUserInteract(ctx context.Context, request CreateUserInteractRequest) grpcbase.Response
	UpdateUserInteract(ctx context.Context, request UpdateUserInteractRequest) grpcbase.Response
	CreateTaskActiveDetail(ctx context.Context, request CreateTaskActiveDetailRequest) grpcbase.Response
	UpdateProjectRelation(ctx context.Context, request UpdateProjectRelationRequest) grpcbase.Response
	GetProjectMembers(ctx context.Context, request GetProjectMembersRequest) grpcbase.Response
	GetProjectsName(ctx context.Context, request GetProjectsNameRequest) grpcbase.Response
	GetUsersMorningAndEveningProgram(ctx context.Context, request GetUsersMorningAndEveningProgramRequest) grpcbase.Response
	GetTaskWithParent(ctx context.Context, request GetTaskWithParentRequest) grpcbase.Response
	GetProject(ctx context.Context, request GetProjectRequest) grpcbase.Response
	GetWorkspace(ctx context.Context, request GetWorkspaceRequest) grpcbase.Response
	GetWorkspaceMembers(ctx context.Context, request GetWorkspaceMembersRequest) grpcbase.Response
	GetWorkspaceList(ctx context.Context, request GetWorkspaceListRequest) grpcbase.Response
	GetTaskChildren(ctx context.Context, request GetTaskChildrenRequest) grpcbase.Response
	GetWorkspaceFileSpace(ctx context.Context, request GetWorkspaceFileSpaceRequest) grpcbase.Response
	GetWorkspaceBindProject(ctx context.Context, request GetWorkspaceBindProjectRequest) grpcbase.Response
	GetWorkspaceExternalMember(ctx context.Context, request GetWorkspaceExternalMemberRequest) grpcbase.Response
	ExpireEquityUpdate(ctx context.Context, request ExpireEquityUpdateRequest) grpcbase.Response
	UpdateWorkspaceLevel(ctx context.Context, request UpdateWorkspaceLevelRequest) grpcbase.Response
	GetTaskWorkspace(ctx context.Context, request GetTaskWorkspaceRequest) grpcbase.Response
	GetProjectWorkspace(ctx context.Context, request GetProjectWorkspaceRequest) grpcbase.Response
	AddMemberEquityUpdate(ctx context.Context, request AddMemberEquityUpdateRequest) grpcbase.Response
	BatchGetWorkspaceDirectory(ctx context.Context, request BatchGetWorkspaceDirectoryRequest) grpcbase.Response
	GetWorkspaceMembersOfTask(ctx context.Context, request GetWorkspaceMembersOfTaskRequest) grpcbase.Response
	GetBatchWorkspaceInfo(ctx context.Context, request GetBatchWorkspaceInfoRequest) grpcbase.Response
	CreateNewInvite(ctx context.Context, request CreateNewInviteRequest) grpcbase.Response
	GetObjectiveMember(ctx context.Context, request GetObjectiveMemberRequest) grpcbase.Response
	GetObjective(ctx context.Context, request GetObjectiveRequest) grpcbase.Response
	GetScreen(ctx context.Context, request GetScreenRequest) grpcbase.Response
	GetScreenMembers(ctx context.Context, request GetScreenMembersRequest) grpcbase.Response
	GetScreensByCardType(ctx context.Context, request GetScreensByCardTypeRequest) grpcbase.Response
}

type AddMemberEquityUpdateRequest struct {
	TaskTakerNum int64        `json:"task_taker_num,omitempty"`
	WorkspaceNum int64        `json:"workspace_num,omitempty"`
	ProjectNum   int64        `json:"project_num,omitempty"`
	Context      *UserContext `json:"context,omitempty"`
}

func (s AddMemberEquityUpdateRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type AddMemberEquityUpdateResponse struct {
	Result bool `json:"result,omitempty"`
}

func (s AddMemberEquityUpdateResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetWorkspaceDirectoryRequest struct {
	WorkspaceDirectoryID []string     `json:"workspace_directory_id,omitempty"`
	Context              *UserContext `json:"context,omitempty"`
}

func (s BatchGetWorkspaceDirectoryRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchGetWorkspaceDirectoryResponse struct {
	WorkspaceDirectory []*WorkspaceDirectory `json:"workspace_directory,omitempty"`
}

func (s BatchGetWorkspaceDirectoryResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryTaskInfo struct {
	TaskID     string `json:"task_id,omitempty"`
	Title      string `json:"title,omitempty"`
	MatterType int32  `json:"matter_type,omitempty"`
	Creator    string `json:"creator,omitempty"`
}

func (s BatchQueryTaskInfo) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryTaskRequest struct {
	RefTaskID []string     `json:"ref_task_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s BatchQueryTaskRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryTaskResponse struct {
	Tasks []*BatchQueryTaskInfo `json:"tasks,omitempty"`
}

func (s BatchQueryTaskResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateGuideTaskRequest struct {
	TakerID  string       `json:"taker_id,omitempty"`
	NickName string       `json:"nick_name,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s CreateGuideTaskRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateNewInviteRequest struct {
	RefID      string            `json:"ref_id,omitempty"`
	RefType    string            `json:"ref_type,omitempty"`
	ContentMap map[string]string `json:"content_map,omitempty"`
	Context    *UserContext      `json:"context,omitempty"`
}

func (s CreateNewInviteRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateTaskActiveDetailRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Action  int64        `json:"action,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s CreateTaskActiveDetailRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CreateUserInteractRequest struct {
	TaskID        string       `json:"task_id,omitempty"`
	TakersID      []string     `json:"takers_id,omitempty"`
	DefIsInteract bool         `json:"def_is_interact,omitempty"`
	Context       *UserContext `json:"context,omitempty"`
}

func (s CreateUserInteractRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ExpireEquityUpdateRequest struct {
	ProjectLimitNum   int64        `json:"project_limit_num,omitempty"`
	ProjectState      int32        `json:"project_state,omitempty"`
	UserID            string       `json:"user_id,omitempty"`
	WorkspaceLimitNum int64        `json:"workspace_limit_num,omitempty"`
	WorkspaceState    int32        `json:"workspace_state,omitempty"`
	Context           *UserContext `json:"context,omitempty"`
}

func (s ExpireEquityUpdateRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ExpireEquityUpdateResponse struct {
	Result bool `json:"result,omitempty"`
}

func (s ExpireEquityUpdateResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBatchWorkspaceInfoRequest struct {
	WorkspaceID string       `json:"workspace_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetBatchWorkspaceInfoRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetBatchWorkspaceInfoResponse struct {
	Workspace []*Workspace `json:"workspace,omitempty"`
}

func (s GetBatchWorkspaceInfoResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetObjectiveMemberRequest struct {
	ObjectiveID string       `json:"objective_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetObjectiveMemberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetObjectiveMemberResponse struct {
	Member []*ObjectiveMember `json:"member,omitempty"`
}

func (s GetObjectiveMemberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetObjectiveRequest struct {
	ObjectiveID string       `json:"objective_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetObjectiveRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetObjectiveResponse struct {
	ObjectiveID string `json:"objective_id,omitempty"`
	Title       string `json:"title,omitempty"`
	Detail      string `json:"detail,omitempty"`
	Level       int32  `json:"level,omitempty"`
	State       int32  `json:"state,omitempty"`
	OriginType  int32  `json:"origin_type,omitempty"`
	OriginID    string `json:"origin_id,omitempty"`
	CreatorID   string `json:"creator_id,omitempty"`
	Schedule    int32  `json:"schedule,omitempty"`
	AffectedUid string `json:"affected_uid,omitempty"`
	CompleteAt  int64  `json:"complete_at,omitempty"`
}

func (s GetObjectiveResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectMembersRequest struct {
	ProjectID string       `json:"project_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetProjectMembersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectMembersResponse struct {
	Members     []*ProjectMember `json:"members,omitempty"`
	WorkspaceID string           `json:"workspace_id,omitempty"`
}

func (s GetProjectMembersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectRequest struct {
	Context   *UserContext `json:"context,omitempty"`
	ProjectID string       `json:"project_id,omitempty"`
}

func (s GetProjectRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectResponse struct {
	ProjectID   string `json:"project_id,omitempty"`
	ProjectName string `json:"project_name,omitempty"`
	ProjectDesc string `json:"project_desc,omitempty"`
	TargetTime  int64  `json:"target_time,omitempty"`
	CreatorID   string `json:"creator_id,omitempty"`
	CreateAt    int64  `json:"create_at,omitempty"`
	IsArchive   bool   `json:"is_archive,omitempty"`
}

func (s GetProjectResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectWorkspaceRequest struct {
	ProjectID string       `json:"project_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetProjectWorkspaceRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectWorkspaceResponse struct {
	WorkspaceID      string `json:"workspace_id,omitempty"`
	CreatorID        string `json:"creator_id,omitempty"`
	WsType           int64  `json:"ws_type,omitempty"`
	Level            int64  `json:"level,omitempty"`
	ExpiredAt        int64  `json:"expired_at,omitempty"`
	ProjectCreatorID string `json:"project_creator_id,omitempty"`
}

func (s GetProjectWorkspaceResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectsNameRequest struct {
	ProjectID string       `json:"project_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetProjectsNameRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetProjectsNameResponse struct {
	Data map[string]string `json:"data,omitempty"`
}

func (s GetProjectsNameResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetPureTaskTakersRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	TakerID string       `json:"taker_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetPureTaskTakersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetPureTaskTakersResponse struct {
	Takers []*TaskTaker `json:"takers,omitempty"`
}

func (s GetPureTaskTakersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreenMembersRequest struct {
	ScreenID string       `json:"screen_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetScreenMembersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreenMembersResponse struct {
	Members []string `json:"members,omitempty"`
}

func (s GetScreenMembersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreenRequest struct {
	ScreenID string       `json:"screen_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetScreenRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreenResponse struct {
	ScreenID     string `json:"screen_id,omitempty"`
	Name         string `json:"name,omitempty"`
	LocationType int32  `json:"location_type,omitempty"`
	WorkspaceID  string `json:"workspace_id,omitempty"`
	ProjectID    string `json:"project_id,omitempty"`
	Type         int32  `json:"type,omitempty"`
	State        int32  `json:"state,omitempty"`
	CreatorID    string `json:"creator_id,omitempty"`
}

func (s GetScreenResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreensByCardTypeRequest struct {
	CardType int32        `json:"card_type,omitempty"`
	RefID    string       `json:"ref_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetScreensByCardTypeRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetScreensByCardTypeResponse struct {
	Data []*GetScreenResponse `json:"data,omitempty"`
}

func (s GetScreensByCardTypeResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskChildrenRequest struct {
	TaskID   string       `json:"task_id,omitempty"`
	ParentID string       `json:"parent_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetTaskChildrenRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskChildrenResponse struct {
	TaskChildren []*TaskChildren `json:"task_children,omitempty"`
}

func (s GetTaskChildrenResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskDispatchRequest struct {
	DispatchID string       `json:"dispatch_id,omitempty"`
	RefTaskID  string       `json:"ref_task_id,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s GetTaskDispatchRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskDispatchResponse struct {
	DispatchID       string           `json:"dispatch_id,omitempty"`
	RefTaskID        string           `json:"ref_task_id,omitempty"`
	CreatorID        string           `json:"creator_id,omitempty"`
	TakerID          string           `json:"taker_id,omitempty"`
	Title            string           `json:"title,omitempty"`
	MatterType       int32            `json:"matter_type,omitempty"`
	Identity         int32            `json:"identity,omitempty"`
	State            int32            `json:"state,omitempty"`
	PersonalState    int32            `json:"personal_state,omitempty"`
	OperateState     int32            `json:"operate_state,omitempty"`
	StartTime        int64            `json:"start_time,omitempty"`
	EndTime          int64            `json:"end_time,omitempty"`
	ExecuteAt        int64            `json:"execute_at,omitempty"`
	PersonalRemindAt map[string]int64 `json:"personal_remind_at,omitempty"`
	FinishTime       int64            `json:"finish_time,omitempty"`
	CreateAt         int64            `json:"create_at,omitempty"`
}

func (s GetTaskDispatchResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskRelevantTakersRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetTaskRelevantTakersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskRelevantTakersResponse struct {
	Takers []*RelevantTaker `json:"takers,omitempty"`
}

func (s GetTaskRelevantTakersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetTaskRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskResponse struct {
	TaskID           string          `json:"task_id,omitempty"`
	Title            string          `json:"title,omitempty"`
	Detail           string          `json:"detail,omitempty"`
	MatterType       int32           `json:"matter_type,omitempty"`
	StartTime        int64           `json:"start_time,omitempty"`
	StartTimeFullDay int32           `json:"start_time_full_day,omitempty"`
	EndTime          int64           `json:"end_time,omitempty"`
	EndTimeFullDay   int32           `json:"end_time_full_day,omitempty"`
	ExecuteAddr      string          `json:"execute_addr,omitempty"`
	RemindAt         *RemindAt       `json:"remind_at,omitempty"`
	RepeatType       int32           `json:"repeat_type,omitempty"`
	EndRepeatAt      int64           `json:"end_repeat_at,omitempty"`
	Widget           map[string]bool `json:"widget,omitempty"`
	Category         int32           `json:"category,omitempty"`
	ParentID         string          `json:"parent_id,omitempty"`
	ProjectID        string          `json:"project_id,omitempty"`
	CreatorID        string          `json:"creator_id,omitempty"`
	CreateAt         int64           `json:"create_at,omitempty"`
	ProjectCreator   string          `json:"project_creator,omitempty"`
}

func (s GetTaskResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskShareRequest struct {
	TaskID      string       `json:"task_id,omitempty"`
	ShareUserID string       `json:"share_user_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetTaskShareRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskShareResponse struct {
	CreatorID   string `json:"creator_id,omitempty"`
	ShareUserID string `json:"share_user_id,omitempty"`
	Status      bool   `json:"status,omitempty"`
}

func (s GetTaskShareResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskTakersRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	TakerID string       `json:"taker_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetTaskTakersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskTakersResponse struct {
	TaskID           string       `json:"task_id,omitempty"`
	Title            string       `json:"title,omitempty"`
	Detail           string       `json:"detail,omitempty"`
	MatterType       int32        `json:"matter_type,omitempty"`
	StartTime        int64        `json:"start_time,omitempty"`
	StartTimeFullDay int32        `json:"start_time_full_day,omitempty"`
	EndTime          int64        `json:"end_time,omitempty"`
	EndTimeFullDay   int32        `json:"end_time_full_day,omitempty"`
	RemindAt         *RemindAt    `json:"remind_at,omitempty"`
	RepeatType       int32        `json:"repeat_type,omitempty"`
	EndRepeatAt      int64        `json:"end_repeat_at,omitempty"`
	ExecuteAddr      string       `json:"execute_addr,omitempty"`
	CreatorID        string       `json:"creator_id,omitempty"`
	Category         int32        `json:"category,omitempty"`
	ProjectID        string       `json:"project_id,omitempty"`
	Takers           []*TaskTaker `json:"takers,omitempty"`
	WorkspaceID      string       `json:"workspace_id,omitempty"`
}

func (s GetTaskTakersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskWithParentRequest struct {
	MatterId string       `json:"matter_id,omitempty"`
	UserID   string       `json:"user_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s GetTaskWithParentRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskWithParentResponse struct {
	ParentTaskConfigs []*TaskConfigResp `json:"parent_task_configs,omitempty"`
	TaskResp          *TaskResp         `json:"task_resp,omitempty"`
}

func (s GetTaskWithParentResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskWorkspaceRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetTaskWorkspaceRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskWorkspaceResponse struct {
	WorkspaceID         string `json:"workspace_id,omitempty"`
	CreatorID           string `json:"creator_id,omitempty"`
	WsType              int64  `json:"ws_type,omitempty"`
	Level               int64  `json:"level,omitempty"`
	ExpiredAt           int64  `json:"expired_at,omitempty"`
	TaskCreatorID       string `json:"task_creator_id,omitempty"`
	TaskParentCreatorID string `json:"task_parent_creator_id,omitempty"`
}

func (s GetTaskWorkspaceResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTasksNameRequest struct {
	RefTaskID string       `json:"ref_task_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s GetTasksNameRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTasksNameResponse struct {
	Data map[string]string `json:"data,omitempty"`
}

func (s GetTasksNameResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersMorningAndEveningProgramRequest struct {
	UserId  string       `json:"user_id,omitempty"`
	Type    int32        `json:"type,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetUsersMorningAndEveningProgramRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetUsersMorningAndEveningProgramResponse struct {
	Completed  int32    `json:"completed,omitempty"`
	Incomplete int32    `json:"incomplete,omitempty"`
	Id         string   `json:"id,omitempty"`
	Titles     []string `json:"titles,omitempty"`
}

func (s GetUsersMorningAndEveningProgramResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceBindProjectRequest struct {
	WorkspaceID string       `json:"workspace_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetWorkspaceBindProjectRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceBindProjectResponse struct {
	ProjectIDs []string `json:"project_i_ds,omitempty"`
}

func (s GetWorkspaceBindProjectResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceExternalMemberRequest struct {
	WorkspaceID string       `json:"workspace_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetWorkspaceExternalMemberRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceExternalMemberResponse struct {
	ExternalMemberIDs []string `json:"external_member_i_ds,omitempty"`
}

func (s GetWorkspaceExternalMemberResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceFileSpaceRequest struct {
	WorkspaceID string       `json:"workspace_id,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s GetWorkspaceFileSpaceRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceFileSpaceResponse struct {
	TotalSpace         int64 `json:"total_space,omitempty"`
	AvailableSpace     int64 `json:"available_space,omitempty"`
	ProcessFileSpace   int64 `json:"process_file_space,omitempty"`
	KnowledgeBaseSpace int64 `json:"knowledge_base_space,omitempty"`
	OtherSpace         int64 `json:"other_space,omitempty"`
}

func (s GetWorkspaceFileSpaceResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceListRequest struct {
	UserID  string       `json:"user_id,omitempty"`
	WsType  int32        `json:"ws_type,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetWorkspaceListRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceListResponse struct {
	Workspaces []*Workspace `json:"workspaces,omitempty"`
}

func (s GetWorkspaceListResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceMembersOfTaskRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetWorkspaceMembersOfTaskRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceMembersOfTaskResponse struct {
	Members []string `json:"members,omitempty"`
}

func (s GetWorkspaceMembersOfTaskResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceMembersRequest struct {
	Context     *UserContext `json:"context,omitempty"`
	WorkspaceID string       `json:"workspace_id,omitempty"`
}

func (s GetWorkspaceMembersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceMembersResponse struct {
	WorkspaceID string             `json:"workspace_id,omitempty"`
	Name        string             `json:"name,omitempty"`
	Level       int32              `json:"level,omitempty"`
	State       int32              `json:"state,omitempty"`
	CreatorID   string             `json:"creator_id,omitempty"`
	CreateAt    int64              `json:"create_at,omitempty"`
	Members     []*WorkspaceMember `json:"members,omitempty"`
}

func (s GetWorkspaceMembersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceRequest struct {
	Context     *UserContext `json:"context,omitempty"`
	WorkspaceID string       `json:"workspace_id,omitempty"`
}

func (s GetWorkspaceRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetWorkspaceResponse struct {
	WorkspaceID string `json:"workspace_id,omitempty"`
	Name        string `json:"name,omitempty"`
	Level       int32  `json:"level,omitempty"`
	State       int32  `json:"state,omitempty"`
	CreatorID   string `json:"creator_id,omitempty"`
	CreateAt    int64  `json:"create_at,omitempty"`
	WsDesc      string `json:"ws_desc,omitempty"`
}

func (s GetWorkspaceResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ObjectiveMember struct {
	ObjectiveID string `json:"objective_id,omitempty"`
	CreatorID   string `json:"creator_id,omitempty"`
	UserID      string `json:"user_id,omitempty"`
	InviteID    string `json:"invite_id,omitempty"`
	State       int32  `json:"state,omitempty"`
}

func (s ObjectiveMember) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ProjectMember struct {
	UserID           string `json:"user_id,omitempty"`
	InviteID         string `json:"invite_id,omitempty"`
	InviteType       string `json:"invite_type,omitempty"`
	State            int32  `json:"state,omitempty"`
	AcceptAt         int64  `json:"accept_at,omitempty"`
	RefuseAt         int64  `json:"refuse_at,omitempty"`
	CreateAt         int64  `json:"create_at,omitempty"`
	UpdateAt         int64  `json:"update_at,omitempty"`
	IsExternalMember bool   `json:"is_external_member,omitempty"`
}

func (s ProjectMember) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RelevantTaker struct {
	TakerID  string `json:"taker_id,omitempty"`
	NickName string `json:"nick_name,omitempty"`
	Avatar   string `json:"avatar,omitempty"`
}

func (s RelevantTaker) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RemindAt struct {
	StartRemind   []int64 `json:"start_remind,omitempty"`
	EndRemind     []int64 `json:"end_remind,omitempty"`
	AloneRemind   []int64 `json:"alone_remind,omitempty"`
	MaxAloneTotal int32   `json:"max_alone_total,omitempty"`
}

func (s RemindAt) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskChildren struct {
	ID         string `json:"id,omitempty"`
	CreatorID  string `json:"creator_id,omitempty"`
	MatterType int32  `json:"matter_type,omitempty"`
}

func (s TaskChildren) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskConfigResp struct {
	ID                  string `json:"id,omitempty"`
	MaxTakerTotal       int32  `json:"max_taker_total,omitempty"`
	Category            int32  `json:"category,omitempty"`
	ParentId            string `json:"parent_id,omitempty"`
	Sort                int32  `json:"sort,omitempty"`
	IsCheckbox          int32  `json:"is_checkbox,omitempty"`
	RefMeetingId        string `json:"ref_meeting_id,omitempty"`
	ProjectId           string `json:"project_id,omitempty"`
	ImportProjectUserId string `json:"import_project_user_id,omitempty"`
	ImportProjectAt     string `json:"import_project_at,omitempty"`
	Score               int32  `json:"score,omitempty"`
	LastActiveAt        int32  `json:"last_active_at,omitempty"`
	RepeatChangeId      int32  `json:"repeat_change_id,omitempty"`
	CreatorId           string `json:"creator_id,omitempty"`
}

func (s TaskConfigResp) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskExistsRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s TaskExistsRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskExistsResponse struct {
	Exists bool `json:"exists,omitempty"`
}

func (s TaskExistsResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskResp struct {
	TaskID     string    `json:"task_id,omitempty"`
	Title      string    `json:"title,omitempty"`
	Detail     string    `json:"detail,omitempty"`
	MatterType int32     `json:"matter_type,omitempty"`
	Category   int32     `json:"category,omitempty"`
	ParentID   string    `json:"parent_id,omitempty"`
	ProjectID  string    `json:"project_id,omitempty"`
	CreatorID  string    `json:"creator_id,omitempty"`
	RemindAt   *RemindAt `json:"remind_at,omitempty"`
}

func (s TaskResp) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskTaker struct {
	DispatchID    string `json:"dispatch_id,omitempty"`
	TakerID       string `json:"taker_id,omitempty"`
	InviteID      string `json:"invite_id,omitempty"`
	InviteType    string `json:"invite_type,omitempty"`
	Identity      int32  `json:"identity,omitempty"`
	State         int32  `json:"state,omitempty"`
	PersonalState int32  `json:"personal_state,omitempty"`
	OperateState  int32  `json:"operate_state,omitempty"`
	IsAdmin       bool   `json:"is_admin,omitempty"`
	Status        int32  `json:"status,omitempty"`
	AcceptAt      int64  `json:"accept_at,omitempty"`
	FinishTime    int64  `json:"finish_time,omitempty"`
	RevokeAt      int64  `json:"revoke_at,omitempty"`
	CancelAt      int64  `json:"cancel_at,omitempty"`
	CreateAt      int64  `json:"create_at,omitempty"`
	UpdateAt      int64  `json:"update_at,omitempty"`
}

func (s TaskTaker) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateProjectRelationRequest struct {
	ProjectID string       `json:"project_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s UpdateProjectRelationRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateTaskRelationRequest struct {
	UpdateType string       `json:"update_type,omitempty"`
	Body       string       `json:"body,omitempty"`
	Context    *UserContext `json:"context,omitempty"`
}

func (s UpdateTaskRelationRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateUserInteractRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s UpdateUserInteractRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateWorkspaceLevelRequest struct {
	WorkspaceID string       `json:"workspace_id,omitempty"`
	ExpireAt    int64        `json:"expire_at,omitempty"`
	Level       int64        `json:"level,omitempty"`
	Context     *UserContext `json:"context,omitempty"`
}

func (s UpdateWorkspaceLevelRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateWorkspaceLevelResponse struct {
	Result bool `json:"result,omitempty"`
}

func (s UpdateWorkspaceLevelResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Workspace struct {
	ID        string `json:"id,omitempty"`
	Name      string `json:"name,omitempty"`
	CreatorID string `json:"creator_id,omitempty"`
	WsType    int32  `json:"ws_type,omitempty"`
	Level     int32  `json:"level,omitempty"`
	CreateAt  int64  `json:"create_at,omitempty"`
	State     int32  `json:"state,omitempty"`
}

func (s Workspace) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type WorkspaceDirectory struct {
	ID          string `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	ParentID    string `json:"parent_id,omitempty"`
	WorkSpaceID string `json:"work_space_id,omitempty"`
	CreatorID   string `json:"creator_id,omitempty"`
	CreateAt    int64  `json:"create_at,omitempty"`
	UpdateAt    int64  `json:"update_at,omitempty"`
	IsDefault   int32  `json:"is_default,omitempty"`
}

func (s WorkspaceDirectory) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type WorkspaceMember struct {
	ID            string `json:"id,omitempty"`
	UserID        string `json:"user_id,omitempty"`
	InviteID      string `json:"invite_id,omitempty"`
	InviteType    string `json:"invite_type,omitempty"`
	Identify      int32  `json:"identify,omitempty"`
	State         int32  `json:"state,omitempty"`
	AcceptAt      int64  `json:"accept_at,omitempty"`
	RefuseAt      int64  `json:"refuse_at,omitempty"`
	RevokeAt      int64  `json:"revoke_at,omitempty"`
	ExitAt        int64  `json:"exit_at,omitempty"`
	CreateAt      int64  `json:"create_at,omitempty"`
	MemberType    int32  `json:"member_type,omitempty"`
	ApprovalAt    int64  `json:"approval_at,omitempty"`
	ApprovalState int32  `json:"approval_state,omitempty"`
}

func (s WorkspaceMember) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建task的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) GetTask(ctx context.Context, req GetTaskRequest) grpcbase.Response {
	if GetTaskHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTask", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskHandler(ctx, req.(GetTaskRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTasksName(ctx context.Context, req GetTasksNameRequest) grpcbase.Response {
	if GetTasksNameHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTasksName", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTasksNameHandler(ctx, req.(GetTasksNameRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskDispatch(ctx context.Context, req GetTaskDispatchRequest) grpcbase.Response {
	if GetTaskDispatchHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskDispatch", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskDispatchHandler(ctx, req.(GetTaskDispatchRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskTakers(ctx context.Context, req GetTaskTakersRequest) grpcbase.Response {
	if GetTaskTakersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskTakers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskTakersHandler(ctx, req.(GetTaskTakersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetPureTaskTakers(ctx context.Context, req GetPureTaskTakersRequest) grpcbase.Response {
	if GetPureTaskTakersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetPureTaskTakers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetPureTaskTakersHandler(ctx, req.(GetPureTaskTakersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) TaskExists(ctx context.Context, req TaskExistsRequest) grpcbase.Response {
	if TaskExistsHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/TaskExists", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return TaskExistsHandler(ctx, req.(TaskExistsRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateGuideTask(ctx context.Context, req CreateGuideTaskRequest) grpcbase.Response {
	if CreateGuideTaskHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/CreateGuideTask", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateGuideTaskHandler(ctx, req.(CreateGuideTaskRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryTask(ctx context.Context, req BatchQueryTaskRequest) grpcbase.Response {
	if BatchQueryTaskHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/BatchQueryTask", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryTaskHandler(ctx, req.(BatchQueryTaskRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskRelevantTakers(ctx context.Context, req GetTaskRelevantTakersRequest) grpcbase.Response {
	if GetTaskRelevantTakersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskRelevantTakers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskRelevantTakersHandler(ctx, req.(GetTaskRelevantTakersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateTaskRelation(ctx context.Context, req UpdateTaskRelationRequest) grpcbase.Response {
	if UpdateTaskRelationHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/UpdateTaskRelation", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateTaskRelationHandler(ctx, req.(UpdateTaskRelationRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskShare(ctx context.Context, req GetTaskShareRequest) grpcbase.Response {
	if GetTaskShareHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskShare", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskShareHandler(ctx, req.(GetTaskShareRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateUserInteract(ctx context.Context, req CreateUserInteractRequest) grpcbase.Response {
	if CreateUserInteractHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/CreateUserInteract", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateUserInteractHandler(ctx, req.(CreateUserInteractRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateUserInteract(ctx context.Context, req UpdateUserInteractRequest) grpcbase.Response {
	if UpdateUserInteractHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/UpdateUserInteract", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateUserInteractHandler(ctx, req.(UpdateUserInteractRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateTaskActiveDetail(ctx context.Context, req CreateTaskActiveDetailRequest) grpcbase.Response {
	if CreateTaskActiveDetailHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/CreateTaskActiveDetail", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateTaskActiveDetailHandler(ctx, req.(CreateTaskActiveDetailRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateProjectRelation(ctx context.Context, req UpdateProjectRelationRequest) grpcbase.Response {
	if UpdateProjectRelationHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/UpdateProjectRelation", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateProjectRelationHandler(ctx, req.(UpdateProjectRelationRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetProjectMembers(ctx context.Context, req GetProjectMembersRequest) grpcbase.Response {
	if GetProjectMembersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetProjectMembers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetProjectMembersHandler(ctx, req.(GetProjectMembersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetProjectsName(ctx context.Context, req GetProjectsNameRequest) grpcbase.Response {
	if GetProjectsNameHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetProjectsName", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetProjectsNameHandler(ctx, req.(GetProjectsNameRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetUsersMorningAndEveningProgram(ctx context.Context, req GetUsersMorningAndEveningProgramRequest) grpcbase.Response {
	if GetUsersMorningAndEveningProgramHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetUsersMorningAndEveningProgram", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetUsersMorningAndEveningProgramHandler(ctx, req.(GetUsersMorningAndEveningProgramRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskWithParent(ctx context.Context, req GetTaskWithParentRequest) grpcbase.Response {
	if GetTaskWithParentHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskWithParent", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskWithParentHandler(ctx, req.(GetTaskWithParentRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetProject(ctx context.Context, req GetProjectRequest) grpcbase.Response {
	if GetProjectHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetProject", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetProjectHandler(ctx, req.(GetProjectRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspace(ctx context.Context, req GetWorkspaceRequest) grpcbase.Response {
	if GetWorkspaceHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspace", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceHandler(ctx, req.(GetWorkspaceRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceMembers(ctx context.Context, req GetWorkspaceMembersRequest) grpcbase.Response {
	if GetWorkspaceMembersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceMembers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceMembersHandler(ctx, req.(GetWorkspaceMembersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceList(ctx context.Context, req GetWorkspaceListRequest) grpcbase.Response {
	if GetWorkspaceListHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceList", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceListHandler(ctx, req.(GetWorkspaceListRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskChildren(ctx context.Context, req GetTaskChildrenRequest) grpcbase.Response {
	if GetTaskChildrenHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskChildren", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskChildrenHandler(ctx, req.(GetTaskChildrenRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceFileSpace(ctx context.Context, req GetWorkspaceFileSpaceRequest) grpcbase.Response {
	if GetWorkspaceFileSpaceHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceFileSpace", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceFileSpaceHandler(ctx, req.(GetWorkspaceFileSpaceRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceBindProject(ctx context.Context, req GetWorkspaceBindProjectRequest) grpcbase.Response {
	if GetWorkspaceBindProjectHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceBindProject", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceBindProjectHandler(ctx, req.(GetWorkspaceBindProjectRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceExternalMember(ctx context.Context, req GetWorkspaceExternalMemberRequest) grpcbase.Response {
	if GetWorkspaceExternalMemberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceExternalMember", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceExternalMemberHandler(ctx, req.(GetWorkspaceExternalMemberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) ExpireEquityUpdate(ctx context.Context, req ExpireEquityUpdateRequest) grpcbase.Response {
	if ExpireEquityUpdateHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/ExpireEquityUpdate", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return ExpireEquityUpdateHandler(ctx, req.(ExpireEquityUpdateRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateWorkspaceLevel(ctx context.Context, req UpdateWorkspaceLevelRequest) grpcbase.Response {
	if UpdateWorkspaceLevelHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/UpdateWorkspaceLevel", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateWorkspaceLevelHandler(ctx, req.(UpdateWorkspaceLevelRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskWorkspace(ctx context.Context, req GetTaskWorkspaceRequest) grpcbase.Response {
	if GetTaskWorkspaceHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetTaskWorkspace", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskWorkspaceHandler(ctx, req.(GetTaskWorkspaceRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetProjectWorkspace(ctx context.Context, req GetProjectWorkspaceRequest) grpcbase.Response {
	if GetProjectWorkspaceHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetProjectWorkspace", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetProjectWorkspaceHandler(ctx, req.(GetProjectWorkspaceRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) AddMemberEquityUpdate(ctx context.Context, req AddMemberEquityUpdateRequest) grpcbase.Response {
	if AddMemberEquityUpdateHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/AddMemberEquityUpdate", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return AddMemberEquityUpdateHandler(ctx, req.(AddMemberEquityUpdateRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchGetWorkspaceDirectory(ctx context.Context, req BatchGetWorkspaceDirectoryRequest) grpcbase.Response {
	if BatchGetWorkspaceDirectoryHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/BatchGetWorkspaceDirectory", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchGetWorkspaceDirectoryHandler(ctx, req.(BatchGetWorkspaceDirectoryRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetWorkspaceMembersOfTask(ctx context.Context, req GetWorkspaceMembersOfTaskRequest) grpcbase.Response {
	if GetWorkspaceMembersOfTaskHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetWorkspaceMembersOfTask", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetWorkspaceMembersOfTaskHandler(ctx, req.(GetWorkspaceMembersOfTaskRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetBatchWorkspaceInfo(ctx context.Context, req GetBatchWorkspaceInfoRequest) grpcbase.Response {
	if GetBatchWorkspaceInfoHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetBatchWorkspaceInfo", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetBatchWorkspaceInfoHandler(ctx, req.(GetBatchWorkspaceInfoRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) CreateNewInvite(ctx context.Context, req CreateNewInviteRequest) grpcbase.Response {
	if CreateNewInviteHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/CreateNewInvite", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CreateNewInviteHandler(ctx, req.(CreateNewInviteRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetObjectiveMember(ctx context.Context, req GetObjectiveMemberRequest) grpcbase.Response {
	if GetObjectiveMemberHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetObjectiveMember", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetObjectiveMemberHandler(ctx, req.(GetObjectiveMemberRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetObjective(ctx context.Context, req GetObjectiveRequest) grpcbase.Response {
	if GetObjectiveHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetObjective", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetObjectiveHandler(ctx, req.(GetObjectiveRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetScreen(ctx context.Context, req GetScreenRequest) grpcbase.Response {
	if GetScreenHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetScreen", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetScreenHandler(ctx, req.(GetScreenRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetScreenMembers(ctx context.Context, req GetScreenMembersRequest) grpcbase.Response {
	if GetScreenMembersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetScreenMembers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetScreenMembersHandler(ctx, req.(GetScreenMembersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetScreensByCardType(ctx context.Context, req GetScreensByCardTypeRequest) grpcbase.Response {
	if GetScreensByCardTypeHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.task/GetScreensByCardType", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetScreensByCardTypeHandler(ctx, req.(GetScreensByCardTypeRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
