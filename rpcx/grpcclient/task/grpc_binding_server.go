// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package task

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	getTask                          grpctransport.Handler
	getTasksName                     grpctransport.Handler
	getTaskDispatch                  grpctransport.Handler
	getTaskTakers                    grpctransport.Handler
	getPureTaskTakers                grpctransport.Handler
	taskExists                       grpctransport.Handler
	createGuideTask                  grpctransport.Handler
	batchQueryTask                   grpctransport.Handler
	getTaskRelevantTakers            grpctransport.Handler
	updateTaskRelation               grpctransport.Handler
	getTaskShare                     grpctransport.Handler
	createUserInteract               grpctransport.Handler
	updateUserInteract               grpctransport.Handler
	createTaskActiveDetail           grpctransport.Handler
	updateProjectRelation            grpctransport.Handler
	getProjectMembers                grpctransport.Handler
	getProjectsName                  grpctransport.Handler
	getUsersMorningAndEveningProgram grpctransport.Handler
	getTaskWithParent                grpctransport.Handler
	getProject                       grpctransport.Handler
	getWorkspace                     grpctransport.Handler
	getWorkspaceMembers              grpctransport.Handler
	getWorkspaceList                 grpctransport.Handler
	getTaskChildren                  grpctransport.Handler
	getWorkspaceFileSpace            grpctransport.Handler
	getWorkspaceBindProject          grpctransport.Handler
	getWorkspaceExternalMember       grpctransport.Handler
	expireEquityUpdate               grpctransport.Handler
	updateWorkspaceLevel             grpctransport.Handler
	getTaskWorkspace                 grpctransport.Handler
	getProjectWorkspace              grpctransport.Handler
	addMemberEquityUpdate            grpctransport.Handler
	batchGetWorkspaceDirectory       grpctransport.Handler
	getWorkspaceMembersOfTask        grpctransport.Handler
	getBatchWorkspaceInfo            grpctransport.Handler
	createNewInvite                  grpctransport.Handler
	getObjectiveMember               grpctransport.Handler
	getObjective                     grpctransport.Handler
	getScreen                        grpctransport.Handler
	getScreenMembers                 grpctransport.Handler
	getScreensByCardType             grpctransport.Handler
}

func (b *serverBinding) GetTask(ctx context.Context, req *pb.GetTaskRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTask receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTask.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTasksName(ctx context.Context, req *pb.GetTasksNameRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTasksName receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTasksName.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskDispatch(ctx context.Context, req *pb.GetTaskDispatchRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskDispatch receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskDispatch.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskTakers(ctx context.Context, req *pb.GetTaskTakersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskTakers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskTakers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetPureTaskTakers(ctx context.Context, req *pb.GetPureTaskTakersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetPureTaskTakers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getPureTaskTakers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) TaskExists(ctx context.Context, req *pb.TaskExistsRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TaskExists receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.taskExists.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateGuideTask(ctx context.Context, req *pb.CreateGuideTaskRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateGuideTask receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createGuideTask.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryTask(ctx context.Context, req *pb.BatchQueryTaskRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryTask receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryTask.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskRelevantTakers(ctx context.Context, req *pb.GetTaskRelevantTakersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskRelevantTakers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskRelevantTakers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateTaskRelation(ctx context.Context, req *pb.UpdateTaskRelationRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateTaskRelation receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateTaskRelation.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskShare(ctx context.Context, req *pb.GetTaskShareRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskShare receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskShare.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateUserInteract(ctx context.Context, req *pb.CreateUserInteractRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateUserInteract receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createUserInteract.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateUserInteract(ctx context.Context, req *pb.UpdateUserInteractRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUserInteract receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateUserInteract.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateTaskActiveDetail(ctx context.Context, req *pb.CreateTaskActiveDetailRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateTaskActiveDetail receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createTaskActiveDetail.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateProjectRelation(ctx context.Context, req *pb.UpdateProjectRelationRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateProjectRelation receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateProjectRelation.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetProjectMembers(ctx context.Context, req *pb.GetProjectMembersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetProjectMembers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getProjectMembers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetProjectsName(ctx context.Context, req *pb.GetProjectsNameRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetProjectsName receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getProjectsName.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetUsersMorningAndEveningProgram(ctx context.Context, req *pb.GetUsersMorningAndEveningProgramRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetUsersMorningAndEveningProgram receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getUsersMorningAndEveningProgram.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskWithParent(ctx context.Context, req *pb.GetTaskWithParentRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskWithParent receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskWithParent.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetProject(ctx context.Context, req *pb.GetProjectRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetProject receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getProject.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspace(ctx context.Context, req *pb.GetWorkspaceRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspace receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspace.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceMembers(ctx context.Context, req *pb.GetWorkspaceMembersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceMembers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceMembers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceList(ctx context.Context, req *pb.GetWorkspaceListRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceList receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceList.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskChildren(ctx context.Context, req *pb.GetTaskChildrenRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskChildren receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskChildren.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceFileSpace(ctx context.Context, req *pb.GetWorkspaceFileSpaceRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceFileSpace receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceFileSpace.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceBindProject(ctx context.Context, req *pb.GetWorkspaceBindProjectRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceBindProject receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceBindProject.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceExternalMember(ctx context.Context, req *pb.GetWorkspaceExternalMemberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceExternalMember receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceExternalMember.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) ExpireEquityUpdate(ctx context.Context, req *pb.ExpireEquityUpdateRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：ExpireEquityUpdate receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.expireEquityUpdate.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateWorkspaceLevel(ctx context.Context, req *pb.UpdateWorkspaceLevelRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateWorkspaceLevel receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateWorkspaceLevel.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskWorkspace(ctx context.Context, req *pb.GetTaskWorkspaceRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskWorkspace receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskWorkspace.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetProjectWorkspace(ctx context.Context, req *pb.GetProjectWorkspaceRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetProjectWorkspace receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getProjectWorkspace.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) AddMemberEquityUpdate(ctx context.Context, req *pb.AddMemberEquityUpdateRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：AddMemberEquityUpdate receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.addMemberEquityUpdate.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchGetWorkspaceDirectory(ctx context.Context, req *pb.BatchGetWorkspaceDirectoryRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchGetWorkspaceDirectory receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchGetWorkspaceDirectory.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetWorkspaceMembersOfTask(ctx context.Context, req *pb.GetWorkspaceMembersOfTaskRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetWorkspaceMembersOfTask receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getWorkspaceMembersOfTask.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetBatchWorkspaceInfo(ctx context.Context, req *pb.GetBatchWorkspaceInfoRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetBatchWorkspaceInfo receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getBatchWorkspaceInfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) CreateNewInvite(ctx context.Context, req *pb.CreateNewInviteRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateNewInvite receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createNewInvite.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetObjectiveMember(ctx context.Context, req *pb.GetObjectiveMemberRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetObjectiveMember receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getObjectiveMember.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetObjective(ctx context.Context, req *pb.GetObjectiveRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetObjective receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getObjective.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetScreen(ctx context.Context, req *pb.GetScreenRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetScreen receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getScreen.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetScreenMembers(ctx context.Context, req *pb.GetScreenMembersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetScreenMembers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getScreenMembers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetScreensByCardType(ctx context.Context, req *pb.GetScreensByCardTypeRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetScreensByCardType receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getScreensByCardType.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterTaskServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"getTask":                          b.getTask,
		"getTasksName":                     b.getTasksName,
		"getTaskDispatch":                  b.getTaskDispatch,
		"getTaskTakers":                    b.getTaskTakers,
		"getPureTaskTakers":                b.getPureTaskTakers,
		"taskExists":                       b.taskExists,
		"createGuideTask":                  b.createGuideTask,
		"batchQueryTask":                   b.batchQueryTask,
		"getTaskRelevantTakers":            b.getTaskRelevantTakers,
		"updateTaskRelation":               b.updateTaskRelation,
		"getTaskShare":                     b.getTaskShare,
		"createUserInteract":               b.createUserInteract,
		"updateUserInteract":               b.updateUserInteract,
		"createTaskActiveDetail":           b.createTaskActiveDetail,
		"updateProjectRelation":            b.updateProjectRelation,
		"getProjectMembers":                b.getProjectMembers,
		"getProjectsName":                  b.getProjectsName,
		"getUsersMorningAndEveningProgram": b.getUsersMorningAndEveningProgram,
		"getTaskWithParent":                b.getTaskWithParent,
		"getProject":                       b.getProject,
		"getWorkspace":                     b.getWorkspace,
		"getWorkspaceMembers":              b.getWorkspaceMembers,
		"getWorkspaceList":                 b.getWorkspaceList,
		"getTaskChildren":                  b.getTaskChildren,
		"getWorkspaceFileSpace":            b.getWorkspaceFileSpace,
		"getWorkspaceBindProject":          b.getWorkspaceBindProject,
		"getWorkspaceExternalMember":       b.getWorkspaceExternalMember,
		"expireEquityUpdate":               b.expireEquityUpdate,
		"updateWorkspaceLevel":             b.updateWorkspaceLevel,
		"getTaskWorkspace":                 b.getTaskWorkspace,
		"getProjectWorkspace":              b.getProjectWorkspace,
		"addMemberEquityUpdate":            b.addMemberEquityUpdate,
		"batchGetWorkspaceDirectory":       b.batchGetWorkspaceDirectory,
		"getWorkspaceMembersOfTask":        b.getWorkspaceMembersOfTask,
		"getBatchWorkspaceInfo":            b.getBatchWorkspaceInfo,
		"createNewInvite":                  b.createNewInvite,
		"getObjectiveMember":               b.getObjectiveMember,
		"getObjective":                     b.getObjective,
		"getScreen":                        b.getScreen,
		"getScreenMembers":                 b.getScreenMembers,
		"getScreensByCardType":             b.getScreensByCardType,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		getTask: grpcbase.CreateGRPCServer(
			makeGetTaskEndpoint(svc),
			decodeGetTaskRequest,
			encodeGetTaskResponse,
		),
		getTasksName: grpcbase.CreateGRPCServer(
			makeGetTasksNameEndpoint(svc),
			decodeGetTasksNameRequest,
			encodeGetTasksNameResponse,
		),
		getTaskDispatch: grpcbase.CreateGRPCServer(
			makeGetTaskDispatchEndpoint(svc),
			decodeGetTaskDispatchRequest,
			encodeGetTaskDispatchResponse,
		),
		getTaskTakers: grpcbase.CreateGRPCServer(
			makeGetTaskTakersEndpoint(svc),
			decodeGetTaskTakersRequest,
			encodeGetTaskTakersResponse,
		),
		getPureTaskTakers: grpcbase.CreateGRPCServer(
			makeGetPureTaskTakersEndpoint(svc),
			decodeGetPureTaskTakersRequest,
			encodeGetPureTaskTakersResponse,
		),
		taskExists: grpcbase.CreateGRPCServer(
			makeTaskExistsEndpoint(svc),
			decodeTaskExistsRequest,
			encodeTaskExistsResponse,
		),
		createGuideTask: grpcbase.CreateGRPCServer(
			makeCreateGuideTaskEndpoint(svc),
			decodeCreateGuideTaskRequest,
			encodeCreateGuideTaskResponse,
		),
		batchQueryTask: grpcbase.CreateGRPCServer(
			makeBatchQueryTaskEndpoint(svc),
			decodeBatchQueryTaskRequest,
			encodeBatchQueryTaskResponse,
		),
		getTaskRelevantTakers: grpcbase.CreateGRPCServer(
			makeGetTaskRelevantTakersEndpoint(svc),
			decodeGetTaskRelevantTakersRequest,
			encodeGetTaskRelevantTakersResponse,
		),
		updateTaskRelation: grpcbase.CreateGRPCServer(
			makeUpdateTaskRelationEndpoint(svc),
			decodeUpdateTaskRelationRequest,
			encodeUpdateTaskRelationResponse,
		),
		getTaskShare: grpcbase.CreateGRPCServer(
			makeGetTaskShareEndpoint(svc),
			decodeGetTaskShareRequest,
			encodeGetTaskShareResponse,
		),
		createUserInteract: grpcbase.CreateGRPCServer(
			makeCreateUserInteractEndpoint(svc),
			decodeCreateUserInteractRequest,
			encodeCreateUserInteractResponse,
		),
		updateUserInteract: grpcbase.CreateGRPCServer(
			makeUpdateUserInteractEndpoint(svc),
			decodeUpdateUserInteractRequest,
			encodeUpdateUserInteractResponse,
		),
		createTaskActiveDetail: grpcbase.CreateGRPCServer(
			makeCreateTaskActiveDetailEndpoint(svc),
			decodeCreateTaskActiveDetailRequest,
			encodeCreateTaskActiveDetailResponse,
		),
		updateProjectRelation: grpcbase.CreateGRPCServer(
			makeUpdateProjectRelationEndpoint(svc),
			decodeUpdateProjectRelationRequest,
			encodeUpdateProjectRelationResponse,
		),
		getProjectMembers: grpcbase.CreateGRPCServer(
			makeGetProjectMembersEndpoint(svc),
			decodeGetProjectMembersRequest,
			encodeGetProjectMembersResponse,
		),
		getProjectsName: grpcbase.CreateGRPCServer(
			makeGetProjectsNameEndpoint(svc),
			decodeGetProjectsNameRequest,
			encodeGetProjectsNameResponse,
		),
		getUsersMorningAndEveningProgram: grpcbase.CreateGRPCServer(
			makeGetUsersMorningAndEveningProgramEndpoint(svc),
			decodeGetUsersMorningAndEveningProgramRequest,
			encodeGetUsersMorningAndEveningProgramResponse,
		),
		getTaskWithParent: grpcbase.CreateGRPCServer(
			makeGetTaskWithParentEndpoint(svc),
			decodeGetTaskWithParentRequest,
			encodeGetTaskWithParentResponse,
		),
		getProject: grpcbase.CreateGRPCServer(
			makeGetProjectEndpoint(svc),
			decodeGetProjectRequest,
			encodeGetProjectResponse,
		),
		getWorkspace: grpcbase.CreateGRPCServer(
			makeGetWorkspaceEndpoint(svc),
			decodeGetWorkspaceRequest,
			encodeGetWorkspaceResponse,
		),
		getWorkspaceMembers: grpcbase.CreateGRPCServer(
			makeGetWorkspaceMembersEndpoint(svc),
			decodeGetWorkspaceMembersRequest,
			encodeGetWorkspaceMembersResponse,
		),
		getWorkspaceList: grpcbase.CreateGRPCServer(
			makeGetWorkspaceListEndpoint(svc),
			decodeGetWorkspaceListRequest,
			encodeGetWorkspaceListResponse,
		),
		getTaskChildren: grpcbase.CreateGRPCServer(
			makeGetTaskChildrenEndpoint(svc),
			decodeGetTaskChildrenRequest,
			encodeGetTaskChildrenResponse,
		),
		getWorkspaceFileSpace: grpcbase.CreateGRPCServer(
			makeGetWorkspaceFileSpaceEndpoint(svc),
			decodeGetWorkspaceFileSpaceRequest,
			encodeGetWorkspaceFileSpaceResponse,
		),
		getWorkspaceBindProject: grpcbase.CreateGRPCServer(
			makeGetWorkspaceBindProjectEndpoint(svc),
			decodeGetWorkspaceBindProjectRequest,
			encodeGetWorkspaceBindProjectResponse,
		),
		getWorkspaceExternalMember: grpcbase.CreateGRPCServer(
			makeGetWorkspaceExternalMemberEndpoint(svc),
			decodeGetWorkspaceExternalMemberRequest,
			encodeGetWorkspaceExternalMemberResponse,
		),
		expireEquityUpdate: grpcbase.CreateGRPCServer(
			makeExpireEquityUpdateEndpoint(svc),
			decodeExpireEquityUpdateRequest,
			encodeExpireEquityUpdateResponse,
		),
		updateWorkspaceLevel: grpcbase.CreateGRPCServer(
			makeUpdateWorkspaceLevelEndpoint(svc),
			decodeUpdateWorkspaceLevelRequest,
			encodeUpdateWorkspaceLevelResponse,
		),
		getTaskWorkspace: grpcbase.CreateGRPCServer(
			makeGetTaskWorkspaceEndpoint(svc),
			decodeGetTaskWorkspaceRequest,
			encodeGetTaskWorkspaceResponse,
		),
		getProjectWorkspace: grpcbase.CreateGRPCServer(
			makeGetProjectWorkspaceEndpoint(svc),
			decodeGetProjectWorkspaceRequest,
			encodeGetProjectWorkspaceResponse,
		),
		addMemberEquityUpdate: grpcbase.CreateGRPCServer(
			makeAddMemberEquityUpdateEndpoint(svc),
			decodeAddMemberEquityUpdateRequest,
			encodeAddMemberEquityUpdateResponse,
		),
		batchGetWorkspaceDirectory: grpcbase.CreateGRPCServer(
			makeBatchGetWorkspaceDirectoryEndpoint(svc),
			decodeBatchGetWorkspaceDirectoryRequest,
			encodeBatchGetWorkspaceDirectoryResponse,
		),
		getWorkspaceMembersOfTask: grpcbase.CreateGRPCServer(
			makeGetWorkspaceMembersOfTaskEndpoint(svc),
			decodeGetWorkspaceMembersOfTaskRequest,
			encodeGetWorkspaceMembersOfTaskResponse,
		),
		getBatchWorkspaceInfo: grpcbase.CreateGRPCServer(
			makeGetBatchWorkspaceInfoEndpoint(svc),
			decodeGetBatchWorkspaceInfoRequest,
			encodeGetBatchWorkspaceInfoResponse,
		),
		createNewInvite: grpcbase.CreateGRPCServer(
			makeCreateNewInviteEndpoint(svc),
			decodeCreateNewInviteRequest,
			encodeCreateNewInviteResponse,
		),
		getObjectiveMember: grpcbase.CreateGRPCServer(
			makeGetObjectiveMemberEndpoint(svc),
			decodeGetObjectiveMemberRequest,
			encodeGetObjectiveMemberResponse,
		),
		getObjective: grpcbase.CreateGRPCServer(
			makeGetObjectiveEndpoint(svc),
			decodeGetObjectiveRequest,
			encodeGetObjectiveResponse,
		),
		getScreen: grpcbase.CreateGRPCServer(
			makeGetScreenEndpoint(svc),
			decodeGetScreenRequest,
			encodeGetScreenResponse,
		),
		getScreenMembers: grpcbase.CreateGRPCServer(
			makeGetScreenMembersEndpoint(svc),
			decodeGetScreenMembersRequest,
			encodeGetScreenMembersResponse,
		),
		getScreensByCardType: grpcbase.CreateGRPCServer(
			makeGetScreensByCardTypeEndpoint(svc),
			decodeGetScreensByCardTypeRequest,
			encodeGetScreensByCardTypeResponse,
		),
	}
}
