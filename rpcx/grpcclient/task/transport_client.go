// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package task

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeGetTaskRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeGetTaskResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	var remindatStruct = &RemindAt{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		StartRemind: pbresp.RemindAt.StartRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		EndRemind: pbresp.RemindAt.EndRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		AloneRemind: pbresp.RemindAt.AloneRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		MaxAloneTotal: pbresp.RemindAt.MaxAloneTotal,
	}

	return grpcbase.Response{
		Data: GetTaskResponse{
			Category:         pbresp.Category,
			CreateAt:         pbresp.CreateAt,
			CreatorID:        pbresp.CreatorID,
			Detail:           pbresp.Detail,
			EndRepeatAt:      pbresp.EndRepeatAt,
			EndTime:          pbresp.EndTime,
			EndTimeFullDay:   pbresp.EndTimeFullDay,
			ExecuteAddr:      pbresp.ExecuteAddr,
			MatterType:       pbresp.MatterType,
			ParentID:         pbresp.ParentID,
			ProjectCreator:   pbresp.ProjectCreator,
			ProjectID:        pbresp.ProjectID,
			RemindAt:         remindatStruct,
			RepeatType:       pbresp.RepeatType,
			StartTime:        pbresp.StartTime,
			StartTimeFullDay: pbresp.StartTimeFullDay,
			TaskID:           pbresp.TaskID,
			Title:            pbresp.Title,
			Widget:           pbresp.Widget,
		},
	}, nil
}
func encodeGetTasksNameRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTasksNameRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTasksNameRequest{
		RefTaskID: r.RefTaskID,
		Context:   xcontext,
	}, nil
}

func decodeGetTasksNameResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTasksNameResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetTasksNameResponse{
			Data: pbresp.Data,
		},
	}, nil
}
func encodeGetTaskDispatchRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskDispatchRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskDispatchRequest{
		DispatchID: r.DispatchID,
		RefTaskID:  r.RefTaskID,
		Context:    xcontext,
	}, nil
}

func decodeGetTaskDispatchResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskDispatchResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetTaskDispatchResponse{
			CreateAt:         pbresp.CreateAt,
			CreatorID:        pbresp.CreatorID,
			DispatchID:       pbresp.DispatchID,
			EndTime:          pbresp.EndTime,
			ExecuteAt:        pbresp.ExecuteAt,
			FinishTime:       pbresp.FinishTime,
			Identity:         pbresp.Identity,
			MatterType:       pbresp.MatterType,
			OperateState:     pbresp.OperateState,
			PersonalRemindAt: pbresp.PersonalRemindAt,
			PersonalState:    pbresp.PersonalState,
			RefTaskID:        pbresp.RefTaskID,
			StartTime:        pbresp.StartTime,
			State:            pbresp.State,
			TakerID:          pbresp.TakerID,
			Title:            pbresp.Title,
		},
	}, nil
}
func encodeGetTaskTakersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskTakersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskTakersRequest{
		TaskID:  r.TaskID,
		TakerID: r.TakerID,
		Context: xcontext,
	}, nil
}

func decodeGetTaskTakersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskTakersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	var remindatStruct = &RemindAt{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		StartRemind: pbresp.RemindAt.StartRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		EndRemind: pbresp.RemindAt.EndRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		AloneRemind: pbresp.RemindAt.AloneRemind,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		MaxAloneTotal: pbresp.RemindAt.MaxAloneTotal,
	}
	//是复杂类型的数组
	var takersArray = make([]*TaskTaker, 0)
	for _, v := range pbresp.Takers {
		takersArray = append(takersArray, &TaskTaker{
			//判断字段是否为复杂类型
			DispatchID: v.DispatchID,
			//判断字段是否为复杂类型
			TakerID: v.TakerID,
			//判断字段是否为复杂类型
			InviteID: v.InviteID,
			//判断字段是否为复杂类型
			InviteType: v.InviteType,
			//判断字段是否为复杂类型
			Identity: v.Identity,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			PersonalState: v.PersonalState,
			//判断字段是否为复杂类型
			OperateState: v.OperateState,
			//判断字段是否为复杂类型
			IsAdmin: v.IsAdmin,
			//判断字段是否为复杂类型
			Status: v.Status,
			//判断字段是否为复杂类型
			AcceptAt: v.AcceptAt,
			//判断字段是否为复杂类型
			FinishTime: v.FinishTime,
			//判断字段是否为复杂类型
			RevokeAt: v.RevokeAt,
			//判断字段是否为复杂类型
			CancelAt: v.CancelAt,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UpdateAt: v.UpdateAt,
		})
	}

	return grpcbase.Response{
		Data: GetTaskTakersResponse{
			Category:         pbresp.Category,
			CreatorID:        pbresp.CreatorID,
			Detail:           pbresp.Detail,
			EndRepeatAt:      pbresp.EndRepeatAt,
			EndTime:          pbresp.EndTime,
			EndTimeFullDay:   pbresp.EndTimeFullDay,
			ExecuteAddr:      pbresp.ExecuteAddr,
			MatterType:       pbresp.MatterType,
			ProjectID:        pbresp.ProjectID,
			RemindAt:         remindatStruct,
			RepeatType:       pbresp.RepeatType,
			StartTime:        pbresp.StartTime,
			StartTimeFullDay: pbresp.StartTimeFullDay,
			Takers:           takersArray,
			TaskID:           pbresp.TaskID,
			Title:            pbresp.Title,
			WorkspaceID:      pbresp.WorkspaceID,
		},
	}, nil
}
func encodeGetPureTaskTakersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetPureTaskTakersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetPureTaskTakersRequest{
		TaskID:  r.TaskID,
		TakerID: r.TakerID,
		Context: xcontext,
	}, nil
}

func decodeGetPureTaskTakersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetPureTaskTakersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var takersArray = make([]*TaskTaker, 0)
	for _, v := range pbresp.Takers {
		takersArray = append(takersArray, &TaskTaker{
			//判断字段是否为复杂类型
			DispatchID: v.DispatchID,
			//判断字段是否为复杂类型
			TakerID: v.TakerID,
			//判断字段是否为复杂类型
			InviteID: v.InviteID,
			//判断字段是否为复杂类型
			InviteType: v.InviteType,
			//判断字段是否为复杂类型
			Identity: v.Identity,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			PersonalState: v.PersonalState,
			//判断字段是否为复杂类型
			OperateState: v.OperateState,
			//判断字段是否为复杂类型
			IsAdmin: v.IsAdmin,
			//判断字段是否为复杂类型
			Status: v.Status,
			//判断字段是否为复杂类型
			AcceptAt: v.AcceptAt,
			//判断字段是否为复杂类型
			FinishTime: v.FinishTime,
			//判断字段是否为复杂类型
			RevokeAt: v.RevokeAt,
			//判断字段是否为复杂类型
			CancelAt: v.CancelAt,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UpdateAt: v.UpdateAt,
		})
	}

	return grpcbase.Response{
		Data: GetPureTaskTakersResponse{
			Takers: takersArray,
		},
	}, nil
}
func encodeTaskExistsRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(TaskExistsRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.TaskExistsRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeTaskExistsResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.TaskExistsResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: TaskExistsResponse{
			Exists: pbresp.Exists,
		},
	}, nil
}
func encodeCreateGuideTaskRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateGuideTaskRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateGuideTaskRequest{
		TakerID:  r.TakerID,
		NickName: r.NickName,
		Context:  xcontext,
	}, nil
}

func decodeCreateGuideTaskResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeBatchQueryTaskRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryTaskRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryTaskRequest{
		RefTaskID: r.RefTaskID,
		Context:   xcontext,
	}, nil
}

func decodeBatchQueryTaskResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryTaskResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var tasksArray = make([]*BatchQueryTaskInfo, 0)
	for _, v := range pbresp.Tasks {
		tasksArray = append(tasksArray, &BatchQueryTaskInfo{
			//判断字段是否为复杂类型
			TaskID: v.TaskID,
			//判断字段是否为复杂类型
			Title: v.Title,
			//判断字段是否为复杂类型
			MatterType: v.MatterType,
			//判断字段是否为复杂类型
			Creator: v.Creator,
		})
	}

	return grpcbase.Response{
		Data: BatchQueryTaskResponse{
			Tasks: tasksArray,
		},
	}, nil
}
func encodeGetTaskRelevantTakersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskRelevantTakersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskRelevantTakersRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeGetTaskRelevantTakersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskRelevantTakersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var takersArray = make([]*RelevantTaker, 0)
	for _, v := range pbresp.Takers {
		takersArray = append(takersArray, &RelevantTaker{
			//判断字段是否为复杂类型
			TakerID: v.TakerID,
			//判断字段是否为复杂类型
			NickName: v.NickName,
			//判断字段是否为复杂类型
			Avatar: v.Avatar,
		})
	}

	return grpcbase.Response{
		Data: GetTaskRelevantTakersResponse{
			Takers: takersArray,
		},
	}, nil
}
func encodeUpdateTaskRelationRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateTaskRelationRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateTaskRelationRequest{
		UpdateType: r.UpdateType,
		Body:       r.Body,
		Context:    xcontext,
	}, nil
}

func decodeUpdateTaskRelationResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetTaskShareRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskShareRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskShareRequest{
		TaskID:      r.TaskID,
		ShareUserID: r.ShareUserID,
		Context:     xcontext,
	}, nil
}

func decodeGetTaskShareResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskShareResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetTaskShareResponse{
			CreatorID:   pbresp.CreatorID,
			ShareUserID: pbresp.ShareUserID,
			Status:      pbresp.Status,
		},
	}, nil
}
func encodeCreateUserInteractRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateUserInteractRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateUserInteractRequest{
		TaskID:        r.TaskID,
		TakersID:      r.TakersID,
		DefIsInteract: r.DefIsInteract,
		Context:       xcontext,
	}, nil
}

func decodeCreateUserInteractResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeUpdateUserInteractRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateUserInteractRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateUserInteractRequest{
		TaskID:  r.TaskID,
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeUpdateUserInteractResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeCreateTaskActiveDetailRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateTaskActiveDetailRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateTaskActiveDetailRequest{
		TaskID:  r.TaskID,
		Action:  r.Action,
		Context: xcontext,
	}, nil
}

func decodeCreateTaskActiveDetailResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeUpdateProjectRelationRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateProjectRelationRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateProjectRelationRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func decodeUpdateProjectRelationResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetProjectMembersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetProjectMembersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetProjectMembersRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func decodeGetProjectMembersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetProjectMembersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var membersArray = make([]*ProjectMember, 0)
	for _, v := range pbresp.Members {
		membersArray = append(membersArray, &ProjectMember{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			InviteID: v.InviteID,
			//判断字段是否为复杂类型
			InviteType: v.InviteType,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			AcceptAt: v.AcceptAt,
			//判断字段是否为复杂类型
			RefuseAt: v.RefuseAt,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UpdateAt: v.UpdateAt,
			//判断字段是否为复杂类型
			IsExternalMember: v.IsExternalMember,
		})
	}

	return grpcbase.Response{
		Data: GetProjectMembersResponse{
			Members:     membersArray,
			WorkspaceID: pbresp.WorkspaceID,
		},
	}, nil
}
func encodeGetProjectsNameRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetProjectsNameRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetProjectsNameRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func decodeGetProjectsNameResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetProjectsNameResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetProjectsNameResponse{
			Data: pbresp.Data,
		},
	}, nil
}
func encodeGetUsersMorningAndEveningProgramRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUsersMorningAndEveningProgramRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUsersMorningAndEveningProgramRequest{
		UserId:  r.UserId,
		Type:    r.Type,
		Context: xcontext,
	}, nil
}

func decodeGetUsersMorningAndEveningProgramResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUsersMorningAndEveningProgramResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUsersMorningAndEveningProgramResponse{
			Completed:  pbresp.Completed,
			Id:         pbresp.Id,
			Incomplete: pbresp.Incomplete,
			Titles:     pbresp.Titles,
		},
	}, nil
}
func encodeGetTaskWithParentRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskWithParentRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskWithParentRequest{
		MatterId: r.MatterId,
		UserID:   r.UserID,
		Context:  xcontext,
	}, nil
}

func decodeGetTaskWithParentResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskWithParentResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var parenttaskconfigsArray = make([]*TaskConfigResp, 0)
	for _, v := range pbresp.ParentTaskConfigs {
		parenttaskconfigsArray = append(parenttaskconfigsArray, &TaskConfigResp{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			MaxTakerTotal: v.MaxTakerTotal,
			//判断字段是否为复杂类型
			Category: v.Category,
			//判断字段是否为复杂类型
			ParentId: v.ParentId,
			//判断字段是否为复杂类型
			Sort: v.Sort,
			//判断字段是否为复杂类型
			IsCheckbox: v.IsCheckbox,
			//判断字段是否为复杂类型
			RefMeetingId: v.RefMeetingId,
			//判断字段是否为复杂类型
			ProjectId: v.ProjectId,
			//判断字段是否为复杂类型
			ImportProjectUserId: v.ImportProjectUserId,
			//判断字段是否为复杂类型
			ImportProjectAt: v.ImportProjectAt,
			//判断字段是否为复杂类型
			Score: v.Score,
			//判断字段是否为复杂类型
			LastActiveAt: v.LastActiveAt,
			//判断字段是否为复杂类型
			RepeatChangeId: v.RepeatChangeId,
			//判断字段是否为复杂类型
			CreatorId: v.CreatorId,
		})
	}

	var taskrespStruct = &TaskResp{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		TaskID: pbresp.TaskResp.TaskID,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Title: pbresp.TaskResp.Title,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Detail: pbresp.TaskResp.Detail,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		MatterType: pbresp.TaskResp.MatterType,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		Category: pbresp.TaskResp.Category,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		ParentID: pbresp.TaskResp.ParentID,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		ProjectID: pbresp.TaskResp.ProjectID,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		CreatorID: pbresp.TaskResp.CreatorID,
		//判断字段是否为复杂类型2

		RemindAt: &RemindAt{
			StartRemind:   pbresp.TaskResp.RemindAt.StartRemind,
			EndRemind:     pbresp.TaskResp.RemindAt.EndRemind,
			AloneRemind:   pbresp.TaskResp.RemindAt.AloneRemind,
			MaxAloneTotal: pbresp.TaskResp.RemindAt.MaxAloneTotal,
		},
	}

	return grpcbase.Response{
		Data: GetTaskWithParentResponse{
			ParentTaskConfigs: parenttaskconfigsArray,
			TaskResp:          taskrespStruct,
		},
	}, nil
}
func encodeGetProjectRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetProjectRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetProjectRequest{
		Context:   xcontext,
		ProjectID: r.ProjectID,
	}, nil
}

func decodeGetProjectResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetProjectResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetProjectResponse{
			CreateAt:    pbresp.CreateAt,
			CreatorID:   pbresp.CreatorID,
			IsArchive:   pbresp.IsArchive,
			ProjectDesc: pbresp.ProjectDesc,
			ProjectID:   pbresp.ProjectID,
			ProjectName: pbresp.ProjectName,
			TargetTime:  pbresp.TargetTime,
		},
	}, nil
}
func encodeGetWorkspaceRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceRequest{
		Context:     xcontext,
		WorkspaceID: r.WorkspaceID,
	}, nil
}

func decodeGetWorkspaceResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetWorkspaceResponse{
			CreateAt:    pbresp.CreateAt,
			CreatorID:   pbresp.CreatorID,
			Level:       pbresp.Level,
			Name:        pbresp.Name,
			State:       pbresp.State,
			WorkspaceID: pbresp.WorkspaceID,
			WsDesc:      pbresp.WsDesc,
		},
	}, nil
}
func encodeGetWorkspaceMembersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceMembersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceMembersRequest{
		Context:     xcontext,
		WorkspaceID: r.WorkspaceID,
	}, nil
}

func decodeGetWorkspaceMembersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceMembersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var membersArray = make([]*WorkspaceMember, 0)
	for _, v := range pbresp.Members {
		membersArray = append(membersArray, &WorkspaceMember{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			InviteID: v.InviteID,
			//判断字段是否为复杂类型
			InviteType: v.InviteType,
			//判断字段是否为复杂类型
			Identify: v.Identify,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			AcceptAt: v.AcceptAt,
			//判断字段是否为复杂类型
			RefuseAt: v.RefuseAt,
			//判断字段是否为复杂类型
			RevokeAt: v.RevokeAt,
			//判断字段是否为复杂类型
			ExitAt: v.ExitAt,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			MemberType: v.MemberType,
			//判断字段是否为复杂类型
			ApprovalAt: v.ApprovalAt,
			//判断字段是否为复杂类型
			ApprovalState: v.ApprovalState,
		})
	}

	return grpcbase.Response{
		Data: GetWorkspaceMembersResponse{
			CreateAt:    pbresp.CreateAt,
			CreatorID:   pbresp.CreatorID,
			Level:       pbresp.Level,
			Members:     membersArray,
			Name:        pbresp.Name,
			State:       pbresp.State,
			WorkspaceID: pbresp.WorkspaceID,
		},
	}, nil
}
func encodeGetWorkspaceListRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceListRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceListRequest{
		UserID:  r.UserID,
		WsType:  r.WsType,
		Context: xcontext,
	}, nil
}

func decodeGetWorkspaceListResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceListResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var workspacesArray = make([]*Workspace, 0)
	for _, v := range pbresp.Workspaces {
		workspacesArray = append(workspacesArray, &Workspace{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			WsType: v.WsType,
			//判断字段是否为复杂类型
			Level: v.Level,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			State: v.State,
		})
	}

	return grpcbase.Response{
		Data: GetWorkspaceListResponse{
			Workspaces: workspacesArray,
		},
	}, nil
}
func encodeGetTaskChildrenRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskChildrenRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskChildrenRequest{
		TaskID:   r.TaskID,
		ParentID: r.ParentID,
		Context:  xcontext,
	}, nil
}

func decodeGetTaskChildrenResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskChildrenResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var taskchildrenArray = make([]*TaskChildren, 0)
	for _, v := range pbresp.TaskChildren {
		taskchildrenArray = append(taskchildrenArray, &TaskChildren{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			MatterType: v.MatterType,
		})
	}

	return grpcbase.Response{
		Data: GetTaskChildrenResponse{
			TaskChildren: taskchildrenArray,
		},
	}, nil
}
func encodeGetWorkspaceFileSpaceRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceFileSpaceRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceFileSpaceRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func decodeGetWorkspaceFileSpaceResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceFileSpaceResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetWorkspaceFileSpaceResponse{
			AvailableSpace:     pbresp.AvailableSpace,
			KnowledgeBaseSpace: pbresp.KnowledgeBaseSpace,
			OtherSpace:         pbresp.OtherSpace,
			ProcessFileSpace:   pbresp.ProcessFileSpace,
			TotalSpace:         pbresp.TotalSpace,
		},
	}, nil
}
func encodeGetWorkspaceBindProjectRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceBindProjectRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceBindProjectRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func decodeGetWorkspaceBindProjectResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceBindProjectResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetWorkspaceBindProjectResponse{
			ProjectIDs: pbresp.ProjectIDs,
		},
	}, nil
}
func encodeGetWorkspaceExternalMemberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceExternalMemberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceExternalMemberRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func decodeGetWorkspaceExternalMemberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceExternalMemberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetWorkspaceExternalMemberResponse{
			ExternalMemberIDs: pbresp.ExternalMemberIDs,
		},
	}, nil
}
func encodeExpireEquityUpdateRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(ExpireEquityUpdateRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.ExpireEquityUpdateRequest{
		ProjectLimitNum:   r.ProjectLimitNum,
		ProjectState:      r.ProjectState,
		UserID:            r.UserID,
		WorkspaceLimitNum: r.WorkspaceLimitNum,
		WorkspaceState:    r.WorkspaceState,
		Context:           xcontext,
	}, nil
}

func decodeExpireEquityUpdateResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.ExpireEquityUpdateResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: ExpireEquityUpdateResponse{
			Result: pbresp.Result,
		},
	}, nil
}
func encodeUpdateWorkspaceLevelRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateWorkspaceLevelRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateWorkspaceLevelRequest{
		WorkspaceID: r.WorkspaceID,
		ExpireAt:    r.ExpireAt,
		Level:       r.Level,
		Context:     xcontext,
	}, nil
}

func decodeUpdateWorkspaceLevelResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.UpdateWorkspaceLevelResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: UpdateWorkspaceLevelResponse{
			Result: pbresp.Result,
		},
	}, nil
}
func encodeGetTaskWorkspaceRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskWorkspaceRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskWorkspaceRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeGetTaskWorkspaceResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskWorkspaceResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetTaskWorkspaceResponse{
			CreatorID:           pbresp.CreatorID,
			ExpiredAt:           pbresp.ExpiredAt,
			Level:               pbresp.Level,
			TaskCreatorID:       pbresp.TaskCreatorID,
			TaskParentCreatorID: pbresp.TaskParentCreatorID,
			WorkspaceID:         pbresp.WorkspaceID,
			WsType:              pbresp.WsType,
		},
	}, nil
}
func encodeGetProjectWorkspaceRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetProjectWorkspaceRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetProjectWorkspaceRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func decodeGetProjectWorkspaceResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetProjectWorkspaceResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetProjectWorkspaceResponse{
			CreatorID:        pbresp.CreatorID,
			ExpiredAt:        pbresp.ExpiredAt,
			Level:            pbresp.Level,
			ProjectCreatorID: pbresp.ProjectCreatorID,
			WorkspaceID:      pbresp.WorkspaceID,
			WsType:           pbresp.WsType,
		},
	}, nil
}
func encodeAddMemberEquityUpdateRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(AddMemberEquityUpdateRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.AddMemberEquityUpdateRequest{
		TaskTakerNum: r.TaskTakerNum,
		WorkspaceNum: r.WorkspaceNum,
		ProjectNum:   r.ProjectNum,
		Context:      xcontext,
	}, nil
}

func decodeAddMemberEquityUpdateResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.AddMemberEquityUpdateResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: AddMemberEquityUpdateResponse{
			Result: pbresp.Result,
		},
	}, nil
}
func encodeBatchGetWorkspaceDirectoryRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchGetWorkspaceDirectoryRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchGetWorkspaceDirectoryRequest{
		WorkspaceDirectoryID: r.WorkspaceDirectoryID,
		Context:              xcontext,
	}, nil
}

func decodeBatchGetWorkspaceDirectoryResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchGetWorkspaceDirectoryResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var workspacedirectoryArray = make([]*WorkspaceDirectory, 0)
	for _, v := range pbresp.WorkspaceDirectory {
		workspacedirectoryArray = append(workspacedirectoryArray, &WorkspaceDirectory{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			ParentID: v.ParentID,
			//判断字段是否为复杂类型
			WorkSpaceID: v.WorkSpaceID,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			UpdateAt: v.UpdateAt,
			//判断字段是否为复杂类型
			IsDefault: v.IsDefault,
		})
	}

	return grpcbase.Response{
		Data: BatchGetWorkspaceDirectoryResponse{
			WorkspaceDirectory: workspacedirectoryArray,
		},
	}, nil
}
func encodeGetWorkspaceMembersOfTaskRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetWorkspaceMembersOfTaskRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetWorkspaceMembersOfTaskRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeGetWorkspaceMembersOfTaskResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetWorkspaceMembersOfTaskResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetWorkspaceMembersOfTaskResponse{
			Members: pbresp.Members,
		},
	}, nil
}
func encodeGetBatchWorkspaceInfoRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetBatchWorkspaceInfoRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetBatchWorkspaceInfoRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func decodeGetBatchWorkspaceInfoResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetBatchWorkspaceInfoResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var workspaceArray = make([]*Workspace, 0)
	for _, v := range pbresp.Workspace {
		workspaceArray = append(workspaceArray, &Workspace{
			//判断字段是否为复杂类型
			ID: v.ID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			WsType: v.WsType,
			//判断字段是否为复杂类型
			Level: v.Level,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
			//判断字段是否为复杂类型
			State: v.State,
		})
	}

	return grpcbase.Response{
		Data: GetBatchWorkspaceInfoResponse{
			Workspace: workspaceArray,
		},
	}, nil
}
func encodeCreateNewInviteRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateNewInviteRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateNewInviteRequest{
		RefID:      r.RefID,
		RefType:    r.RefType,
		ContentMap: r.ContentMap,
		Context:    xcontext,
	}, nil
}

func decodeCreateNewInviteResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetObjectiveMemberRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetObjectiveMemberRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetObjectiveMemberRequest{
		ObjectiveID: r.ObjectiveID,
		Context:     xcontext,
	}, nil
}

func decodeGetObjectiveMemberResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetObjectiveMemberResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var memberArray = make([]*ObjectiveMember, 0)
	for _, v := range pbresp.Member {
		memberArray = append(memberArray, &ObjectiveMember{
			//判断字段是否为复杂类型
			ObjectiveID: v.ObjectiveID,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			InviteID: v.InviteID,
			//判断字段是否为复杂类型
			State: v.State,
		})
	}

	return grpcbase.Response{
		Data: GetObjectiveMemberResponse{
			Member: memberArray,
		},
	}, nil
}
func encodeGetObjectiveRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetObjectiveRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetObjectiveRequest{
		ObjectiveID: r.ObjectiveID,
		Context:     xcontext,
	}, nil
}

func decodeGetObjectiveResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetObjectiveResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetObjectiveResponse{
			AffectedUid: pbresp.AffectedUid,
			CompleteAt:  pbresp.CompleteAt,
			CreatorID:   pbresp.CreatorID,
			Detail:      pbresp.Detail,
			Level:       pbresp.Level,
			ObjectiveID: pbresp.ObjectiveID,
			OriginID:    pbresp.OriginID,
			OriginType:  pbresp.OriginType,
			Schedule:    pbresp.Schedule,
			State:       pbresp.State,
			Title:       pbresp.Title,
		},
	}, nil
}
func encodeGetScreenRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetScreenRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetScreenRequest{
		ScreenID: r.ScreenID,
		Context:  xcontext,
	}, nil
}

func decodeGetScreenResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetScreenResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetScreenResponse{
			CreatorID:    pbresp.CreatorID,
			LocationType: pbresp.LocationType,
			Name:         pbresp.Name,
			ProjectID:    pbresp.ProjectID,
			ScreenID:     pbresp.ScreenID,
			State:        pbresp.State,
			Type:         pbresp.Type,
			WorkspaceID:  pbresp.WorkspaceID,
		},
	}, nil
}
func encodeGetScreenMembersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetScreenMembersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetScreenMembersRequest{
		ScreenID: r.ScreenID,
		Context:  xcontext,
	}, nil
}

func decodeGetScreenMembersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetScreenMembersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetScreenMembersResponse{
			Members: pbresp.Members,
		},
	}, nil
}
func encodeGetScreensByCardTypeRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetScreensByCardTypeRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetScreensByCardTypeRequest{
		CardType: r.CardType,
		RefID:    r.RefID,
		Context:  xcontext,
	}, nil
}

func decodeGetScreensByCardTypeResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetScreensByCardTypeResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var dataArray = make([]*GetScreenResponse, 0)
	for _, v := range pbresp.Data {
		dataArray = append(dataArray, &GetScreenResponse{
			//判断字段是否为复杂类型
			ScreenID: v.ScreenID,
			//判断字段是否为复杂类型
			Name: v.Name,
			//判断字段是否为复杂类型
			LocationType: v.LocationType,
			//判断字段是否为复杂类型
			WorkspaceID: v.WorkspaceID,
			//判断字段是否为复杂类型
			ProjectID: v.ProjectID,
			//判断字段是否为复杂类型
			Type: v.Type,
			//判断字段是否为复杂类型
			State: v.State,
			//判断字段是否为复杂类型
			CreatorID: v.CreatorID,
		})
	}

	return grpcbase.Response{
		Data: GetScreensByCardTypeResponse{
			Data: dataArray,
		},
	}, nil
}
