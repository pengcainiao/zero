// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package task

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"

	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient task GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.TaskSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleGetTask 客户端处理逻辑
func (c *GrpcClient) HandleGetTask(ctx context.Context, req GetTaskRequest) *GetTaskResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTask", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTask(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTask 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskResponse)
		return &m
	}
	return nil
}

// HandleGetTasksName 客户端处理逻辑
func (c *GrpcClient) HandleGetTasksName(ctx context.Context, req GetTasksNameRequest) *GetTasksNameResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTasksName", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTasksName(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTasksName 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTasksNameResponse)
		return &m
	}
	return nil
}

// HandleGetTaskDispatch 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskDispatch(ctx context.Context, req GetTaskDispatchRequest) *GetTaskDispatchResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskDispatch", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskDispatch(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskDispatch 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskDispatchResponse)
		return &m
	}
	return nil
}

// HandleGetTaskTakers 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskTakers(ctx context.Context, req GetTaskTakersRequest) *GetTaskTakersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskTakers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskTakers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskTakers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskTakersResponse)
		return &m
	}
	return nil
}

// HandleGetPureTaskTakers 客户端处理逻辑
func (c *GrpcClient) HandleGetPureTaskTakers(ctx context.Context, req GetPureTaskTakersRequest) *GetPureTaskTakersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetPureTaskTakers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetPureTaskTakers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetPureTaskTakers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetPureTaskTakersResponse)
		return &m
	}
	return nil
}

// HandleTaskExists 客户端处理逻辑
func (c *GrpcClient) HandleTaskExists(ctx context.Context, req TaskExistsRequest) *TaskExistsResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/TaskExists", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.TaskExists(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 TaskExists 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(TaskExistsResponse)
		return &m
	}
	return nil
}

// HandleCreateGuideTask 客户端处理逻辑
func (c *GrpcClient) HandleCreateGuideTask(ctx context.Context, req CreateGuideTaskRequest) error {
	resp := c.client.CreateGuideTask(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleBatchQueryTask 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryTask(ctx context.Context, req BatchQueryTaskRequest) *BatchQueryTaskResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/BatchQueryTask", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryTask(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryTask 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryTaskResponse)
		return &m
	}
	return nil
}

// HandleGetTaskRelevantTakers 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskRelevantTakers(ctx context.Context, req GetTaskRelevantTakersRequest) *GetTaskRelevantTakersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskRelevantTakers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskRelevantTakers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskRelevantTakers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskRelevantTakersResponse)
		return &m
	}
	return nil
}

// HandleUpdateTaskRelation 客户端处理逻辑
func (c *GrpcClient) HandleUpdateTaskRelation(ctx context.Context, req UpdateTaskRelationRequest) error {
	resp := c.client.UpdateTaskRelation(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetTaskShare 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskShare(ctx context.Context, req GetTaskShareRequest) *GetTaskShareResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskShare", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskShare(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskShare 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskShareResponse)
		return &m
	}
	return nil
}

// HandleCreateUserInteract 客户端处理逻辑
func (c *GrpcClient) HandleCreateUserInteract(ctx context.Context, req CreateUserInteractRequest) error {
	resp := c.client.CreateUserInteract(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleUpdateUserInteract 客户端处理逻辑
func (c *GrpcClient) HandleUpdateUserInteract(ctx context.Context, req UpdateUserInteractRequest) error {
	resp := c.client.UpdateUserInteract(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleCreateTaskActiveDetail 客户端处理逻辑
func (c *GrpcClient) HandleCreateTaskActiveDetail(ctx context.Context, req CreateTaskActiveDetailRequest) error {
	resp := c.client.CreateTaskActiveDetail(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleUpdateProjectRelation 客户端处理逻辑
func (c *GrpcClient) HandleUpdateProjectRelation(ctx context.Context, req UpdateProjectRelationRequest) error {
	resp := c.client.UpdateProjectRelation(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetProjectMembers 客户端处理逻辑
func (c *GrpcClient) HandleGetProjectMembers(ctx context.Context, req GetProjectMembersRequest) *GetProjectMembersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetProjectMembers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetProjectMembers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetProjectMembers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetProjectMembersResponse)
		return &m
	}
	return nil
}

// HandleGetProjectsName 客户端处理逻辑
func (c *GrpcClient) HandleGetProjectsName(ctx context.Context, req GetProjectsNameRequest) *GetProjectsNameResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetProjectsName", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetProjectsName(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetProjectsName 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetProjectsNameResponse)
		return &m
	}
	return nil
}

// HandleGetUsersMorningAndEveningProgram 客户端处理逻辑
func (c *GrpcClient) HandleGetUsersMorningAndEveningProgram(ctx context.Context, req GetUsersMorningAndEveningProgramRequest) *GetUsersMorningAndEveningProgramResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetUsersMorningAndEveningProgram", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetUsersMorningAndEveningProgram(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetUsersMorningAndEveningProgram 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetUsersMorningAndEveningProgramResponse)
		return &m
	}
	return nil
}

// HandleGetTaskWithParent 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskWithParent(ctx context.Context, req GetTaskWithParentRequest) *GetTaskWithParentResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskWithParent", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskWithParent(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskWithParent 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskWithParentResponse)
		return &m
	}
	return nil
}

// HandleGetProject 客户端处理逻辑
func (c *GrpcClient) HandleGetProject(ctx context.Context, req GetProjectRequest) *GetProjectResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetProject", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetProject(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetProject 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetProjectResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspace 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspace(ctx context.Context, req GetWorkspaceRequest) *GetWorkspaceResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspace", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspace(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspace 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceMembers 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceMembers(ctx context.Context, req GetWorkspaceMembersRequest) *GetWorkspaceMembersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceMembers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceMembers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceMembers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceMembersResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceList 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceList(ctx context.Context, req GetWorkspaceListRequest) *GetWorkspaceListResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceList", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceList(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceList 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceListResponse)
		return &m
	}
	return nil
}

// HandleGetTaskChildren 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskChildren(ctx context.Context, req GetTaskChildrenRequest) *GetTaskChildrenResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskChildren", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskChildren(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskChildren 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskChildrenResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceFileSpace 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceFileSpace(ctx context.Context, req GetWorkspaceFileSpaceRequest) *GetWorkspaceFileSpaceResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceFileSpace", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceFileSpace(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceFileSpace 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceFileSpaceResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceBindProject 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceBindProject(ctx context.Context, req GetWorkspaceBindProjectRequest) *GetWorkspaceBindProjectResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceBindProject", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceBindProject(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceBindProject 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceBindProjectResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceExternalMember 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceExternalMember(ctx context.Context, req GetWorkspaceExternalMemberRequest) *GetWorkspaceExternalMemberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceExternalMember", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceExternalMember(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceExternalMember 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceExternalMemberResponse)
		return &m
	}
	return nil
}

// HandleExpireEquityUpdate 客户端处理逻辑
func (c *GrpcClient) HandleExpireEquityUpdate(ctx context.Context, req ExpireEquityUpdateRequest) *ExpireEquityUpdateResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/ExpireEquityUpdate", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.ExpireEquityUpdate(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 ExpireEquityUpdate 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(ExpireEquityUpdateResponse)
		return &m
	}
	return nil
}

// HandleUpdateWorkspaceLevel 客户端处理逻辑
func (c *GrpcClient) HandleUpdateWorkspaceLevel(ctx context.Context, req UpdateWorkspaceLevelRequest) *UpdateWorkspaceLevelResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/UpdateWorkspaceLevel", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.UpdateWorkspaceLevel(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 UpdateWorkspaceLevel 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(UpdateWorkspaceLevelResponse)
		return &m
	}
	return nil
}

// HandleGetTaskWorkspace 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskWorkspace(ctx context.Context, req GetTaskWorkspaceRequest) *GetTaskWorkspaceResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetTaskWorkspace", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskWorkspace(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskWorkspace 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskWorkspaceResponse)
		return &m
	}
	return nil
}

// HandleGetProjectWorkspace 客户端处理逻辑
func (c *GrpcClient) HandleGetProjectWorkspace(ctx context.Context, req GetProjectWorkspaceRequest) *GetProjectWorkspaceResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetProjectWorkspace", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetProjectWorkspace(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetProjectWorkspace 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetProjectWorkspaceResponse)
		return &m
	}
	return nil
}

// HandleAddMemberEquityUpdate 客户端处理逻辑
func (c *GrpcClient) HandleAddMemberEquityUpdate(ctx context.Context, req AddMemberEquityUpdateRequest) *AddMemberEquityUpdateResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/AddMemberEquityUpdate", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.AddMemberEquityUpdate(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 AddMemberEquityUpdate 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(AddMemberEquityUpdateResponse)
		return &m
	}
	return nil
}

// HandleBatchGetWorkspaceDirectory 客户端处理逻辑
func (c *GrpcClient) HandleBatchGetWorkspaceDirectory(ctx context.Context, req BatchGetWorkspaceDirectoryRequest) *BatchGetWorkspaceDirectoryResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/BatchGetWorkspaceDirectory", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchGetWorkspaceDirectory(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchGetWorkspaceDirectory 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchGetWorkspaceDirectoryResponse)
		return &m
	}
	return nil
}

// HandleGetWorkspaceMembersOfTask 客户端处理逻辑
func (c *GrpcClient) HandleGetWorkspaceMembersOfTask(ctx context.Context, req GetWorkspaceMembersOfTaskRequest) *GetWorkspaceMembersOfTaskResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetWorkspaceMembersOfTask", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetWorkspaceMembersOfTask(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetWorkspaceMembersOfTask 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetWorkspaceMembersOfTaskResponse)
		return &m
	}
	return nil
}

// HandleGetBatchWorkspaceInfo 客户端处理逻辑
func (c *GrpcClient) HandleGetBatchWorkspaceInfo(ctx context.Context, req GetBatchWorkspaceInfoRequest) *GetBatchWorkspaceInfoResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetBatchWorkspaceInfo", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetBatchWorkspaceInfo(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetBatchWorkspaceInfo 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetBatchWorkspaceInfoResponse)
		return &m
	}
	return nil
}

// HandleCreateNewInvite 客户端处理逻辑
func (c *GrpcClient) HandleCreateNewInvite(ctx context.Context, req CreateNewInviteRequest) error {
	resp := c.client.CreateNewInvite(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleGetObjectiveMember 客户端处理逻辑
func (c *GrpcClient) HandleGetObjectiveMember(ctx context.Context, req GetObjectiveMemberRequest) *GetObjectiveMemberResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetObjectiveMember", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetObjectiveMember(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetObjectiveMember 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetObjectiveMemberResponse)
		return &m
	}
	return nil
}

// HandleGetObjective 客户端处理逻辑
func (c *GrpcClient) HandleGetObjective(ctx context.Context, req GetObjectiveRequest) *GetObjectiveResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetObjective", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetObjective(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetObjective 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetObjectiveResponse)
		return &m
	}
	return nil
}

// HandleGetScreen 客户端处理逻辑
func (c *GrpcClient) HandleGetScreen(ctx context.Context, req GetScreenRequest) *GetScreenResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetScreen", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetScreen(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetScreen 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetScreenResponse)
		return &m
	}
	return nil
}

// HandleGetScreenMembers 客户端处理逻辑
func (c *GrpcClient) HandleGetScreenMembers(ctx context.Context, req GetScreenMembersRequest) *GetScreenMembersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetScreenMembers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetScreenMembers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetScreenMembers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetScreenMembersResponse)
		return &m
	}
	return nil
}

// HandleGetScreensByCardType 客户端处理逻辑
func (c *GrpcClient) HandleGetScreensByCardType(ctx context.Context, req GetScreensByCardTypeRequest) *GetScreensByCardTypeResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.task/GetScreensByCardType", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetScreensByCardType(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetScreensByCardType 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetScreensByCardTypeResponse)
		return &m
	}
	return nil
}
