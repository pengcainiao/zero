// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package task

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeGetTaskEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskRequest)
		v := svc.GetTask(ctx, req)
		return v, nil
	}
}
func decodeGetTaskRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeGetTaskResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskResponse)

	var remindatStruct = &pb.RemindAt{
		StartRemind:   resp.RemindAt.StartRemind,
		EndRemind:     resp.RemindAt.EndRemind,
		AloneRemind:   resp.RemindAt.AloneRemind,
		MaxAloneTotal: resp.RemindAt.MaxAloneTotal,
	}
	pbresp := &pb.GetTaskResponse{
		Category:         resp.Category,
		CreateAt:         resp.CreateAt,
		CreatorID:        resp.CreatorID,
		Detail:           resp.Detail,
		EndRepeatAt:      resp.EndRepeatAt,
		EndTime:          resp.EndTime,
		EndTimeFullDay:   resp.EndTimeFullDay,
		ExecuteAddr:      resp.ExecuteAddr,
		MatterType:       resp.MatterType,
		ParentID:         resp.ParentID,
		ProjectCreator:   resp.ProjectCreator,
		ProjectID:        resp.ProjectID,
		RemindAt:         remindatStruct,
		RepeatType:       resp.RepeatType,
		StartTime:        resp.StartTime,
		StartTimeFullDay: resp.StartTimeFullDay,
		TaskID:           resp.TaskID,
		Title:            resp.Title,
		Widget:           resp.Widget,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTasksNameEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTasksNameRequest)
		v := svc.GetTasksName(ctx, req)
		return v, nil
	}
}
func decodeGetTasksNameRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTasksNameRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTasksNameRequest{
		RefTaskID: r.RefTaskID,
		Context:   xcontext,
	}, nil
}

func encodeGetTasksNameResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTasksNameResponse)
	pbresp := &pb.GetTasksNameResponse{
		Data: resp.Data,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskDispatchEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskDispatchRequest)
		v := svc.GetTaskDispatch(ctx, req)
		return v, nil
	}
}
func decodeGetTaskDispatchRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskDispatchRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskDispatchRequest{
		DispatchID: r.DispatchID,
		RefTaskID:  r.RefTaskID,
		Context:    xcontext,
	}, nil
}

func encodeGetTaskDispatchResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskDispatchResponse)
	pbresp := &pb.GetTaskDispatchResponse{
		CreateAt:         resp.CreateAt,
		CreatorID:        resp.CreatorID,
		DispatchID:       resp.DispatchID,
		EndTime:          resp.EndTime,
		ExecuteAt:        resp.ExecuteAt,
		FinishTime:       resp.FinishTime,
		Identity:         resp.Identity,
		MatterType:       resp.MatterType,
		OperateState:     resp.OperateState,
		PersonalRemindAt: resp.PersonalRemindAt,
		PersonalState:    resp.PersonalState,
		RefTaskID:        resp.RefTaskID,
		StartTime:        resp.StartTime,
		State:            resp.State,
		TakerID:          resp.TakerID,
		Title:            resp.Title,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskTakersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskTakersRequest)
		v := svc.GetTaskTakers(ctx, req)
		return v, nil
	}
}
func decodeGetTaskTakersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskTakersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskTakersRequest{
		TaskID:  r.TaskID,
		TakerID: r.TakerID,
		Context: xcontext,
	}, nil
}

func encodeGetTaskTakersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskTakersResponse)

	var remindatStruct = &pb.RemindAt{
		StartRemind:   resp.RemindAt.StartRemind,
		EndRemind:     resp.RemindAt.EndRemind,
		AloneRemind:   resp.RemindAt.AloneRemind,
		MaxAloneTotal: resp.RemindAt.MaxAloneTotal,
	}
	//是复杂类型的数组
	var takersArray = make([]*pb.TaskTaker, 0)

	for _, v := range resp.Takers {
		takersArray = append(takersArray, &pb.TaskTaker{
			DispatchID:    v.DispatchID,
			TakerID:       v.TakerID,
			InviteID:      v.InviteID,
			InviteType:    v.InviteType,
			Identity:      v.Identity,
			State:         v.State,
			PersonalState: v.PersonalState,
			OperateState:  v.OperateState,
			IsAdmin:       v.IsAdmin,
			Status:        v.Status,
			AcceptAt:      v.AcceptAt,
			FinishTime:    v.FinishTime,
			RevokeAt:      v.RevokeAt,
			CancelAt:      v.CancelAt,
			CreateAt:      v.CreateAt,
			UpdateAt:      v.UpdateAt,
		})
	}
	pbresp := &pb.GetTaskTakersResponse{
		Category:         resp.Category,
		CreatorID:        resp.CreatorID,
		Detail:           resp.Detail,
		EndRepeatAt:      resp.EndRepeatAt,
		EndTime:          resp.EndTime,
		EndTimeFullDay:   resp.EndTimeFullDay,
		ExecuteAddr:      resp.ExecuteAddr,
		MatterType:       resp.MatterType,
		ProjectID:        resp.ProjectID,
		RemindAt:         remindatStruct,
		RepeatType:       resp.RepeatType,
		StartTime:        resp.StartTime,
		StartTimeFullDay: resp.StartTimeFullDay,
		Takers:           takersArray,
		TaskID:           resp.TaskID,
		Title:            resp.Title,
		WorkspaceID:      resp.WorkspaceID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetPureTaskTakersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetPureTaskTakersRequest)
		v := svc.GetPureTaskTakers(ctx, req)
		return v, nil
	}
}
func decodeGetPureTaskTakersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetPureTaskTakersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetPureTaskTakersRequest{
		TaskID:  r.TaskID,
		TakerID: r.TakerID,
		Context: xcontext,
	}, nil
}

func encodeGetPureTaskTakersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetPureTaskTakersResponse)
	//是复杂类型的数组
	var takersArray = make([]*pb.TaskTaker, 0)

	for _, v := range resp.Takers {
		takersArray = append(takersArray, &pb.TaskTaker{
			DispatchID:    v.DispatchID,
			TakerID:       v.TakerID,
			InviteID:      v.InviteID,
			InviteType:    v.InviteType,
			Identity:      v.Identity,
			State:         v.State,
			PersonalState: v.PersonalState,
			OperateState:  v.OperateState,
			IsAdmin:       v.IsAdmin,
			Status:        v.Status,
			AcceptAt:      v.AcceptAt,
			FinishTime:    v.FinishTime,
			RevokeAt:      v.RevokeAt,
			CancelAt:      v.CancelAt,
			CreateAt:      v.CreateAt,
			UpdateAt:      v.UpdateAt,
		})
	}
	pbresp := &pb.GetPureTaskTakersResponse{
		Takers: takersArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeTaskExistsEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(TaskExistsRequest)
		v := svc.TaskExists(ctx, req)
		return v, nil
	}
}
func decodeTaskExistsRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.TaskExistsRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return TaskExistsRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeTaskExistsResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(TaskExistsResponse)
	pbresp := &pb.TaskExistsResponse{
		Exists: resp.Exists,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCreateGuideTaskEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateGuideTaskRequest)
		v := svc.CreateGuideTask(ctx, req)
		return v, nil
	}
}
func decodeCreateGuideTaskRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateGuideTaskRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateGuideTaskRequest{
		TakerID:  r.TakerID,
		NickName: r.NickName,
		Context:  xcontext,
	}, nil
}

func encodeCreateGuideTaskResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeBatchQueryTaskEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryTaskRequest)
		v := svc.BatchQueryTask(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryTaskRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryTaskRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryTaskRequest{
		RefTaskID: r.RefTaskID,
		Context:   xcontext,
	}, nil
}

func encodeBatchQueryTaskResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryTaskResponse)
	//是复杂类型的数组
	var tasksArray = make([]*pb.BatchQueryTaskInfo, 0)

	for _, v := range resp.Tasks {
		tasksArray = append(tasksArray, &pb.BatchQueryTaskInfo{
			TaskID:     v.TaskID,
			Title:      v.Title,
			MatterType: v.MatterType,
			Creator:    v.Creator,
		})
	}
	pbresp := &pb.BatchQueryTaskResponse{
		Tasks: tasksArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskRelevantTakersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskRelevantTakersRequest)
		v := svc.GetTaskRelevantTakers(ctx, req)
		return v, nil
	}
}
func decodeGetTaskRelevantTakersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskRelevantTakersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskRelevantTakersRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeGetTaskRelevantTakersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskRelevantTakersResponse)
	//是复杂类型的数组
	var takersArray = make([]*pb.RelevantTaker, 0)

	for _, v := range resp.Takers {
		takersArray = append(takersArray, &pb.RelevantTaker{
			TakerID:  v.TakerID,
			NickName: v.NickName,
			Avatar:   v.Avatar,
		})
	}
	pbresp := &pb.GetTaskRelevantTakersResponse{
		Takers: takersArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateTaskRelationEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateTaskRelationRequest)
		v := svc.UpdateTaskRelation(ctx, req)
		return v, nil
	}
}
func decodeUpdateTaskRelationRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateTaskRelationRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateTaskRelationRequest{
		UpdateType: r.UpdateType,
		Body:       r.Body,
		Context:    xcontext,
	}, nil
}

func encodeUpdateTaskRelationResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetTaskShareEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskShareRequest)
		v := svc.GetTaskShare(ctx, req)
		return v, nil
	}
}
func decodeGetTaskShareRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskShareRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskShareRequest{
		TaskID:      r.TaskID,
		ShareUserID: r.ShareUserID,
		Context:     xcontext,
	}, nil
}

func encodeGetTaskShareResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskShareResponse)
	pbresp := &pb.GetTaskShareResponse{
		CreatorID:   resp.CreatorID,
		ShareUserID: resp.ShareUserID,
		Status:      resp.Status,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCreateUserInteractEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateUserInteractRequest)
		v := svc.CreateUserInteract(ctx, req)
		return v, nil
	}
}
func decodeCreateUserInteractRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateUserInteractRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateUserInteractRequest{
		TaskID:        r.TaskID,
		TakersID:      r.TakersID,
		DefIsInteract: r.DefIsInteract,
		Context:       xcontext,
	}, nil
}

func encodeCreateUserInteractResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeUpdateUserInteractEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateUserInteractRequest)
		v := svc.UpdateUserInteract(ctx, req)
		return v, nil
	}
}
func decodeUpdateUserInteractRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateUserInteractRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateUserInteractRequest{
		TaskID:  r.TaskID,
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeUpdateUserInteractResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeCreateTaskActiveDetailEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateTaskActiveDetailRequest)
		v := svc.CreateTaskActiveDetail(ctx, req)
		return v, nil
	}
}
func decodeCreateTaskActiveDetailRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateTaskActiveDetailRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateTaskActiveDetailRequest{
		TaskID:  r.TaskID,
		Action:  r.Action,
		Context: xcontext,
	}, nil
}

func encodeCreateTaskActiveDetailResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeUpdateProjectRelationEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateProjectRelationRequest)
		v := svc.UpdateProjectRelation(ctx, req)
		return v, nil
	}
}
func decodeUpdateProjectRelationRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateProjectRelationRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateProjectRelationRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func encodeUpdateProjectRelationResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetProjectMembersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetProjectMembersRequest)
		v := svc.GetProjectMembers(ctx, req)
		return v, nil
	}
}
func decodeGetProjectMembersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetProjectMembersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetProjectMembersRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func encodeGetProjectMembersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetProjectMembersResponse)
	//是复杂类型的数组
	var membersArray = make([]*pb.ProjectMember, 0)

	for _, v := range resp.Members {
		membersArray = append(membersArray, &pb.ProjectMember{
			UserID:           v.UserID,
			InviteID:         v.InviteID,
			InviteType:       v.InviteType,
			State:            v.State,
			AcceptAt:         v.AcceptAt,
			RefuseAt:         v.RefuseAt,
			CreateAt:         v.CreateAt,
			UpdateAt:         v.UpdateAt,
			IsExternalMember: v.IsExternalMember,
		})
	}
	pbresp := &pb.GetProjectMembersResponse{
		Members:     membersArray,
		WorkspaceID: resp.WorkspaceID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetProjectsNameEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetProjectsNameRequest)
		v := svc.GetProjectsName(ctx, req)
		return v, nil
	}
}
func decodeGetProjectsNameRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetProjectsNameRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetProjectsNameRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func encodeGetProjectsNameResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetProjectsNameResponse)
	pbresp := &pb.GetProjectsNameResponse{
		Data: resp.Data,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetUsersMorningAndEveningProgramEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetUsersMorningAndEveningProgramRequest)
		v := svc.GetUsersMorningAndEveningProgram(ctx, req)
		return v, nil
	}
}
func decodeGetUsersMorningAndEveningProgramRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetUsersMorningAndEveningProgramRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetUsersMorningAndEveningProgramRequest{
		UserId:  r.UserId,
		Type:    r.Type,
		Context: xcontext,
	}, nil
}

func encodeGetUsersMorningAndEveningProgramResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetUsersMorningAndEveningProgramResponse)
	pbresp := &pb.GetUsersMorningAndEveningProgramResponse{
		Completed:  resp.Completed,
		Id:         resp.Id,
		Incomplete: resp.Incomplete,
		Titles:     resp.Titles,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskWithParentEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskWithParentRequest)
		v := svc.GetTaskWithParent(ctx, req)
		return v, nil
	}
}
func decodeGetTaskWithParentRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskWithParentRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskWithParentRequest{
		MatterId: r.MatterId,
		UserID:   r.UserID,
		Context:  xcontext,
	}, nil
}

func encodeGetTaskWithParentResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskWithParentResponse)
	//是复杂类型的数组
	var parenttaskconfigsArray = make([]*pb.TaskConfigResp, 0)

	for _, v := range resp.ParentTaskConfigs {
		parenttaskconfigsArray = append(parenttaskconfigsArray, &pb.TaskConfigResp{
			ID:                  v.ID,
			MaxTakerTotal:       v.MaxTakerTotal,
			Category:            v.Category,
			ParentId:            v.ParentId,
			Sort:                v.Sort,
			IsCheckbox:          v.IsCheckbox,
			RefMeetingId:        v.RefMeetingId,
			ProjectId:           v.ProjectId,
			ImportProjectUserId: v.ImportProjectUserId,
			ImportProjectAt:     v.ImportProjectAt,
			Score:               v.Score,
			LastActiveAt:        v.LastActiveAt,
			RepeatChangeId:      v.RepeatChangeId,
			CreatorId:           v.CreatorId,
		})
	}

	var taskrespStruct = &pb.TaskResp{
		TaskID:     resp.TaskResp.TaskID,
		Title:      resp.TaskResp.Title,
		Detail:     resp.TaskResp.Detail,
		MatterType: resp.TaskResp.MatterType,
		Category:   resp.TaskResp.Category,
		ParentID:   resp.TaskResp.ParentID,
		ProjectID:  resp.TaskResp.ProjectID,
		CreatorID:  resp.TaskResp.CreatorID,

		RemindAt: &pb.RemindAt{
			StartRemind:   resp.TaskResp.RemindAt.StartRemind,
			EndRemind:     resp.TaskResp.RemindAt.EndRemind,
			AloneRemind:   resp.TaskResp.RemindAt.AloneRemind,
			MaxAloneTotal: resp.TaskResp.RemindAt.MaxAloneTotal,
		},
	}
	pbresp := &pb.GetTaskWithParentResponse{
		ParentTaskConfigs: parenttaskconfigsArray,
		TaskResp:          taskrespStruct,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetProjectEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetProjectRequest)
		v := svc.GetProject(ctx, req)
		return v, nil
	}
}
func decodeGetProjectRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetProjectRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetProjectRequest{
		Context:   xcontext,
		ProjectID: r.ProjectID,
	}, nil
}

func encodeGetProjectResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetProjectResponse)
	pbresp := &pb.GetProjectResponse{
		CreateAt:    resp.CreateAt,
		CreatorID:   resp.CreatorID,
		IsArchive:   resp.IsArchive,
		ProjectDesc: resp.ProjectDesc,
		ProjectID:   resp.ProjectID,
		ProjectName: resp.ProjectName,
		TargetTime:  resp.TargetTime,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceRequest)
		v := svc.GetWorkspace(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceRequest{
		Context:     xcontext,
		WorkspaceID: r.WorkspaceID,
	}, nil
}

func encodeGetWorkspaceResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceResponse)
	pbresp := &pb.GetWorkspaceResponse{
		CreateAt:    resp.CreateAt,
		CreatorID:   resp.CreatorID,
		Level:       resp.Level,
		Name:        resp.Name,
		State:       resp.State,
		WorkspaceID: resp.WorkspaceID,
		WsDesc:      resp.WsDesc,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceMembersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceMembersRequest)
		v := svc.GetWorkspaceMembers(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceMembersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceMembersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceMembersRequest{
		Context:     xcontext,
		WorkspaceID: r.WorkspaceID,
	}, nil
}

func encodeGetWorkspaceMembersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceMembersResponse)
	//是复杂类型的数组
	var membersArray = make([]*pb.WorkspaceMember, 0)

	for _, v := range resp.Members {
		membersArray = append(membersArray, &pb.WorkspaceMember{
			ID:            v.ID,
			UserID:        v.UserID,
			InviteID:      v.InviteID,
			InviteType:    v.InviteType,
			Identify:      v.Identify,
			State:         v.State,
			AcceptAt:      v.AcceptAt,
			RefuseAt:      v.RefuseAt,
			RevokeAt:      v.RevokeAt,
			ExitAt:        v.ExitAt,
			CreateAt:      v.CreateAt,
			MemberType:    v.MemberType,
			ApprovalAt:    v.ApprovalAt,
			ApprovalState: v.ApprovalState,
		})
	}
	pbresp := &pb.GetWorkspaceMembersResponse{
		CreateAt:    resp.CreateAt,
		CreatorID:   resp.CreatorID,
		Level:       resp.Level,
		Members:     membersArray,
		Name:        resp.Name,
		State:       resp.State,
		WorkspaceID: resp.WorkspaceID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceListEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceListRequest)
		v := svc.GetWorkspaceList(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceListRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceListRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceListRequest{
		UserID:  r.UserID,
		WsType:  r.WsType,
		Context: xcontext,
	}, nil
}

func encodeGetWorkspaceListResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceListResponse)
	//是复杂类型的数组
	var workspacesArray = make([]*pb.Workspace, 0)

	for _, v := range resp.Workspaces {
		workspacesArray = append(workspacesArray, &pb.Workspace{
			ID:        v.ID,
			Name:      v.Name,
			CreatorID: v.CreatorID,
			WsType:    v.WsType,
			Level:     v.Level,
			CreateAt:  v.CreateAt,
			State:     v.State,
		})
	}
	pbresp := &pb.GetWorkspaceListResponse{
		Workspaces: workspacesArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskChildrenEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskChildrenRequest)
		v := svc.GetTaskChildren(ctx, req)
		return v, nil
	}
}
func decodeGetTaskChildrenRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskChildrenRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskChildrenRequest{
		TaskID:   r.TaskID,
		ParentID: r.ParentID,
		Context:  xcontext,
	}, nil
}

func encodeGetTaskChildrenResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskChildrenResponse)
	//是复杂类型的数组
	var taskchildrenArray = make([]*pb.TaskChildren, 0)

	for _, v := range resp.TaskChildren {
		taskchildrenArray = append(taskchildrenArray, &pb.TaskChildren{
			ID:         v.ID,
			CreatorID:  v.CreatorID,
			MatterType: v.MatterType,
		})
	}
	pbresp := &pb.GetTaskChildrenResponse{
		TaskChildren: taskchildrenArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceFileSpaceEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceFileSpaceRequest)
		v := svc.GetWorkspaceFileSpace(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceFileSpaceRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceFileSpaceRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceFileSpaceRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func encodeGetWorkspaceFileSpaceResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceFileSpaceResponse)
	pbresp := &pb.GetWorkspaceFileSpaceResponse{
		AvailableSpace:     resp.AvailableSpace,
		KnowledgeBaseSpace: resp.KnowledgeBaseSpace,
		OtherSpace:         resp.OtherSpace,
		ProcessFileSpace:   resp.ProcessFileSpace,
		TotalSpace:         resp.TotalSpace,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceBindProjectEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceBindProjectRequest)
		v := svc.GetWorkspaceBindProject(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceBindProjectRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceBindProjectRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceBindProjectRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func encodeGetWorkspaceBindProjectResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceBindProjectResponse)
	pbresp := &pb.GetWorkspaceBindProjectResponse{
		ProjectIDs: resp.ProjectIDs,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceExternalMemberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceExternalMemberRequest)
		v := svc.GetWorkspaceExternalMember(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceExternalMemberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceExternalMemberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceExternalMemberRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func encodeGetWorkspaceExternalMemberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceExternalMemberResponse)
	pbresp := &pb.GetWorkspaceExternalMemberResponse{
		ExternalMemberIDs: resp.ExternalMemberIDs,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeExpireEquityUpdateEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(ExpireEquityUpdateRequest)
		v := svc.ExpireEquityUpdate(ctx, req)
		return v, nil
	}
}
func decodeExpireEquityUpdateRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.ExpireEquityUpdateRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return ExpireEquityUpdateRequest{
		ProjectLimitNum:   r.ProjectLimitNum,
		ProjectState:      r.ProjectState,
		UserID:            r.UserID,
		WorkspaceLimitNum: r.WorkspaceLimitNum,
		WorkspaceState:    r.WorkspaceState,
		Context:           xcontext,
	}, nil
}

func encodeExpireEquityUpdateResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(ExpireEquityUpdateResponse)
	pbresp := &pb.ExpireEquityUpdateResponse{
		Result: resp.Result,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateWorkspaceLevelEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateWorkspaceLevelRequest)
		v := svc.UpdateWorkspaceLevel(ctx, req)
		return v, nil
	}
}
func decodeUpdateWorkspaceLevelRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateWorkspaceLevelRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateWorkspaceLevelRequest{
		WorkspaceID: r.WorkspaceID,
		ExpireAt:    r.ExpireAt,
		Level:       r.Level,
		Context:     xcontext,
	}, nil
}

func encodeUpdateWorkspaceLevelResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(UpdateWorkspaceLevelResponse)
	pbresp := &pb.UpdateWorkspaceLevelResponse{
		Result: resp.Result,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskWorkspaceEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskWorkspaceRequest)
		v := svc.GetTaskWorkspace(ctx, req)
		return v, nil
	}
}
func decodeGetTaskWorkspaceRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskWorkspaceRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskWorkspaceRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeGetTaskWorkspaceResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskWorkspaceResponse)
	pbresp := &pb.GetTaskWorkspaceResponse{
		CreatorID:           resp.CreatorID,
		ExpiredAt:           resp.ExpiredAt,
		Level:               resp.Level,
		TaskCreatorID:       resp.TaskCreatorID,
		TaskParentCreatorID: resp.TaskParentCreatorID,
		WorkspaceID:         resp.WorkspaceID,
		WsType:              resp.WsType,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetProjectWorkspaceEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetProjectWorkspaceRequest)
		v := svc.GetProjectWorkspace(ctx, req)
		return v, nil
	}
}
func decodeGetProjectWorkspaceRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetProjectWorkspaceRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetProjectWorkspaceRequest{
		ProjectID: r.ProjectID,
		Context:   xcontext,
	}, nil
}

func encodeGetProjectWorkspaceResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetProjectWorkspaceResponse)
	pbresp := &pb.GetProjectWorkspaceResponse{
		CreatorID:        resp.CreatorID,
		ExpiredAt:        resp.ExpiredAt,
		Level:            resp.Level,
		ProjectCreatorID: resp.ProjectCreatorID,
		WorkspaceID:      resp.WorkspaceID,
		WsType:           resp.WsType,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeAddMemberEquityUpdateEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(AddMemberEquityUpdateRequest)
		v := svc.AddMemberEquityUpdate(ctx, req)
		return v, nil
	}
}
func decodeAddMemberEquityUpdateRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.AddMemberEquityUpdateRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return AddMemberEquityUpdateRequest{
		TaskTakerNum: r.TaskTakerNum,
		WorkspaceNum: r.WorkspaceNum,
		ProjectNum:   r.ProjectNum,
		Context:      xcontext,
	}, nil
}

func encodeAddMemberEquityUpdateResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(AddMemberEquityUpdateResponse)
	pbresp := &pb.AddMemberEquityUpdateResponse{
		Result: resp.Result,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchGetWorkspaceDirectoryEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchGetWorkspaceDirectoryRequest)
		v := svc.BatchGetWorkspaceDirectory(ctx, req)
		return v, nil
	}
}
func decodeBatchGetWorkspaceDirectoryRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchGetWorkspaceDirectoryRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchGetWorkspaceDirectoryRequest{
		WorkspaceDirectoryID: r.WorkspaceDirectoryID,
		Context:              xcontext,
	}, nil
}

func encodeBatchGetWorkspaceDirectoryResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchGetWorkspaceDirectoryResponse)
	//是复杂类型的数组
	var workspacedirectoryArray = make([]*pb.WorkspaceDirectory, 0)

	for _, v := range resp.WorkspaceDirectory {
		workspacedirectoryArray = append(workspacedirectoryArray, &pb.WorkspaceDirectory{
			ID:          v.ID,
			Name:        v.Name,
			ParentID:    v.ParentID,
			WorkSpaceID: v.WorkSpaceID,
			CreatorID:   v.CreatorID,
			CreateAt:    v.CreateAt,
			UpdateAt:    v.UpdateAt,
			IsDefault:   v.IsDefault,
		})
	}
	pbresp := &pb.BatchGetWorkspaceDirectoryResponse{
		WorkspaceDirectory: workspacedirectoryArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetWorkspaceMembersOfTaskEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetWorkspaceMembersOfTaskRequest)
		v := svc.GetWorkspaceMembersOfTask(ctx, req)
		return v, nil
	}
}
func decodeGetWorkspaceMembersOfTaskRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetWorkspaceMembersOfTaskRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetWorkspaceMembersOfTaskRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeGetWorkspaceMembersOfTaskResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetWorkspaceMembersOfTaskResponse)
	pbresp := &pb.GetWorkspaceMembersOfTaskResponse{
		Members: resp.Members,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetBatchWorkspaceInfoEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetBatchWorkspaceInfoRequest)
		v := svc.GetBatchWorkspaceInfo(ctx, req)
		return v, nil
	}
}
func decodeGetBatchWorkspaceInfoRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetBatchWorkspaceInfoRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetBatchWorkspaceInfoRequest{
		WorkspaceID: r.WorkspaceID,
		Context:     xcontext,
	}, nil
}

func encodeGetBatchWorkspaceInfoResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetBatchWorkspaceInfoResponse)
	//是复杂类型的数组
	var workspaceArray = make([]*pb.Workspace, 0)

	for _, v := range resp.Workspace {
		workspaceArray = append(workspaceArray, &pb.Workspace{
			ID:        v.ID,
			Name:      v.Name,
			CreatorID: v.CreatorID,
			WsType:    v.WsType,
			Level:     v.Level,
			CreateAt:  v.CreateAt,
			State:     v.State,
		})
	}
	pbresp := &pb.GetBatchWorkspaceInfoResponse{
		Workspace: workspaceArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeCreateNewInviteEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateNewInviteRequest)
		v := svc.CreateNewInvite(ctx, req)
		return v, nil
	}
}
func decodeCreateNewInviteRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateNewInviteRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateNewInviteRequest{
		RefID:      r.RefID,
		RefType:    r.RefType,
		ContentMap: r.ContentMap,
		Context:    xcontext,
	}, nil
}

func encodeCreateNewInviteResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetObjectiveMemberEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetObjectiveMemberRequest)
		v := svc.GetObjectiveMember(ctx, req)
		return v, nil
	}
}
func decodeGetObjectiveMemberRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetObjectiveMemberRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetObjectiveMemberRequest{
		ObjectiveID: r.ObjectiveID,
		Context:     xcontext,
	}, nil
}

func encodeGetObjectiveMemberResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetObjectiveMemberResponse)
	//是复杂类型的数组
	var memberArray = make([]*pb.ObjectiveMember, 0)

	for _, v := range resp.Member {
		memberArray = append(memberArray, &pb.ObjectiveMember{
			ObjectiveID: v.ObjectiveID,
			CreatorID:   v.CreatorID,
			UserID:      v.UserID,
			InviteID:    v.InviteID,
			State:       v.State,
		})
	}
	pbresp := &pb.GetObjectiveMemberResponse{
		Member: memberArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetObjectiveEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetObjectiveRequest)
		v := svc.GetObjective(ctx, req)
		return v, nil
	}
}
func decodeGetObjectiveRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetObjectiveRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetObjectiveRequest{
		ObjectiveID: r.ObjectiveID,
		Context:     xcontext,
	}, nil
}

func encodeGetObjectiveResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetObjectiveResponse)
	pbresp := &pb.GetObjectiveResponse{
		AffectedUid: resp.AffectedUid,
		CompleteAt:  resp.CompleteAt,
		CreatorID:   resp.CreatorID,
		Detail:      resp.Detail,
		Level:       resp.Level,
		ObjectiveID: resp.ObjectiveID,
		OriginID:    resp.OriginID,
		OriginType:  resp.OriginType,
		Schedule:    resp.Schedule,
		State:       resp.State,
		Title:       resp.Title,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetScreenEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetScreenRequest)
		v := svc.GetScreen(ctx, req)
		return v, nil
	}
}
func decodeGetScreenRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetScreenRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetScreenRequest{
		ScreenID: r.ScreenID,
		Context:  xcontext,
	}, nil
}

func encodeGetScreenResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetScreenResponse)
	pbresp := &pb.GetScreenResponse{
		CreatorID:    resp.CreatorID,
		LocationType: resp.LocationType,
		Name:         resp.Name,
		ProjectID:    resp.ProjectID,
		ScreenID:     resp.ScreenID,
		State:        resp.State,
		Type:         resp.Type,
		WorkspaceID:  resp.WorkspaceID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetScreenMembersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetScreenMembersRequest)
		v := svc.GetScreenMembers(ctx, req)
		return v, nil
	}
}
func decodeGetScreenMembersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetScreenMembersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetScreenMembersRequest{
		ScreenID: r.ScreenID,
		Context:  xcontext,
	}, nil
}

func encodeGetScreenMembersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetScreenMembersResponse)
	pbresp := &pb.GetScreenMembersResponse{
		Members: resp.Members,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetScreensByCardTypeEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetScreensByCardTypeRequest)
		v := svc.GetScreensByCardType(ctx, req)
		return v, nil
	}
}
func decodeGetScreensByCardTypeRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetScreensByCardTypeRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetScreensByCardTypeRequest{
		CardType: r.CardType,
		RefID:    r.RefID,
		Context:  xcontext,
	}, nil
}

func encodeGetScreensByCardTypeResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetScreensByCardTypeResponse)
	//是复杂类型的数组
	var dataArray = make([]*pb.GetScreenResponse, 0)

	for _, v := range resp.Data {
		dataArray = append(dataArray, &pb.GetScreenResponse{
			ScreenID:     v.ScreenID,
			Name:         v.Name,
			LocationType: v.LocationType,
			WorkspaceID:  v.WorkspaceID,
			ProjectID:    v.ProjectID,
			Type:         v.Type,
			State:        v.State,
			CreatorID:    v.CreatorID,
		})
	}
	pbresp := &pb.GetScreensByCardTypeResponse{
		Data: dataArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
