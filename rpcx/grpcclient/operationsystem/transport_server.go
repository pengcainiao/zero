// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package operationsystem

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeSendOperationForLoginUserEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SendOperationRequest)
		v := svc.SendOperationForLoginUser(ctx, req)
		return v, nil
	}
}
func decodeSendOperationForLoginUserRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SendOperationRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SendOperationRequest{
		UserName: r.UserName,
		Context:  xcontext,
	}, nil
}

func encodeSendOperationForLoginUserResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}
