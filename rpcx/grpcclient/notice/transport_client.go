// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package notice

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeSendSseMessageRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(SendSseMessageRequest)
	var xdata *pb.ExchangeMessage
	if r.Data != nil {
		xdata = &pb.ExchangeMessage{
			Code:     r.Data.Code,
			NotifyTo: r.Data.NotifyTo,
			Message:  r.Data.Message,
			Title:    r.Data.Title,
			RefID:    r.Data.RefID,
		}
	}
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.SendSseMessageRequest{
		Event:   r.Event,
		Data:    xdata,
		Context: xcontext,
	}, nil
}

func decodeSendSseMessageResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeTempRemoveMessageRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(TempRemoveMessageRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.TempRemoveMessageRequest{
		FlyeleID: r.FlyeleID,
		UserID:   r.UserID,
		Context:  xcontext,
	}, nil
}

func decodeTempRemoveMessageResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeSendSMSMessageRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(SendSMSMessageRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.SendSMSMessageRequest{
		TemplateCode: r.TemplateCode,
		PhoneNumber:  r.PhoneNumber,
		Parameters:   r.Parameters,
		Context:      xcontext,
	}, nil
}

func decodeSendSMSMessageResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeRecentlyUpdateRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(RecentlyUpdateRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	var xpaging *pb.Paging
	if r.Paging != nil {
		xpaging = &pb.Paging{
			PageNumber: r.Paging.PageNumber,
			PageRecord: r.Paging.PageRecord,
		}
	}
	return &pb.RecentlyUpdateRequest{
		Context:     xcontext,
		FilterBy:    r.FilterBy,
		TaskID:      r.TaskID,
		TopParentID: r.TopParentID,
		ShowMode:    r.ShowMode,
		Paging:      xpaging,
	}, nil
}

func decodeRecentlyUpdateResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.RecentlyUpdateResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var tasksArray = make([]*RecentlyUpdateTasks, 0)
	for _, v := range pbresp.Tasks {
		tasksArray = append(tasksArray, &RecentlyUpdateTasks{
			//判断字段是否为复杂类型
			RefID: v.RefID,
			//判断字段是否为复杂类型
			RefType: v.RefType,
			//判断字段是否为复杂类型
			CommentID: v.CommentID,
			//判断字段是否为复杂类型
			FnType: v.FnType,
			//判断字段是否为复杂类型
			Unread: v.Unread,
			//判断字段是否为复杂类型
			RemindMe: v.RemindMe,
			//判断字段是否为复杂类型
			IsFront: v.IsFront,
			//判断字段是否为复杂类型
			IsRedDot: v.IsRedDot,
			//判断字段是否为复杂类型
			TopmostAt: v.TopmostAt,
			//判断字段是否为复杂类型
			IsChild: v.IsChild,
			//判断字段是否为复杂类型
			IsUnreadChild: v.IsUnreadChild,
			//判断字段是否为复杂类型
			TopParentID: v.TopParentID,
		})
	}

	return grpcbase.Response{
		Data: RecentlyUpdateResponse{
			HasRedDot: pbresp.HasRedDot,
			Tasks:     tasksArray,
			Total:     pbresp.Total,
		},
	}, nil
}
func encodeTimeCollectTransToMeetingRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(TimeCollectTransToMeetingRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.TimeCollectTransToMeetingRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func decodeTimeCollectTransToMeetingResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeQueryRecordUnreadMessagesRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(QueryRecordUnreadMessagesRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.QueryRecordUnreadMessagesRequest{
		Context: xcontext,
	}, nil
}

func decodeQueryRecordUnreadMessagesResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.QueryRecordUnreadMessagesResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var commentdetailsArray = make([]*CommentDetail, 0)
	for _, v := range pbresp.CommentDetails {
		commentdetailsArray = append(commentdetailsArray, &CommentDetail{
			//判断字段是否为复杂类型
			RecordID: v.RecordID,
			//判断字段是否为复杂类型
			Comments: v.Comments,
			//判断字段是否为复杂类型
			Total: v.Total,
		})
	}

	return grpcbase.Response{
		Data: QueryRecordUnreadMessagesResponse{
			CommentDetails: commentdetailsArray,
			Total:          pbresp.Total,
		},
	}, nil
}
func encodeUpdateUserPrevMessageIDRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateUserPrevMessageIDRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateUserPrevMessageIDRequest{
		TaskID:    r.TaskID,
		CommentID: r.CommentID,
		Context:   xcontext,
	}, nil
}

func decodeUpdateUserPrevMessageIDResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeQueryUserUnreadMessageSummaryRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(QueryUserUnreadMessageSummaryRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.QueryUserUnreadMessageSummaryRequest{
		Context: xcontext,
	}, nil
}

func decodeQueryUserUnreadMessageSummaryResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.QueryUserUnreadMessageSummaryResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	var taskStruct = &UnreadTaskMessage{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		UnreadTotal: pbresp.Task.UnreadTotal,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		HasRedDot: pbresp.Task.HasRedDot,
	}

	var recordStruct = &UnreadRecordMessage{
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		UnreadTotal: pbresp.Record.UnreadTotal,
		//判断字段是否为复杂类型2
		//判断字段是否为复杂类型3
		NewShareAvatar: pbresp.Record.NewShareAvatar,
	}

	return grpcbase.Response{
		Data: QueryUserUnreadMessageSummaryResponse{
			Record: recordStruct,
			Task:   taskStruct,
		},
	}, nil
}
