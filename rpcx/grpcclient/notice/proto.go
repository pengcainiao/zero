// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package notice

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	SendSseMessageHandler                func(ctx context.Context, req SendSseMessageRequest) grpcbase.Response
	TempRemoveMessageHandler             func(ctx context.Context, req TempRemoveMessageRequest) grpcbase.Response
	SendSMSMessageHandler                func(ctx context.Context, req SendSMSMessageRequest) grpcbase.Response
	RecentlyUpdateHandler                func(ctx context.Context, req RecentlyUpdateRequest) grpcbase.Response
	TimeCollectTransToMeetingHandler     func(ctx context.Context, req TimeCollectTransToMeetingRequest) grpcbase.Response
	QueryRecordUnreadMessagesHandler     func(ctx context.Context, req QueryRecordUnreadMessagesRequest) grpcbase.Response
	UpdateUserPrevMessageIDHandler       func(ctx context.Context, req UpdateUserPrevMessageIDRequest) grpcbase.Response
	QueryUserUnreadMessageSummaryHandler func(ctx context.Context, req QueryUserUnreadMessageSummaryRequest) grpcbase.Response
)

type Repository interface {
	SendSseMessage(ctx context.Context, request SendSseMessageRequest) grpcbase.Response
	TempRemoveMessage(ctx context.Context, request TempRemoveMessageRequest) grpcbase.Response
	SendSMSMessage(ctx context.Context, request SendSMSMessageRequest) grpcbase.Response
	RecentlyUpdate(ctx context.Context, request RecentlyUpdateRequest) grpcbase.Response
	TimeCollectTransToMeeting(ctx context.Context, request TimeCollectTransToMeetingRequest) grpcbase.Response
	QueryRecordUnreadMessages(ctx context.Context, request QueryRecordUnreadMessagesRequest) grpcbase.Response
	UpdateUserPrevMessageID(ctx context.Context, request UpdateUserPrevMessageIDRequest) grpcbase.Response
	QueryUserUnreadMessageSummary(ctx context.Context, request QueryUserUnreadMessageSummaryRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CommentDetail struct {
	RecordID string   `json:"record_id,omitempty"`
	Comments []string `json:"comments,omitempty"`
	Total    int32    `json:"total,omitempty"`
}

func (s CommentDetail) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ExchangeMessage struct {
	Code     int32    `json:"code,omitempty"`
	NotifyTo []string `json:"notify_to,omitempty"`
	Message  string   `json:"message,omitempty"`
	Title    string   `json:"title,omitempty"`
	RefID    string   `json:"ref_id,omitempty"`
}

func (s ExchangeMessage) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Paging struct {
	PageNumber int32 `json:"page_number,omitempty"`
	PageRecord int32 `json:"page_record,omitempty"`
}

func (s Paging) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryRecordUnreadMessagesRequest struct {
	Context *UserContext `json:"context,omitempty"`
}

func (s QueryRecordUnreadMessagesRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryRecordUnreadMessagesResponse struct {
	CommentDetails []*CommentDetail `json:"comment_details,omitempty"`
	Total          int32            `json:"total,omitempty"`
}

func (s QueryRecordUnreadMessagesResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryUserUnreadMessageSummaryRequest struct {
	Context *UserContext `json:"context,omitempty"`
}

func (s QueryUserUnreadMessageSummaryRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryUserUnreadMessageSummaryResponse struct {
	Task   *UnreadTaskMessage   `json:"task,omitempty"`
	Record *UnreadRecordMessage `json:"record,omitempty"`
}

func (s QueryUserUnreadMessageSummaryResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecentlyUpdateRequest struct {
	Context     *UserContext `json:"context,omitempty"`
	FilterBy    string       `json:"filter_by,omitempty"`
	TaskID      string       `json:"task_id,omitempty"`
	TopParentID string       `json:"top_parent_id,omitempty"`
	ShowMode    int32        `json:"show_mode,omitempty"`
	Paging      *Paging      `json:"paging,omitempty"`
}

func (s RecentlyUpdateRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecentlyUpdateResponse struct {
	Total     int32                  `json:"total,omitempty"`
	HasRedDot bool                   `json:"has_red_dot,omitempty"`
	Tasks     []*RecentlyUpdateTasks `json:"tasks,omitempty"`
}

func (s RecentlyUpdateResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type RecentlyUpdateTasks struct {
	RefID         string `json:"ref_id,omitempty"`
	RefType       string `json:"ref_type,omitempty"`
	CommentID     string `json:"comment_id,omitempty"`
	FnType        int32  `json:"fn_type,omitempty"`
	Unread        int32  `json:"unread,omitempty"`
	RemindMe      bool   `json:"remind_me,omitempty"`
	IsFront       bool   `json:"is_front,omitempty"`
	IsRedDot      bool   `json:"is_red_dot,omitempty"`
	TopmostAt     int64  `json:"topmost_at,omitempty"`
	IsChild       bool   `json:"is_child,omitempty"`
	IsUnreadChild bool   `json:"is_unread_child,omitempty"`
	TopParentID   string `json:"top_parent_id,omitempty"`
}

func (s RecentlyUpdateTasks) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendSMSMessageRequest struct {
	TemplateCode string            `json:"template_code,omitempty"`
	PhoneNumber  []string          `json:"phone_number,omitempty"`
	Parameters   map[string]string `json:"parameters,omitempty"`
	Context      *UserContext      `json:"context,omitempty"`
}

func (s SendSMSMessageRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type SendSseMessageRequest struct {
	Event   string           `json:"event,omitempty"`
	Data    *ExchangeMessage `json:"data,omitempty"`
	Context *UserContext     `json:"context,omitempty"`
}

func (s SendSseMessageRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TempRemoveMessageRequest struct {
	FlyeleID string       `json:"flyele_id,omitempty"`
	UserID   []string     `json:"user_id,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s TempRemoveMessageRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TimeCollectTransToMeetingRequest struct {
	TaskID  string       `json:"task_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s TimeCollectTransToMeetingRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UnreadRecordMessage struct {
	UnreadTotal    int32  `json:"unread_total,omitempty"`
	NewShareAvatar string `json:"new_share_avatar,omitempty"`
}

func (s UnreadRecordMessage) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UnreadTaskMessage struct {
	UnreadTotal int32 `json:"unread_total,omitempty"`
	HasRedDot   bool  `json:"has_red_dot,omitempty"`
}

func (s UnreadTaskMessage) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateUserPrevMessageIDRequest struct {
	TaskID    string       `json:"task_id,omitempty"`
	CommentID string       `json:"comment_id,omitempty"`
	Context   *UserContext `json:"context,omitempty"`
}

func (s UpdateUserPrevMessageIDRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建notice的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) SendSseMessage(ctx context.Context, req SendSseMessageRequest) grpcbase.Response {
	if SendSseMessageHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/SendSseMessage", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return SendSseMessageHandler(ctx, req.(SendSseMessageRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) TempRemoveMessage(ctx context.Context, req TempRemoveMessageRequest) grpcbase.Response {
	if TempRemoveMessageHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/TempRemoveMessage", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return TempRemoveMessageHandler(ctx, req.(TempRemoveMessageRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) SendSMSMessage(ctx context.Context, req SendSMSMessageRequest) grpcbase.Response {
	if SendSMSMessageHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/SendSMSMessage", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return SendSMSMessageHandler(ctx, req.(SendSMSMessageRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) RecentlyUpdate(ctx context.Context, req RecentlyUpdateRequest) grpcbase.Response {
	if RecentlyUpdateHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/RecentlyUpdate", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return RecentlyUpdateHandler(ctx, req.(RecentlyUpdateRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) TimeCollectTransToMeeting(ctx context.Context, req TimeCollectTransToMeetingRequest) grpcbase.Response {
	if TimeCollectTransToMeetingHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/TimeCollectTransToMeeting", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return TimeCollectTransToMeetingHandler(ctx, req.(TimeCollectTransToMeetingRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) QueryRecordUnreadMessages(ctx context.Context, req QueryRecordUnreadMessagesRequest) grpcbase.Response {
	if QueryRecordUnreadMessagesHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/QueryRecordUnreadMessages", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return QueryRecordUnreadMessagesHandler(ctx, req.(QueryRecordUnreadMessagesRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateUserPrevMessageID(ctx context.Context, req UpdateUserPrevMessageIDRequest) grpcbase.Response {
	if UpdateUserPrevMessageIDHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/UpdateUserPrevMessageID", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateUserPrevMessageIDHandler(ctx, req.(UpdateUserPrevMessageIDRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) QueryUserUnreadMessageSummary(ctx context.Context, req QueryUserUnreadMessageSummaryRequest) grpcbase.Response {
	if QueryUserUnreadMessageSummaryHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.notice/QueryUserUnreadMessageSummary", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return QueryUserUnreadMessageSummaryHandler(ctx, req.(QueryUserUnreadMessageSummaryRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
