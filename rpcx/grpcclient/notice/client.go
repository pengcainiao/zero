// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package notice

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"

	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient notice GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.NoticeSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleSendSseMessage 客户端处理逻辑
func (c *GrpcClient) HandleSendSseMessage(ctx context.Context, req SendSseMessageRequest) error {
	resp := c.client.SendSseMessage(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleTempRemoveMessage 客户端处理逻辑
func (c *GrpcClient) HandleTempRemoveMessage(ctx context.Context, req TempRemoveMessageRequest) error {
	resp := c.client.TempRemoveMessage(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleSendSMSMessage 客户端处理逻辑
func (c *GrpcClient) HandleSendSMSMessage(ctx context.Context, req SendSMSMessageRequest) error {
	resp := c.client.SendSMSMessage(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleRecentlyUpdate 客户端处理逻辑
func (c *GrpcClient) HandleRecentlyUpdate(ctx context.Context, req RecentlyUpdateRequest) *RecentlyUpdateResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.notice/RecentlyUpdate", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.RecentlyUpdate(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 RecentlyUpdate 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(RecentlyUpdateResponse)
		return &m
	}
	return nil
}

// HandleTimeCollectTransToMeeting 客户端处理逻辑
func (c *GrpcClient) HandleTimeCollectTransToMeeting(ctx context.Context, req TimeCollectTransToMeetingRequest) error {
	resp := c.client.TimeCollectTransToMeeting(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleQueryRecordUnreadMessages 客户端处理逻辑
func (c *GrpcClient) HandleQueryRecordUnreadMessages(ctx context.Context, req QueryRecordUnreadMessagesRequest) *QueryRecordUnreadMessagesResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.notice/QueryRecordUnreadMessages", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.QueryRecordUnreadMessages(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 QueryRecordUnreadMessages 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(QueryRecordUnreadMessagesResponse)
		return &m
	}
	return nil
}

// HandleUpdateUserPrevMessageID 客户端处理逻辑
func (c *GrpcClient) HandleUpdateUserPrevMessageID(ctx context.Context, req UpdateUserPrevMessageIDRequest) error {
	resp := c.client.UpdateUserPrevMessageID(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleQueryUserUnreadMessageSummary 客户端处理逻辑
func (c *GrpcClient) HandleQueryUserUnreadMessageSummary(ctx context.Context, req QueryUserUnreadMessageSummaryRequest) *QueryUserUnreadMessageSummaryResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.notice/QueryUserUnreadMessageSummary", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.QueryUserUnreadMessageSummary(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 QueryUserUnreadMessageSummary 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(QueryUserUnreadMessageSummaryResponse)
		return &m
	}
	return nil
}
