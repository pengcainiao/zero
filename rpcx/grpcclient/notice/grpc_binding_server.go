// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package notice

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	sendSseMessage                grpctransport.Handler
	tempRemoveMessage             grpctransport.Handler
	sendSMSMessage                grpctransport.Handler
	recentlyUpdate                grpctransport.Handler
	timeCollectTransToMeeting     grpctransport.Handler
	queryRecordUnreadMessages     grpctransport.Handler
	updateUserPrevMessageID       grpctransport.Handler
	queryUserUnreadMessageSummary grpctransport.Handler
}

func (b *serverBinding) SendSseMessage(ctx context.Context, req *pb.SendSseMessageRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendSseMessage receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.sendSseMessage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) TempRemoveMessage(ctx context.Context, req *pb.TempRemoveMessageRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TempRemoveMessage receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.tempRemoveMessage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) SendSMSMessage(ctx context.Context, req *pb.SendSMSMessageRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendSMSMessage receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.sendSMSMessage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) RecentlyUpdate(ctx context.Context, req *pb.RecentlyUpdateRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecentlyUpdate receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.recentlyUpdate.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) TimeCollectTransToMeeting(ctx context.Context, req *pb.TimeCollectTransToMeetingRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TimeCollectTransToMeeting receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.timeCollectTransToMeeting.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) QueryRecordUnreadMessages(ctx context.Context, req *pb.QueryRecordUnreadMessagesRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryRecordUnreadMessages receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.queryRecordUnreadMessages.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateUserPrevMessageID(ctx context.Context, req *pb.UpdateUserPrevMessageIDRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUserPrevMessageID receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateUserPrevMessageID.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) QueryUserUnreadMessageSummary(ctx context.Context, req *pb.QueryUserUnreadMessageSummaryRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryUserUnreadMessageSummary receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.queryUserUnreadMessageSummary.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterNoticeServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"sendSseMessage":                b.sendSseMessage,
		"tempRemoveMessage":             b.tempRemoveMessage,
		"sendSMSMessage":                b.sendSMSMessage,
		"recentlyUpdate":                b.recentlyUpdate,
		"timeCollectTransToMeeting":     b.timeCollectTransToMeeting,
		"queryRecordUnreadMessages":     b.queryRecordUnreadMessages,
		"updateUserPrevMessageID":       b.updateUserPrevMessageID,
		"queryUserUnreadMessageSummary": b.queryUserUnreadMessageSummary,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		sendSseMessage: grpcbase.CreateGRPCServer(
			makeSendSseMessageEndpoint(svc),
			decodeSendSseMessageRequest,
			encodeSendSseMessageResponse,
		),
		tempRemoveMessage: grpcbase.CreateGRPCServer(
			makeTempRemoveMessageEndpoint(svc),
			decodeTempRemoveMessageRequest,
			encodeTempRemoveMessageResponse,
		),
		sendSMSMessage: grpcbase.CreateGRPCServer(
			makeSendSMSMessageEndpoint(svc),
			decodeSendSMSMessageRequest,
			encodeSendSMSMessageResponse,
		),
		recentlyUpdate: grpcbase.CreateGRPCServer(
			makeRecentlyUpdateEndpoint(svc),
			decodeRecentlyUpdateRequest,
			encodeRecentlyUpdateResponse,
		),
		timeCollectTransToMeeting: grpcbase.CreateGRPCServer(
			makeTimeCollectTransToMeetingEndpoint(svc),
			decodeTimeCollectTransToMeetingRequest,
			encodeTimeCollectTransToMeetingResponse,
		),
		queryRecordUnreadMessages: grpcbase.CreateGRPCServer(
			makeQueryRecordUnreadMessagesEndpoint(svc),
			decodeQueryRecordUnreadMessagesRequest,
			encodeQueryRecordUnreadMessagesResponse,
		),
		updateUserPrevMessageID: grpcbase.CreateGRPCServer(
			makeUpdateUserPrevMessageIDEndpoint(svc),
			decodeUpdateUserPrevMessageIDRequest,
			encodeUpdateUserPrevMessageIDResponse,
		),
		queryUserUnreadMessageSummary: grpcbase.CreateGRPCServer(
			makeQueryUserUnreadMessageSummaryEndpoint(svc),
			decodeQueryUserUnreadMessageSummaryRequest,
			encodeQueryUserUnreadMessageSummaryResponse,
		),
	}
}
