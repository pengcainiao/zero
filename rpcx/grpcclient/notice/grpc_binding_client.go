// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package notice

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.NoticeSVC), &clientBinding{})
}

type clientBinding struct {
	sendSseMessage                endpoint.Endpoint
	tempRemoveMessage             endpoint.Endpoint
	sendSMSMessage                endpoint.Endpoint
	recentlyUpdate                endpoint.Endpoint
	timeCollectTransToMeeting     endpoint.Endpoint
	queryRecordUnreadMessages     endpoint.Endpoint
	updateUserPrevMessageID       endpoint.Endpoint
	queryUserUnreadMessageSummary endpoint.Endpoint
}

func (c *clientBinding) SendSseMessage(ctx context.Context, params SendSseMessageRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendSseMessage request context is nil，trace span将无法生效")
	}
	response, err := c.sendSseMessage(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) TempRemoveMessage(ctx context.Context, params TempRemoveMessageRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TempRemoveMessage request context is nil，trace span将无法生效")
	}
	response, err := c.tempRemoveMessage(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) SendSMSMessage(ctx context.Context, params SendSMSMessageRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：SendSMSMessage request context is nil，trace span将无法生效")
	}
	response, err := c.sendSMSMessage(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) RecentlyUpdate(ctx context.Context, params RecentlyUpdateRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：RecentlyUpdate request context is nil，trace span将无法生效")
	}
	response, err := c.recentlyUpdate(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) TimeCollectTransToMeeting(ctx context.Context, params TimeCollectTransToMeetingRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：TimeCollectTransToMeeting request context is nil，trace span将无法生效")
	}
	response, err := c.timeCollectTransToMeeting(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) QueryRecordUnreadMessages(ctx context.Context, params QueryRecordUnreadMessagesRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryRecordUnreadMessages request context is nil，trace span将无法生效")
	}
	response, err := c.queryRecordUnreadMessages(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) UpdateUserPrevMessageID(ctx context.Context, params UpdateUserPrevMessageIDRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateUserPrevMessageID request context is nil，trace span将无法生效")
	}
	response, err := c.updateUserPrevMessageID(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) QueryUserUnreadMessageSummary(ctx context.Context, params QueryUserUnreadMessageSummaryRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryUserUnreadMessageSummary request context is nil，trace span将无法生效")
	}
	response, err := c.queryUserUnreadMessageSummary(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.sendSseMessage = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"SendSseMessage",
		encodeSendSseMessageRequest,
		decodeSendSseMessageResponse)
	c.tempRemoveMessage = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"TempRemoveMessage",
		encodeTempRemoveMessageRequest,
		decodeTempRemoveMessageResponse)
	c.sendSMSMessage = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"SendSMSMessage",
		encodeSendSMSMessageRequest,
		decodeSendSMSMessageResponse)
	c.recentlyUpdate = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"RecentlyUpdate",
		encodeRecentlyUpdateRequest,
		decodeRecentlyUpdateResponse)
	c.timeCollectTransToMeeting = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"TimeCollectTransToMeeting",
		encodeTimeCollectTransToMeetingRequest,
		decodeTimeCollectTransToMeetingResponse)
	c.queryRecordUnreadMessages = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"QueryRecordUnreadMessages",
		encodeQueryRecordUnreadMessagesRequest,
		decodeQueryRecordUnreadMessagesResponse)
	c.updateUserPrevMessageID = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"UpdateUserPrevMessageID",
		encodeUpdateUserPrevMessageIDRequest,
		decodeUpdateUserPrevMessageIDResponse)
	c.queryUserUnreadMessageSummary = grpcbase.CreateGRPCClientEndpoint(cc, "pb.Notice",
		"QueryUserUnreadMessageSummary",
		encodeQueryUserUnreadMessageSummaryRequest,
		decodeQueryUserUnreadMessageSummaryResponse)
}
