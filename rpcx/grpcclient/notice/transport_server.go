// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package notice

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeSendSseMessageEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SendSseMessageRequest)
		v := svc.SendSseMessage(ctx, req)
		return v, nil
	}
}
func decodeSendSseMessageRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SendSseMessageRequest)
	var xdata *ExchangeMessage
	if r.Data != nil {
		xdata = &ExchangeMessage{
			Code:     r.Data.Code,
			NotifyTo: r.Data.NotifyTo,
			Message:  r.Data.Message,
			Title:    r.Data.Title,
			RefID:    r.Data.RefID,
		}
	}
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SendSseMessageRequest{
		Event:   r.Event,
		Data:    xdata,
		Context: xcontext,
	}, nil
}

func encodeSendSseMessageResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeTempRemoveMessageEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(TempRemoveMessageRequest)
		v := svc.TempRemoveMessage(ctx, req)
		return v, nil
	}
}
func decodeTempRemoveMessageRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.TempRemoveMessageRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return TempRemoveMessageRequest{
		FlyeleID: r.FlyeleID,
		UserID:   r.UserID,
		Context:  xcontext,
	}, nil
}

func encodeTempRemoveMessageResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeSendSMSMessageEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(SendSMSMessageRequest)
		v := svc.SendSMSMessage(ctx, req)
		return v, nil
	}
}
func decodeSendSMSMessageRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.SendSMSMessageRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return SendSMSMessageRequest{
		TemplateCode: r.TemplateCode,
		PhoneNumber:  r.PhoneNumber,
		Parameters:   r.Parameters,
		Context:      xcontext,
	}, nil
}

func encodeSendSMSMessageResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeRecentlyUpdateEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(RecentlyUpdateRequest)
		v := svc.RecentlyUpdate(ctx, req)
		return v, nil
	}
}
func decodeRecentlyUpdateRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.RecentlyUpdateRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	var xpaging *Paging
	if r.Paging != nil {
		xpaging = &Paging{
			PageNumber: r.Paging.PageNumber,
			PageRecord: r.Paging.PageRecord,
		}
	}

	return RecentlyUpdateRequest{
		Context:     xcontext,
		FilterBy:    r.FilterBy,
		TaskID:      r.TaskID,
		TopParentID: r.TopParentID,
		ShowMode:    r.ShowMode,
		Paging:      xpaging,
	}, nil
}

func encodeRecentlyUpdateResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(RecentlyUpdateResponse)
	//是复杂类型的数组
	var tasksArray = make([]*pb.RecentlyUpdateTasks, 0)

	for _, v := range resp.Tasks {
		tasksArray = append(tasksArray, &pb.RecentlyUpdateTasks{
			RefID:         v.RefID,
			RefType:       v.RefType,
			CommentID:     v.CommentID,
			FnType:        v.FnType,
			Unread:        v.Unread,
			RemindMe:      v.RemindMe,
			IsFront:       v.IsFront,
			IsRedDot:      v.IsRedDot,
			TopmostAt:     v.TopmostAt,
			IsChild:       v.IsChild,
			IsUnreadChild: v.IsUnreadChild,
			TopParentID:   v.TopParentID,
		})
	}
	pbresp := &pb.RecentlyUpdateResponse{
		HasRedDot: resp.HasRedDot,
		Tasks:     tasksArray,
		Total:     resp.Total,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeTimeCollectTransToMeetingEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(TimeCollectTransToMeetingRequest)
		v := svc.TimeCollectTransToMeeting(ctx, req)
		return v, nil
	}
}
func decodeTimeCollectTransToMeetingRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.TimeCollectTransToMeetingRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return TimeCollectTransToMeetingRequest{
		TaskID:  r.TaskID,
		Context: xcontext,
	}, nil
}

func encodeTimeCollectTransToMeetingResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeQueryRecordUnreadMessagesEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(QueryRecordUnreadMessagesRequest)
		v := svc.QueryRecordUnreadMessages(ctx, req)
		return v, nil
	}
}
func decodeQueryRecordUnreadMessagesRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.QueryRecordUnreadMessagesRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return QueryRecordUnreadMessagesRequest{
		Context: xcontext,
	}, nil
}

func encodeQueryRecordUnreadMessagesResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(QueryRecordUnreadMessagesResponse)
	//是复杂类型的数组
	var commentdetailsArray = make([]*pb.CommentDetail, 0)

	for _, v := range resp.CommentDetails {
		commentdetailsArray = append(commentdetailsArray, &pb.CommentDetail{
			RecordID: v.RecordID,
			Comments: v.Comments,
			Total:    v.Total,
		})
	}
	pbresp := &pb.QueryRecordUnreadMessagesResponse{
		CommentDetails: commentdetailsArray,
		Total:          resp.Total,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateUserPrevMessageIDEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateUserPrevMessageIDRequest)
		v := svc.UpdateUserPrevMessageID(ctx, req)
		return v, nil
	}
}
func decodeUpdateUserPrevMessageIDRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateUserPrevMessageIDRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateUserPrevMessageIDRequest{
		TaskID:    r.TaskID,
		CommentID: r.CommentID,
		Context:   xcontext,
	}, nil
}

func encodeUpdateUserPrevMessageIDResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeQueryUserUnreadMessageSummaryEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(QueryUserUnreadMessageSummaryRequest)
		v := svc.QueryUserUnreadMessageSummary(ctx, req)
		return v, nil
	}
}
func decodeQueryUserUnreadMessageSummaryRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.QueryUserUnreadMessageSummaryRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return QueryUserUnreadMessageSummaryRequest{
		Context: xcontext,
	}, nil
}

func encodeQueryUserUnreadMessageSummaryResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(QueryUserUnreadMessageSummaryResponse)

	var taskStruct = &pb.UnreadTaskMessage{
		UnreadTotal: resp.Task.UnreadTotal,
		HasRedDot:   resp.Task.HasRedDot,
	}

	var recordStruct = &pb.UnreadRecordMessage{
		UnreadTotal:    resp.Record.UnreadTotal,
		NewShareAvatar: resp.Record.NewShareAvatar,
	}
	pbresp := &pb.QueryUserUnreadMessageSummaryResponse{
		Record: recordStruct,
		Task:   taskStruct,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
