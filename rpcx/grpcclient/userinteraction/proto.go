// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package userinteraction

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

var (
	CommonCreateCommentHandler       func(ctx context.Context, req CommonCreateCommentRequest) grpcbase.Response
	GetTaskNewCommentHandler         func(ctx context.Context, req GetTaskNewCommentRequest) grpcbase.Response
	UpdateCommentFileInfoHandler     func(ctx context.Context, req UpdateCommentFileInfoRequest) grpcbase.Response
	QueryUserTaskCommentTotalHandler func(ctx context.Context, req QueryUserTaskCommentTotalRequest) grpcbase.Response
	BatchQueryChatUsersHandler       func(ctx context.Context, req BatchQueryChatUsersRequest) grpcbase.Response
)

type Repository interface {
	CommonCreateComment(ctx context.Context, request CommonCreateCommentRequest) grpcbase.Response
	GetTaskNewComment(ctx context.Context, request GetTaskNewCommentRequest) grpcbase.Response
	UpdateCommentFileInfo(ctx context.Context, request UpdateCommentFileInfoRequest) grpcbase.Response
	QueryUserTaskCommentTotal(ctx context.Context, request QueryUserTaskCommentTotalRequest) grpcbase.Response
	BatchQueryChatUsers(ctx context.Context, request BatchQueryChatUsersRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryChatUsersRequest struct {
	Context *UserContext `json:"context,omitempty"`
	ChatsID []string     `json:"chats_id,omitempty"`
}

func (s BatchQueryChatUsersRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type BatchQueryChatUsersResponse struct {
	ChatUsers []*ChatUser `json:"chat_users,omitempty"`
}

func (s BatchQueryChatUsersResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type ChatUser struct {
	ChatID string `json:"chat_id,omitempty"`
	UserID string `json:"user_id,omitempty"`
}

func (s ChatUser) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CommonCreateCommentRequest struct {
	RefType        string            `json:"ref_type,omitempty"`
	RefID          string            `json:"ref_id,omitempty"`
	MsgType        int64             `json:"msg_type,omitempty"`
	SystemType     int64             `json:"system_type,omitempty"`
	Content        string            `json:"content,omitempty"`
	AffectedUID    string            `json:"affected_uid,omitempty"`
	NotifyUID      string            `json:"notify_uid,omitempty"`
	NotPushDynamic bool              `json:"not_push_dynamic,omitempty"`
	Context        *UserContext      `json:"context,omitempty"`
	NotStore       bool              `json:"not_store,omitempty"`
	Cronjobs       string            `json:"cronjobs,omitempty"`
	Changes        map[string]string `json:"changes,omitempty"`
	NotPushSocket  bool              `json:"not_push_socket,omitempty"`
	BatchID        string            `json:"batch_id,omitempty"`
	BatchType      int32             `json:"batch_type,omitempty"`
	BatchRefID     string            `json:"batch_ref_id,omitempty"`
	MarkRead       bool              `json:"mark_read,omitempty"`
	MsgForamt      int64             `json:"msg_foramt,omitempty"`
	Files          []*File           `json:"files,omitempty"`
	KrID           string            `json:"kr_id,omitempty"`
}

func (s CommonCreateCommentRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type CommonCreateCommentResponse struct {
	CommentID string `json:"comment_id,omitempty"`
}

func (s CommonCreateCommentResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type File struct {
	ID     string `json:"id,omitempty"`
	Entry  string `json:"entry,omitempty"`
	Name   string `json:"name,omitempty"`
	Origin string `json:"origin,omitempty"`
	Size   string `json:"size,omitempty"`
}

func (s File) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskNewCommentRequest struct {
	CommentMap map[string]string `json:"comment_map,omitempty"`
	Context    *UserContext      `json:"context,omitempty"`
}

func (s GetTaskNewCommentRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetTaskNewCommentResponse struct {
	Data []*TaskNewComment `json:"data,omitempty"`
}

func (s GetTaskNewCommentResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type MarkReadCommentRequest struct {
	RefType string       `json:"ref_type,omitempty"`
	RefID   string       `json:"ref_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s MarkReadCommentRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryUserTaskCommentTotalRequest struct {
	RefID   string       `json:"ref_id,omitempty"`
	UserID  string       `json:"user_id,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s QueryUserTaskCommentTotalRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type QueryUserTaskCommentTotalResponse struct {
	Data []*UserTaskCommentTotal `json:"data,omitempty"`
}

func (s QueryUserTaskCommentTotalResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type TaskNewComment struct {
	TaskID      string `json:"task_id,omitempty"`
	Content     string `json:"content,omitempty"`
	IsImportant bool   `json:"is_important,omitempty"`
	CreateAt    int64  `json:"create_at,omitempty"`
}

func (s TaskNewComment) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UpdateCommentFileInfoRequest struct {
	RefType  string       `json:"ref_type,omitempty"`
	RefID    string       `json:"ref_id,omitempty"`
	FileID   string       `json:"file_id,omitempty"`
	FileName string       `json:"file_name,omitempty"`
	Context  *UserContext `json:"context,omitempty"`
}

func (s UpdateCommentFileInfoRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserTaskCommentTotal struct {
	UserID                 string `json:"user_id,omitempty"`
	CommentTotal           int64  `json:"comment_total,omitempty"`
	ImportantTotal         int64  `json:"important_total,omitempty"`
	QuoteTotal             int64  `json:"quote_total,omitempty"`
	GadgetTotal            int64  `json:"gadget_total,omitempty"`
	GadgetMeetingTotal     int64  `json:"gadget_meeting_total,omitempty"`
	GadgetTimeCollectTotal int64  `json:"gadget_time_collect_total,omitempty"`
	GadgetNoticeTotal      int64  `json:"gadget_notice_total,omitempty"`
	GadgetTodoTotal        int64  `json:"gadget_todo_total,omitempty"`
}

func (s UserTaskCommentTotal) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建userinteraction的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) CommonCreateComment(ctx context.Context, req CommonCreateCommentRequest) grpcbase.Response {
	if CommonCreateCommentHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.userinteraction/CommonCreateComment", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return CommonCreateCommentHandler(ctx, req.(CommonCreateCommentRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) GetTaskNewComment(ctx context.Context, req GetTaskNewCommentRequest) grpcbase.Response {
	if GetTaskNewCommentHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.userinteraction/GetTaskNewComment", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetTaskNewCommentHandler(ctx, req.(GetTaskNewCommentRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) UpdateCommentFileInfo(ctx context.Context, req UpdateCommentFileInfoRequest) grpcbase.Response {
	if UpdateCommentFileInfoHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.userinteraction/UpdateCommentFileInfo", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return UpdateCommentFileInfoHandler(ctx, req.(UpdateCommentFileInfoRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) QueryUserTaskCommentTotal(ctx context.Context, req QueryUserTaskCommentTotalRequest) grpcbase.Response {
	if QueryUserTaskCommentTotalHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.userinteraction/QueryUserTaskCommentTotal", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return QueryUserTaskCommentTotalHandler(ctx, req.(QueryUserTaskCommentTotalRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}

func (s service) BatchQueryChatUsers(ctx context.Context, req BatchQueryChatUsersRequest) grpcbase.Response {
	if BatchQueryChatUsersHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.userinteraction/BatchQueryChatUsers", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return BatchQueryChatUsersHandler(ctx, req.(BatchQueryChatUsersRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
