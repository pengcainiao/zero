// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package userinteraction

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	commonCreateComment       grpctransport.Handler
	getTaskNewComment         grpctransport.Handler
	updateCommentFileInfo     grpctransport.Handler
	queryUserTaskCommentTotal grpctransport.Handler
	batchQueryChatUsers       grpctransport.Handler
}

func (b *serverBinding) CommonCreateComment(ctx context.Context, req *pb.CommonCreateCommentRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CommonCreateComment receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.commonCreateComment.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetTaskNewComment(ctx context.Context, req *pb.GetTaskNewCommentRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskNewComment receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getTaskNewComment.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) UpdateCommentFileInfo(ctx context.Context, req *pb.UpdateCommentFileInfoRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateCommentFileInfo receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.updateCommentFileInfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) QueryUserTaskCommentTotal(ctx context.Context, req *pb.QueryUserTaskCommentTotalRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryUserTaskCommentTotal receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.queryUserTaskCommentTotal.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) BatchQueryChatUsers(ctx context.Context, req *pb.BatchQueryChatUsersRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryChatUsers receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.batchQueryChatUsers.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterUserInteractionServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"commonCreateComment":       b.commonCreateComment,
		"getTaskNewComment":         b.getTaskNewComment,
		"updateCommentFileInfo":     b.updateCommentFileInfo,
		"queryUserTaskCommentTotal": b.queryUserTaskCommentTotal,
		"batchQueryChatUsers":       b.batchQueryChatUsers,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		commonCreateComment: grpcbase.CreateGRPCServer(
			makeCommonCreateCommentEndpoint(svc),
			decodeCommonCreateCommentRequest,
			encodeCommonCreateCommentResponse,
		),
		getTaskNewComment: grpcbase.CreateGRPCServer(
			makeGetTaskNewCommentEndpoint(svc),
			decodeGetTaskNewCommentRequest,
			encodeGetTaskNewCommentResponse,
		),
		updateCommentFileInfo: grpcbase.CreateGRPCServer(
			makeUpdateCommentFileInfoEndpoint(svc),
			decodeUpdateCommentFileInfoRequest,
			encodeUpdateCommentFileInfoResponse,
		),
		queryUserTaskCommentTotal: grpcbase.CreateGRPCServer(
			makeQueryUserTaskCommentTotalEndpoint(svc),
			decodeQueryUserTaskCommentTotalRequest,
			encodeQueryUserTaskCommentTotalResponse,
		),
		batchQueryChatUsers: grpcbase.CreateGRPCServer(
			makeBatchQueryChatUsersEndpoint(svc),
			decodeBatchQueryChatUsersRequest,
			encodeBatchQueryChatUsersResponse,
		),
	}
}
