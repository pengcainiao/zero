// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package userinteraction

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeCommonCreateCommentEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CommonCreateCommentRequest)
		v := svc.CommonCreateComment(ctx, req)
		return v, nil
	}
}
func decodeCommonCreateCommentRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CommonCreateCommentRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	//是复杂类型的数组
	var xfiles = make([]*File, 0)

	for _, v := range r.Files {
		xfiles = append(xfiles, &File{
			ID:     v.ID,
			Entry:  v.Entry,
			Name:   v.Name,
			Origin: v.Origin,
			Size:   v.Size,
		})
	}

	return CommonCreateCommentRequest{
		RefType:        r.RefType,
		RefID:          r.RefID,
		MsgType:        r.MsgType,
		SystemType:     r.SystemType,
		Content:        r.Content,
		AffectedUID:    r.AffectedUID,
		NotifyUID:      r.NotifyUID,
		NotPushDynamic: r.NotPushDynamic,
		Context:        xcontext,
		NotStore:       r.NotStore,
		Cronjobs:       r.Cronjobs,
		Changes:        r.Changes,
		NotPushSocket:  r.NotPushSocket,
		BatchID:        r.BatchID,
		BatchType:      r.BatchType,
		BatchRefID:     r.BatchRefID,
		MarkRead:       r.MarkRead,
		MsgForamt:      r.MsgForamt,
		Files:          xfiles,
		KrID:           r.KrID,
	}, nil
}

func encodeCommonCreateCommentResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CommonCreateCommentResponse)
	pbresp := &pb.CommonCreateCommentResponse{
		CommentID: resp.CommentID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeGetTaskNewCommentEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetTaskNewCommentRequest)
		v := svc.GetTaskNewComment(ctx, req)
		return v, nil
	}
}
func decodeGetTaskNewCommentRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetTaskNewCommentRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetTaskNewCommentRequest{
		CommentMap: r.CommentMap,
		Context:    xcontext,
	}, nil
}

func encodeGetTaskNewCommentResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(GetTaskNewCommentResponse)
	//是复杂类型的数组
	var dataArray = make([]*pb.TaskNewComment, 0)

	for _, v := range resp.Data {
		dataArray = append(dataArray, &pb.TaskNewComment{
			TaskID:      v.TaskID,
			Content:     v.Content,
			IsImportant: v.IsImportant,
			CreateAt:    v.CreateAt,
		})
	}
	pbresp := &pb.GetTaskNewCommentResponse{
		Data: dataArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeUpdateCommentFileInfoEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(UpdateCommentFileInfoRequest)
		v := svc.UpdateCommentFileInfo(ctx, req)
		return v, nil
	}
}
func decodeUpdateCommentFileInfoRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.UpdateCommentFileInfoRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return UpdateCommentFileInfoRequest{
		RefType:  r.RefType,
		RefID:    r.RefID,
		FileID:   r.FileID,
		FileName: r.FileName,
		Context:  xcontext,
	}, nil
}

func encodeUpdateCommentFileInfoResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeQueryUserTaskCommentTotalEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(QueryUserTaskCommentTotalRequest)
		v := svc.QueryUserTaskCommentTotal(ctx, req)
		return v, nil
	}
}
func decodeQueryUserTaskCommentTotalRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.QueryUserTaskCommentTotalRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return QueryUserTaskCommentTotalRequest{
		RefID:   r.RefID,
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func encodeQueryUserTaskCommentTotalResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(QueryUserTaskCommentTotalResponse)
	//是复杂类型的数组
	var dataArray = make([]*pb.UserTaskCommentTotal, 0)

	for _, v := range resp.Data {
		dataArray = append(dataArray, &pb.UserTaskCommentTotal{
			UserID:                 v.UserID,
			CommentTotal:           v.CommentTotal,
			ImportantTotal:         v.ImportantTotal,
			QuoteTotal:             v.QuoteTotal,
			GadgetTotal:            v.GadgetTotal,
			GadgetMeetingTotal:     v.GadgetMeetingTotal,
			GadgetTimeCollectTotal: v.GadgetTimeCollectTotal,
			GadgetNoticeTotal:      v.GadgetNoticeTotal,
			GadgetTodoTotal:        v.GadgetTodoTotal,
		})
	}
	pbresp := &pb.QueryUserTaskCommentTotalResponse{
		Data: dataArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeBatchQueryChatUsersEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(BatchQueryChatUsersRequest)
		v := svc.BatchQueryChatUsers(ctx, req)
		return v, nil
	}
}
func decodeBatchQueryChatUsersRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.BatchQueryChatUsersRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return BatchQueryChatUsersRequest{
		Context: xcontext,
		ChatsID: r.ChatsID,
	}, nil
}

func encodeBatchQueryChatUsersResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(BatchQueryChatUsersResponse)
	//是复杂类型的数组
	var chatusersArray = make([]*pb.ChatUser, 0)

	for _, v := range resp.ChatUsers {
		chatusersArray = append(chatusersArray, &pb.ChatUser{
			ChatID: v.ChatID,
			UserID: v.UserID,
		})
	}
	pbresp := &pb.BatchQueryChatUsersResponse{
		ChatUsers: chatusersArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
