// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package userinteraction

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeCommonCreateCommentRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CommonCreateCommentRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	//是复杂类型的数组
	var xfiles = make([]*pb.File, 0)

	for _, v := range r.Files {
		xfiles = append(xfiles, &pb.File{
			ID:     v.ID,
			Entry:  v.Entry,
			Name:   v.Name,
			Origin: v.Origin,
			Size:   v.Size,
		})
	}
	return &pb.CommonCreateCommentRequest{
		RefType:        r.RefType,
		RefID:          r.RefID,
		MsgType:        r.MsgType,
		SystemType:     r.SystemType,
		Content:        r.Content,
		AffectedUID:    r.AffectedUID,
		NotifyUID:      r.NotifyUID,
		NotPushDynamic: r.NotPushDynamic,
		Context:        xcontext,
		NotStore:       r.NotStore,
		Cronjobs:       r.Cronjobs,
		Changes:        r.Changes,
		NotPushSocket:  r.NotPushSocket,
		BatchID:        r.BatchID,
		BatchType:      r.BatchType,
		BatchRefID:     r.BatchRefID,
		MarkRead:       r.MarkRead,
		MsgForamt:      r.MsgForamt,
		Files:          xfiles,
		KrID:           r.KrID,
	}, nil
}

func decodeCommonCreateCommentResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CommonCreateCommentResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CommonCreateCommentResponse{
			CommentID: pbresp.CommentID,
		},
	}, nil
}
func encodeGetTaskNewCommentRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetTaskNewCommentRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetTaskNewCommentRequest{
		CommentMap: r.CommentMap,
		Context:    xcontext,
	}, nil
}

func decodeGetTaskNewCommentResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetTaskNewCommentResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var dataArray = make([]*TaskNewComment, 0)
	for _, v := range pbresp.Data {
		dataArray = append(dataArray, &TaskNewComment{
			//判断字段是否为复杂类型
			TaskID: v.TaskID,
			//判断字段是否为复杂类型
			Content: v.Content,
			//判断字段是否为复杂类型
			IsImportant: v.IsImportant,
			//判断字段是否为复杂类型
			CreateAt: v.CreateAt,
		})
	}

	return grpcbase.Response{
		Data: GetTaskNewCommentResponse{
			Data: dataArray,
		},
	}, nil
}
func encodeUpdateCommentFileInfoRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(UpdateCommentFileInfoRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.UpdateCommentFileInfoRequest{
		RefType:  r.RefType,
		RefID:    r.RefID,
		FileID:   r.FileID,
		FileName: r.FileName,
		Context:  xcontext,
	}, nil
}

func decodeUpdateCommentFileInfoResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeQueryUserTaskCommentTotalRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(QueryUserTaskCommentTotalRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.QueryUserTaskCommentTotalRequest{
		RefID:   r.RefID,
		UserID:  r.UserID,
		Context: xcontext,
	}, nil
}

func decodeQueryUserTaskCommentTotalResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.QueryUserTaskCommentTotalResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var dataArray = make([]*UserTaskCommentTotal, 0)
	for _, v := range pbresp.Data {
		dataArray = append(dataArray, &UserTaskCommentTotal{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			CommentTotal: v.CommentTotal,
			//判断字段是否为复杂类型
			ImportantTotal: v.ImportantTotal,
			//判断字段是否为复杂类型
			QuoteTotal: v.QuoteTotal,
			//判断字段是否为复杂类型
			GadgetTotal: v.GadgetTotal,
			//判断字段是否为复杂类型
			GadgetMeetingTotal: v.GadgetMeetingTotal,
			//判断字段是否为复杂类型
			GadgetTimeCollectTotal: v.GadgetTimeCollectTotal,
			//判断字段是否为复杂类型
			GadgetNoticeTotal: v.GadgetNoticeTotal,
			//判断字段是否为复杂类型
			GadgetTodoTotal: v.GadgetTodoTotal,
		})
	}

	return grpcbase.Response{
		Data: QueryUserTaskCommentTotalResponse{
			Data: dataArray,
		},
	}, nil
}
func encodeBatchQueryChatUsersRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(BatchQueryChatUsersRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.BatchQueryChatUsersRequest{
		Context: xcontext,
		ChatsID: r.ChatsID,
	}, nil
}

func decodeBatchQueryChatUsersResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.BatchQueryChatUsersResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var chatusersArray = make([]*ChatUser, 0)
	for _, v := range pbresp.ChatUsers {
		chatusersArray = append(chatusersArray, &ChatUser{
			//判断字段是否为复杂类型
			ChatID: v.ChatID,
			//判断字段是否为复杂类型
			UserID: v.UserID,
		})
	}

	return grpcbase.Response{
		Data: BatchQueryChatUsersResponse{
			ChatUsers: chatusersArray,
		},
	}, nil
}
