// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package userinteraction

import (
	"context"
	"log"

	"github.com/go-kit/kit/endpoint"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.UserInteractionSVC), &clientBinding{})
}

type clientBinding struct {
	commonCreateComment       endpoint.Endpoint
	getTaskNewComment         endpoint.Endpoint
	updateCommentFileInfo     endpoint.Endpoint
	queryUserTaskCommentTotal endpoint.Endpoint
	batchQueryChatUsers       endpoint.Endpoint
}

func (c *clientBinding) CommonCreateComment(ctx context.Context, params CommonCreateCommentRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CommonCreateComment request context is nil，trace span将无法生效")
	}
	response, err := c.commonCreateComment(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) GetTaskNewComment(ctx context.Context, params GetTaskNewCommentRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetTaskNewComment request context is nil，trace span将无法生效")
	}
	response, err := c.getTaskNewComment(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) UpdateCommentFileInfo(ctx context.Context, params UpdateCommentFileInfoRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：UpdateCommentFileInfo request context is nil，trace span将无法生效")
	}
	response, err := c.updateCommentFileInfo(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) QueryUserTaskCommentTotal(ctx context.Context, params QueryUserTaskCommentTotalRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：QueryUserTaskCommentTotal request context is nil，trace span将无法生效")
	}
	response, err := c.queryUserTaskCommentTotal(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
func (c *clientBinding) BatchQueryChatUsers(ctx context.Context, params BatchQueryChatUsersRequest) grpcbase.Response {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：BatchQueryChatUsers request context is nil，trace span将无法生效")
	}
	response, err := c.batchQueryChatUsers(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}

func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {

	c.commonCreateComment = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserInteraction",
		"CommonCreateComment",
		encodeCommonCreateCommentRequest,
		decodeCommonCreateCommentResponse)
	c.getTaskNewComment = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserInteraction",
		"GetTaskNewComment",
		encodeGetTaskNewCommentRequest,
		decodeGetTaskNewCommentResponse)
	c.updateCommentFileInfo = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserInteraction",
		"UpdateCommentFileInfo",
		encodeUpdateCommentFileInfoRequest,
		decodeUpdateCommentFileInfoResponse)
	c.queryUserTaskCommentTotal = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserInteraction",
		"QueryUserTaskCommentTotal",
		encodeQueryUserTaskCommentTotalRequest,
		decodeQueryUserTaskCommentTotalResponse)
	c.batchQueryChatUsers = grpcbase.CreateGRPCClientEndpoint(cc, "pb.UserInteraction",
		"BatchQueryChatUsers",
		encodeBatchQueryChatUsersRequest,
		decodeBatchQueryChatUsersResponse)
}
