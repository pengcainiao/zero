// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package userinteraction

import (
	"context"
	"errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"

	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient userinteraction GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.UserInteractionSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleCommonCreateComment 客户端处理逻辑
func (c *GrpcClient) HandleCommonCreateComment(ctx context.Context, req CommonCreateCommentRequest) *CommonCreateCommentResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.userinteraction/CommonCreateComment", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.CommonCreateComment(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 CommonCreateComment 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(CommonCreateCommentResponse)
		return &m
	}
	return nil
}

// HandleGetTaskNewComment 客户端处理逻辑
func (c *GrpcClient) HandleGetTaskNewComment(ctx context.Context, req GetTaskNewCommentRequest) *GetTaskNewCommentResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.userinteraction/GetTaskNewComment", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.GetTaskNewComment(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 GetTaskNewComment 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(GetTaskNewCommentResponse)
		return &m
	}
	return nil
}

// HandleUpdateCommentFileInfo 客户端处理逻辑
func (c *GrpcClient) HandleUpdateCommentFileInfo(ctx context.Context, req UpdateCommentFileInfoRequest) error {
	resp := c.client.UpdateCommentFileInfo(ctx, req)
	if resp.Message != "" {
		return errors.New(resp.Message)
	}
	return nil
}

// HandleQueryUserTaskCommentTotal 客户端处理逻辑
func (c *GrpcClient) HandleQueryUserTaskCommentTotal(ctx context.Context, req QueryUserTaskCommentTotalRequest) *QueryUserTaskCommentTotalResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.userinteraction/QueryUserTaskCommentTotal", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.QueryUserTaskCommentTotal(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 QueryUserTaskCommentTotal 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(QueryUserTaskCommentTotalResponse)
		return &m
	}
	return nil
}

// HandleBatchQueryChatUsers 客户端处理逻辑
func (c *GrpcClient) HandleBatchQueryChatUsers(ctx context.Context, req BatchQueryChatUsersRequest) *BatchQueryChatUsersResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.userinteraction/BatchQueryChatUsers", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.BatchQueryChatUsers(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 BatchQueryChatUsers 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(BatchQueryChatUsersResponse)
		return &m
	}
	return nil
}
