// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package pushgateway

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeWebsocketOnlineEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(WebsocketOnlineRequest)
		v := svc.WebsocketOnline(ctx, req)
		return v, nil
	}
}
func decodeWebsocketOnlineRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.WebsocketOnlineRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return WebsocketOnlineRequest{
		Users:   r.Users,
		Context: xcontext,
	}, nil
}

func encodeWebsocketOnlineResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(WebsocketOnlineResponse)
	//是复杂类型的数组
	var detailsArray = make([]*pb.Online, 0)

	for _, v := range resp.Details {
		detailsArray = append(detailsArray, &pb.Online{
			UserID:        v.UserID,
			Platform:      v.Platform,
			ClientVersion: v.ClientVersion,
		})
	}
	pbresp := &pb.WebsocketOnlineResponse{
		Details: detailsArray,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
