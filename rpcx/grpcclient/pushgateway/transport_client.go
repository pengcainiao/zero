// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package pushgateway

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeWebsocketOnlineRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(WebsocketOnlineRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.WebsocketOnlineRequest{
		Users:   r.Users,
		Context: xcontext,
	}, nil
}

func decodeWebsocketOnlineResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.WebsocketOnlineResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}
	//是复杂类型的数组
	var detailsArray = make([]*Online, 0)
	for _, v := range pbresp.Details {
		detailsArray = append(detailsArray, &Online{
			//判断字段是否为复杂类型
			UserID: v.UserID,
			//判断字段是否为复杂类型
			Platform: v.Platform,
			//判断字段是否为复杂类型
			ClientVersion: v.ClientVersion,
		})
	}

	return grpcbase.Response{
		Data: WebsocketOnlineResponse{
			Details: detailsArray,
		},
	}, nil
}
