// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package cronjob

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func makeCreateCronJobEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(CreateCronJobRequest)
		v := svc.CreateCronJob(ctx, req)
		return v, nil
	}
}
func decodeCreateCronJobRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.CreateCronJobRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return CreateCronJobRequest{
		Schedule:        r.Schedule,
		Code:            r.Code,
		RefTaskID:       r.RefTaskID,
		ExecuteMetadata: r.ExecuteMetadata,
		Context:         xcontext,
	}, nil
}

func encodeCreateCronJobResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(CreateCronJobResponse)
	pbresp := &pb.CreateCronJobResponse{
		JobID: resp.JobID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}

func makeDeleteCronJobEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(DeleteCronJobRequest)
		v := svc.DeleteCronJob(ctx, req)
		return v, nil
	}
}
func decodeDeleteCronJobRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.DeleteCronJobRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return DeleteCronJobRequest{
		FlyeleID: r.FlyeleID,
		Code:     r.Code,
		Context:  xcontext,
	}, nil
}

func encodeDeleteCronJobResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}

func makeGetCronJobEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(GetCronJobRequest)
		v := svc.GetCronJob(ctx, req)
		return v, nil
	}
}
func decodeGetCronJobRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.GetCronJobRequest)
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return GetCronJobRequest{
		FlyeleID: r.FlyeleID,
		Code:     r.Code,
		Context:  xcontext,
	}, nil
}

func encodeGetCronJobResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
	}, nil
}
