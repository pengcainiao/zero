// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package cronjob

import (
	"context"
	"errors"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
)

func encodeCreateCronJobRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(CreateCronJobRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.CreateCronJobRequest{
		Schedule:        r.Schedule,
		Code:            r.Code,
		RefTaskID:       r.RefTaskID,
		ExecuteMetadata: r.ExecuteMetadata,
		Context:         xcontext,
	}, nil
}

func decodeCreateCronJobResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.CreateCronJobResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: CreateCronJobResponse{
			JobID: pbresp.JobID,
		},
	}, nil
}
func encodeDeleteCronJobRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(DeleteCronJobRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.DeleteCronJobRequest{
		FlyeleID: r.FlyeleID,
		Code:     r.Code,
		Context:  xcontext,
	}, nil
}

func decodeDeleteCronJobResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
func encodeGetCronJobRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetCronJobRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetCronJobRequest{
		FlyeleID: r.FlyeleID,
		Code:     r.Code,
		Context:  xcontext,
	}, nil
}

func decodeGetCronJobResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	return grpcbase.Response{
		Message: r.Message,
	}, nil
}
