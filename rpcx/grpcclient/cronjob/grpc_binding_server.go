// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package cronjob

import (
	"context"
	"log"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"gitlab.flyele.vip/server-side/go-zero/v2/rpcx/grpcbase"
	pb "gitlab.flyele.vip/server-side/go-zero/v2/rpcx/protos"
	"google.golang.org/grpc"
)

type serverBinding struct {
	createCronJob grpctransport.Handler
	deleteCronJob grpctransport.Handler
	getCronJob    grpctransport.Handler
}

func (b *serverBinding) CreateCronJob(ctx context.Context, req *pb.CreateCronJobRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：CreateCronJob receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.createCronJob.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) DeleteCronJob(ctx context.Context, req *pb.DeleteCronJobRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：DeleteCronJob receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.deleteCronJob.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}
func (b *serverBinding) GetCronJob(ctx context.Context, req *pb.GetCronJobRequest) (*pb.Response, error) {
	if ctx == nil {
		ctx = context.Background()
		log.Println("GRPC：GetCronJob receive request context is nil，trace span将无法生效")
	}
	_, response, err := b.getCronJob.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.RegisterCronJobServer(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
		"createCronJob": b.createCronJob,
		"deleteCronJob": b.deleteCronJob,
		"getCronJob":    b.getCronJob,
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
		createCronJob: grpcbase.CreateGRPCServer(
			makeCreateCronJobEndpoint(svc),
			decodeCreateCronJobRequest,
			encodeCreateCronJobResponse,
		),
		deleteCronJob: grpcbase.CreateGRPCServer(
			makeDeleteCronJobEndpoint(svc),
			decodeDeleteCronJobRequest,
			encodeDeleteCronJobResponse,
		),
		getCronJob: grpcbase.CreateGRPCServer(
			makeGetCronJobEndpoint(svc),
			decodeGetCronJobRequest,
			encodeGetCronJobResponse,
		),
	}
}
